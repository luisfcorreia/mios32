
project_build/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .mios32_bsl   00004000  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08004000  08004000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b2b6  08010000  08010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000011d8  0801b2b8  0801b2b8  0001b2b8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000060  20000000  0801c490  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00004550  20000060  0801c4f0  00020060  2**3  ALLOC
  6 ._usrstack    00000100  200045b0  0801c4f0  000245b0  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  00020060  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000031  00000000  00000000  000200d0  2**0  CONTENTS, READONLY
  9 .debug_aranges 00002408  00000000  00000000  00020101  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003e21a  00000000  00000000  00022509  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000947c  00000000  00000000  00060723  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000102a8  00000000  00000000  00069b9f  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00005424  00000000  00000000  00079e48  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000cb00  00000000  00000000  0007f26c  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019d3b  00000000  00000000  0008bd6c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002748  00000000  00000000  000a5aa7  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <APP_Init>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
{
 8010000:	b508      	push	{r3, lr}
  // initialize all LEDs
  MIOS32_BOARD_LED_Init(0xffffffff);
 8010002:	f04f 30ff 	mov.w	r0, #4294967295
 8010006:	f003 f915 	bl	8013234 <MIOS32_BOARD_LED_Init>

  MIDIMON_Init(0);
 801000a:	2000      	movs	r0, #0
 801000c:	f009 fc56 	bl	80198bc <MIDIMON_Init>

  // init Synth
  SYNTH_Init(0);
 8010010:	2000      	movs	r0, #0
}
 8010012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MIOS32_BOARD_LED_Init(0xffffffff);

  MIDIMON_Init(0);

  // init Synth
  SYNTH_Init(0);
 8010016:	f000 b9ed 	b.w	80103f4 <SYNTH_Init>

0801001a <APP_Background>:

/////////////////////////////////////////////////////////////////////////////
// This task is running endless in background
/////////////////////////////////////////////////////////////////////////////
void APP_Background(void)
{
 801001a:	4770      	bx	lr

0801001c <APP_Tick>:
// more than 300 uS to ensure the responsiveness of buttons, encoders, pots.
// Alternatively you could create a dedicated task for application specific
// jobs as explained in $MIOS32_PATH/apps/tutorials/006_rtos_tasks
/////////////////////////////////////////////////////////////////////////////
void APP_Tick(void)
{
 801001c:	b508      	push	{r3, lr}
  // PWM modulate the status LED (this is a sign of life)
  u32 timestamp = MIOS32_TIMESTAMP_Get();
 801001e:	f002 fb31 	bl	8012684 <MIOS32_TIMESTAMP_Get>
  MIOS32_BOARD_LED_Set(1, (timestamp % 20) <= ((timestamp / 100) % 10));
 8010022:	2314      	movs	r3, #20
 8010024:	fbb0 f1f3 	udiv	r1, r0, r3
 8010028:	2264      	movs	r2, #100	; 0x64
 801002a:	fb03 0111 	mls	r1, r3, r1, r0
 801002e:	fbb0 f0f2 	udiv	r0, r0, r2
 8010032:	230a      	movs	r3, #10
 8010034:	fbb0 f2f3 	udiv	r2, r0, r3
 8010038:	fb03 0312 	mls	r3, r3, r2, r0
 801003c:	2001      	movs	r0, #1
 801003e:	4299      	cmp	r1, r3
 8010040:	bf8c      	ite	hi
 8010042:	2100      	movhi	r1, #0
 8010044:	2101      	movls	r1, #1
 8010046:	f003 f91d 	bl	8013284 <MIOS32_BOARD_LED_Set>
  
  // update synth
  SYNTH_Update_1mS();
}
 801004a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // PWM modulate the status LED (this is a sign of life)
  u32 timestamp = MIOS32_TIMESTAMP_Get();
  MIOS32_BOARD_LED_Set(1, (timestamp % 20) <= ((timestamp / 100) % 10));
  
  // update synth
  SYNTH_Update_1mS();
 801004e:	f000 bac1 	b.w	80105d4 <SYNTH_Update_1mS>

08010052 <APP_MIDI_Tick>:
// This hook is called each mS from the MIDI task which checks for incoming
// MIDI events. You could add more MIDI related jobs here, but they shouldn't
// consume more than 300 uS to ensure the responsiveness of incoming MIDI.
/////////////////////////////////////////////////////////////////////////////
void APP_MIDI_Tick(void)
{
 8010052:	4770      	bx	lr

08010054 <APP_MIDI_NotifyPackage>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a MIDI package has been received
/////////////////////////////////////////////////////////////////////////////
void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8010054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010056:	460c      	mov	r4, r1
 8010058:	4605      	mov	r5, r0
  MIDIMON_Print("MIDI_LEARN:", port, midi_package, MIOS32_TIMESTAMP_Get(), 0);
 801005a:	f002 fb13 	bl	8012684 <MIOS32_TIMESTAMP_Get>
 801005e:	2200      	movs	r2, #0
 8010060:	4603      	mov	r3, r0
 8010062:	9200      	str	r2, [sp, #0]
 8010064:	4629      	mov	r1, r5
 8010066:	4622      	mov	r2, r4
 8010068:	4804      	ldr	r0, [pc, #16]	; (801007c <APP_MIDI_NotifyPackage+0x28>)
 801006a:	f009 fc53 	bl	8019914 <MIDIMON_Print>


  // -> synth
  SYNTH_MIDI_NotifyPackage(port, midi_package);
 801006e:	4628      	mov	r0, r5
 8010070:	4621      	mov	r1, r4
}
 8010072:	b003      	add	sp, #12
 8010074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
  MIDIMON_Print("MIDI_LEARN:", port, midi_package, MIOS32_TIMESTAMP_Get(), 0);


  // -> synth
  SYNTH_MIDI_NotifyPackage(port, midi_package);
 8010078:	f000 b9ee 	b.w	8010458 <SYNTH_MIDI_NotifyPackage>
 801007c:	0801b2b8 	.word	0x0801b2b8

08010080 <APP_AIN_NotifyChange>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a pot has been moved
/////////////////////////////////////////////////////////////////////////////
void APP_AIN_NotifyChange(u32 pin, u32 pin_value)
{
 8010080:	4770      	bx	lr
	...

08010084 <setfreqvol>:
static void setfreqvol(struct voicedata*v,unsigned char*ct) {
  int u,l;
  unsigned int f;
  int p,q,p0,p1,p2;

  struct patchdata*pa=patch+v->chan;
 8010084:	f990 2002 	ldrsb.w	r2, [r0, #2]
}

/////////////////////////////////////////////////////////////////////////////
// derive frequency and volume settings from controller values for one voice
/////////////////////////////////////////////////////////////////////////////
static void setfreqvol(struct voicedata*v,unsigned char*ct) {
 8010088:	b5f0      	push	{r4, r5, r6, r7, lr}
  int p,q,p0,p1,p2;

  struct patchdata*pa=patch+v->chan;

  // oscillator 0 frequency
  u=((v->note&0x7f)<<12)/12; // pitch of note, Q12 in octaves, middle C =5
 801008a:	7847      	ldrb	r7, [r0, #1]
static void setfreqvol(struct voicedata*v,unsigned char*ct) {
  int u,l;
  unsigned int f;
  int p,q,p0,p1,p2;

  struct patchdata*pa=patch+v->chan;
 801008c:	4e57      	ldr	r6, [pc, #348]	; (80101ec <setfreqvol+0x168>)
 801008e:	0053      	lsls	r3, r2, #1
 8010090:	0155      	lsls	r5, r2, #5
 8010092:	1aec      	subs	r4, r5, r3

  // oscillator 0 frequency
  u=((v->note&0x7f)<<12)/12; // pitch of note, Q12 in octaves, middle C =5
 8010094:	f007 037f 	and.w	r3, r7, #127	; 0x7f
static void setfreqvol(struct voicedata*v,unsigned char*ct) {
  int u,l;
  unsigned int f;
  int p,q,p0,p1,p2;

  struct patchdata*pa=patch+v->chan;
 8010098:	19a5      	adds	r5, r4, r6

  // oscillator 0 frequency
  u=((v->note&0x7f)<<12)/12; // pitch of note, Q12 in octaves, middle C =5
 801009a:	031e      	lsls	r6, r3, #12
  u+=pbend[v->chan]/12;      // gives +/- 2 semitones
 801009c:	4b54      	ldr	r3, [pc, #336]	; (80101f0 <setfreqvol+0x16c>)
 801009e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  int p,q,p0,p1,p2;

  struct patchdata*pa=patch+v->chan;

  // oscillator 0 frequency
  u=((v->note&0x7f)<<12)/12; // pitch of note, Q12 in octaves, middle C =5
 80100a2:	240c      	movs	r4, #12
 80100a4:	fb96 f7f4 	sdiv	r7, r6, r4
  u+=pbend[v->chan]/12;      // gives +/- 2 semitones
 80100a8:	fb92 f6f4 	sdiv	r6, r2, r4
 80100ac:	19bc      	adds	r4, r7, r6
  u-=287; // constant to give correct tuning for sample rate: log((72e6/2048)/(440*2^-0.75)/128)/log(2)*4096 for A=440Hz
 80100ae:	f46f 778f 	mvn.w	r7, #286	; 0x11e
 80100b2:	19e3      	adds	r3, r4, r7
  f=(exptab0[(u&0xfc0)>>6]*exptab1[u&0x3f])>>(10-(u>>12)); // convert to linear frequency
 80100b4:	f3c3 1685 	ubfx	r6, r3, #6, #6
 80100b8:	4a4e      	ldr	r2, [pc, #312]	; (80101f4 <setfreqvol+0x170>)
 80100ba:	4c4f      	ldr	r4, [pc, #316]	; (80101f8 <setfreqvol+0x174>)
 80100bc:	f832 7016 	ldrh.w	r7, [r2, r6, lsl #1]
 80100c0:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 80100c4:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 80100c8:	131e      	asrs	r6, r3, #12
 80100ca:	4357      	muls	r7, r2
 80100cc:	f1c6 040a 	rsb	r4, r6, #10
 80100d0:	fa47 f704 	asr.w	r7, r7, r4
  v->o0dph=f;
 80100d4:	6347      	str	r7, [r0, #52]	; 0x34

  // oscillator 0 waveform
  l=f>>13; // compute slope limit: l=32768 at 1/8 Nyquist
  if(l>30000) l=30000;  // keep within sensible range
 80100d6:	f247 5430 	movw	r4, #30000	; 0x7530
  u-=287; // constant to give correct tuning for sample rate: log((72e6/2048)/(440*2^-0.75)/128)/log(2)*4096 for A=440Hz
  f=(exptab0[(u&0xfc0)>>6]*exptab1[u&0x3f])>>(10-(u>>12)); // convert to linear frequency
  v->o0dph=f;

  // oscillator 0 waveform
  l=f>>13; // compute slope limit: l=32768 at 1/8 Nyquist
 80100da:	0b7f      	lsrs	r7, r7, #13
  if(l>30000) l=30000;  // keep within sensible range
 80100dc:	42a7      	cmp	r7, r4
 80100de:	dc05      	bgt.n	80100ec <setfreqvol+0x68>
  if(l<1024) l=1024;
 80100e0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80100e4:	bfac      	ite	ge
 80100e6:	463c      	movge	r4, r7
 80100e8:	f44f 6480 	movlt.w	r4, #1024	; 0x400

  // waveform has four periods p0-3: slope0, flat0, slope1, flat1
  p=0x8000-(ct[16]*248); // first half p=[1272,32768]
 80100ec:	7c0a      	ldrb	r2, [r1, #16]
  q=0x10000-p;           // second half q=[32768,64264]
  p0=(p*(127-ct[17]))>>7;
 80100ee:	7c4f      	ldrb	r7, [r1, #17]
  l=f>>13; // compute slope limit: l=32768 at 1/8 Nyquist
  if(l>30000) l=30000;  // keep within sensible range
  if(l<1024) l=1024;

  // waveform has four periods p0-3: slope0, flat0, slope1, flat1
  p=0x8000-(ct[16]*248); // first half p=[1272,32768]
 80100f0:	f06f 0cf7 	mvn.w	ip, #247	; 0xf7
 80100f4:	fb0c fc02 	mul.w	ip, ip, r2
 80100f8:	f50c 4600 	add.w	r6, ip, #32768	; 0x8000
  q=0x10000-p;           // second half q=[32768,64264]
  p0=(p*(127-ct[17]))>>7;
 80100fc:	f1c7 077f 	rsb	r7, r7, #127	; 0x7f
  if(l>30000) l=30000;  // keep within sensible range
  if(l<1024) l=1024;

  // waveform has four periods p0-3: slope0, flat0, slope1, flat1
  p=0x8000-(ct[16]*248); // first half p=[1272,32768]
  q=0x10000-p;           // second half q=[32768,64264]
 8010100:	f5cc 4c00 	rsb	ip, ip, #32768	; 0x8000
  p0=(p*(127-ct[17]))>>7;
 8010104:	fb07 f206 	mul.w	r2, r7, r6
  if(p0<l) p0=l; // limit waveform slope
  p1=p-p0;
  p2=(q*(127-ct[17]))>>7;
 8010108:	fb07 f70c 	mul.w	r7, r7, ip
 801010c:	11ff      	asrs	r7, r7, #7
  if(l<1024) l=1024;

  // waveform has four periods p0-3: slope0, flat0, slope1, flat1
  p=0x8000-(ct[16]*248); // first half p=[1272,32768]
  q=0x10000-p;           // second half q=[32768,64264]
  p0=(p*(127-ct[17]))>>7;
 801010e:	11d2      	asrs	r2, r2, #7
 8010110:	4294      	cmp	r4, r2
 8010112:	bfa8      	it	ge
 8010114:	4622      	movge	r2, r4
 8010116:	42bc      	cmp	r4, r7
 8010118:	bfb8      	it	lt
 801011a:	463c      	movlt	r4, r7
  if(p0<l) p0=l; // limit waveform slope
  p1=p-p0;
  p2=(q*(127-ct[17]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o0p=(p0+p2)/2+p1; // constants used by assembler code
 801011c:	1917      	adds	r7, r2, r4
  // waveform has four periods p0-3: slope0, flat0, slope1, flat1
  p=0x8000-(ct[16]*248); // first half p=[1272,32768]
  q=0x10000-p;           // second half q=[32768,64264]
  p0=(p*(127-ct[17]))>>7;
  if(p0<l) p0=l; // limit waveform slope
  p1=p-p0;
 801011e:	1ab6      	subs	r6, r6, r2
  p2=(q*(127-ct[17]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o0p=(p0+p2)/2+p1; // constants used by assembler code
 8010120:	eb06 0667 	add.w	r6, r6, r7, asr #1
 8010124:	8086      	strh	r6, [r0, #4]
  v->o0k0=0x800000/p0;
 8010126:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801012a:	fb96 f2f2 	sdiv	r2, r6, r2
  v->o0k1=0x800000/p2;
 801012e:	fb96 f4f4 	sdiv	r4, r6, r4
  p1=p-p0;
  p2=(q*(127-ct[17]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o0p=(p0+p2)/2+p1; // constants used by assembler code
  v->o0k0=0x800000/p0;
 8010132:	80c2      	strh	r2, [r0, #6]
  v->o0k1=0x800000/p2;
 8010134:	8104      	strh	r4, [r0, #8]

  // oscillator 1 frequency
  if(ct[7]>0x60) u=-0x1000-287;     // fixed "low" frequency
 8010136:	79ce      	ldrb	r6, [r1, #7]
 8010138:	2e60      	cmp	r6, #96	; 0x60
 801013a:	d805      	bhi.n	8010148 <setfreqvol+0xc4>
  else if(ct[7]>0x20) u=0x3000-287; // fixed "high" frequency
 801013c:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8010140:	2e20      	cmp	r6, #32
 8010142:	bf88      	it	hi
 8010144:	4613      	movhi	r3, r2
 8010146:	e000      	b.n	801014a <setfreqvol+0xc6>
  v->o0p=(p0+p2)/2+p1; // constants used by assembler code
  v->o0k0=0x800000/p0;
  v->o0k1=0x800000/p2;

  // oscillator 1 frequency
  if(ct[7]>0x60) u=-0x1000-287;     // fixed "low" frequency
 8010148:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <setfreqvol+0x178>)
  else if(ct[7]>0x20) u=0x3000-287; // fixed "high" frequency
  u+=(ct[2]<<7)+(ct[3]<<3)-0x2200;
 801014a:	78ce      	ldrb	r6, [r1, #3]
 801014c:	788c      	ldrb	r4, [r1, #2]
 801014e:	00f2      	lsls	r2, r6, #3
 8010150:	eb02 14c4 	add.w	r4, r2, r4, lsl #7
 8010154:	f5a4 5608 	sub.w	r6, r4, #8704	; 0x2200
 8010158:	199b      	adds	r3, r3, r6
  f=(exptab0[(u&0xfc0)>>6]*exptab1[u&0x3f])>>(10-(u>>12));
 801015a:	f3c3 1485 	ubfx	r4, r3, #6, #6
 801015e:	4a25      	ldr	r2, [pc, #148]	; (80101f4 <setfreqvol+0x170>)
 8010160:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 8010164:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8010168:	4c23      	ldr	r4, [pc, #140]	; (80101f8 <setfreqvol+0x174>)
 801016a:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801016e:	131b      	asrs	r3, r3, #12
 8010170:	4372      	muls	r2, r6
 8010172:	f1c3 040a 	rsb	r4, r3, #10
 8010176:	fa42 f204 	asr.w	r2, r2, r4
  v->o1dph=f;

  // oscillator 1 waveform
  l=f>>13; // =32768 at 1/8 Nyquist
 801017a:	0b56      	lsrs	r6, r2, #13
  // oscillator 1 frequency
  if(ct[7]>0x60) u=-0x1000-287;     // fixed "low" frequency
  else if(ct[7]>0x20) u=0x3000-287; // fixed "high" frequency
  u+=(ct[2]<<7)+(ct[3]<<3)-0x2200;
  f=(exptab0[(u&0xfc0)>>6]*exptab1[u&0x3f])>>(10-(u>>12));
  v->o1dph=f;
 801017c:	6382      	str	r2, [r0, #56]	; 0x38

  // oscillator 1 waveform
  l=f>>13; // =32768 at 1/8 Nyquist
  if(l>30000) l=30000;
 801017e:	f247 5230 	movw	r2, #30000	; 0x7530
 8010182:	4296      	cmp	r6, r2
 8010184:	dc05      	bgt.n	8010192 <setfreqvol+0x10e>
  if(l<1024) l=1024;
 8010186:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801018a:	bfac      	ite	ge
 801018c:	4632      	movge	r2, r6
 801018e:	f44f 6280 	movlt.w	r2, #1024	; 0x400

  p=0x8000-(ct[0]*248); // first half p=[1272,32768]
 8010192:	780b      	ldrb	r3, [r1, #0]
  q=0x10000-p;          // second half q=[32768,64264]
  p0=(p*(127-ct[1]))>>7;
 8010194:	7849      	ldrb	r1, [r1, #1]
  // oscillator 1 waveform
  l=f>>13; // =32768 at 1/8 Nyquist
  if(l>30000) l=30000;
  if(l<1024) l=1024;

  p=0x8000-(ct[0]*248); // first half p=[1272,32768]
 8010196:	f06f 06f7 	mvn.w	r6, #247	; 0xf7
 801019a:	435e      	muls	r6, r3
 801019c:	f506 4400 	add.w	r4, r6, #32768	; 0x8000
  q=0x10000-p;          // second half q=[32768,64264]
  p0=(p*(127-ct[1]))>>7;
 80101a0:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
  l=f>>13; // =32768 at 1/8 Nyquist
  if(l>30000) l=30000;
  if(l<1024) l=1024;

  p=0x8000-(ct[0]*248); // first half p=[1272,32768]
  q=0x10000-p;          // second half q=[32768,64264]
 80101a4:	f5c6 4600 	rsb	r6, r6, #32768	; 0x8000
  p0=(p*(127-ct[1]))>>7;
 80101a8:	fb01 f304 	mul.w	r3, r1, r4
  if(p0<l) p0=l;
  p1=p-p0;
  p2=(q*(127-ct[1]))>>7;
 80101ac:	4371      	muls	r1, r6
 80101ae:	11c9      	asrs	r1, r1, #7
  if(l>30000) l=30000;
  if(l<1024) l=1024;

  p=0x8000-(ct[0]*248); // first half p=[1272,32768]
  q=0x10000-p;          // second half q=[32768,64264]
  p0=(p*(127-ct[1]))>>7;
 80101b0:	11db      	asrs	r3, r3, #7
 80101b2:	429a      	cmp	r2, r3
 80101b4:	bfa8      	it	ge
 80101b6:	4613      	movge	r3, r2
 80101b8:	428a      	cmp	r2, r1
 80101ba:	bfb8      	it	lt
 80101bc:	460a      	movlt	r2, r1
  if(p0<l) p0=l;
  p1=p-p0;
  p2=(q*(127-ct[1]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
 80101be:	1899      	adds	r1, r3, r2

  p=0x8000-(ct[0]*248); // first half p=[1272,32768]
  q=0x10000-p;          // second half q=[32768,64264]
  p0=(p*(127-ct[1]))>>7;
  if(p0<l) p0=l;
  p1=p-p0;
 80101c0:	1ae4      	subs	r4, r4, r3
  p2=(q*(127-ct[1]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
 80101c2:	eb04 0461 	add.w	r4, r4, r1, asr #1
  v->o1k0=0x800000/p0;
 80101c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80101ca:	fb91 f3f3 	sdiv	r3, r1, r3
  v->o1k1=0x800000/p2;
 80101ce:	fb91 f2f2 	sdiv	r2, r1, r2
  p1=p-p0;
  p2=(q*(127-ct[1]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
  v->o1k0=0x800000/p0;
 80101d2:	8183      	strh	r3, [r0, #12]
  v->o1k1=0x800000/p2;

  v->lvol=(pa->lvol*v->vel)>>7; // calculate output multipliers taking velocity into account
 80101d4:	78c1      	ldrb	r1, [r0, #3]
 80101d6:	88eb      	ldrh	r3, [r5, #6]
  p2=(q*(127-ct[1]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
  v->o1k0=0x800000/p0;
  v->o1k1=0x800000/p2;
 80101d8:	81c2      	strh	r2, [r0, #14]

  v->lvol=(pa->lvol*v->vel)>>7; // calculate output multipliers taking velocity into account
 80101da:	434b      	muls	r3, r1
 80101dc:	11da      	asrs	r2, r3, #7
  v->rvol=(pa->rvol*v->vel)>>7;
 80101de:	892b      	ldrh	r3, [r5, #8]
  if(p0<l) p0=l;
  p1=p-p0;
  p2=(q*(127-ct[1]))>>7;
  if(p2<l) p2=l;
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
 80101e0:	8144      	strh	r4, [r0, #10]
  v->o1k0=0x800000/p0;
  v->o1k1=0x800000/p2;

  v->lvol=(pa->lvol*v->vel)>>7; // calculate output multipliers taking velocity into account
  v->rvol=(pa->rvol*v->vel)>>7;
 80101e2:	4359      	muls	r1, r3
 80101e4:	11c9      	asrs	r1, r1, #7
//  p3=q-p2; // not used
  v->o1p=(p0+p2)/2+p1;
  v->o1k0=0x800000/p0;
  v->o1k1=0x800000/p2;

  v->lvol=(pa->lvol*v->vel)>>7; // calculate output multipliers taking velocity into account
 80101e6:	8482      	strh	r2, [r0, #36]	; 0x24
  v->rvol=(pa->rvol*v->vel)>>7;
 80101e8:	84c1      	strh	r1, [r0, #38]	; 0x26
 80101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ec:	200006e4 	.word	0x200006e4
 80101f0:	20000f54 	.word	0x20000f54
 80101f4:	0801b2c4 	.word	0x0801b2c4
 80101f8:	0801b344 	.word	0x0801b344
 80101fc:	ffffeee1 	.word	0xffffeee1

08010200 <SYNTH_ReloadSampleBuffer>:
// This function is called by MIOS32_I2S when the lower (state == 0) or 
// upper (state == 1) range of the sample buffer has been transfered, so 
// that it can be updated
/////////////////////////////////////////////////////////////////////////////
void SYNTH_ReloadSampleBuffer(u32 state)
{
 8010200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static u32 h = 0; // interrupt counter

  // transfer new samples to the lower/upper sample buffer range
  int i;
  u32 *buffer = (u32 *)&sample_buffer[state ? (SAMPLE_BUFFER_SIZE/2) : 0];
 8010204:	4c73      	ldr	r4, [pc, #460]	; (80103d4 <SYNTH_ReloadSampleBuffer+0x1d4>)
 8010206:	2800      	cmp	r0, #0
 8010208:	bf14      	ite	ne
 801020a:	2010      	movne	r0, #16
 801020c:	2000      	moveq	r0, #0

  MIOS32_BOARD_J10_PinSet(0, 1); // for performance measurements at J10A.D0
 801020e:	2101      	movs	r1, #1
{
  static u32 h = 0; // interrupt counter

  // transfer new samples to the lower/upper sample buffer range
  int i;
  u32 *buffer = (u32 *)&sample_buffer[state ? (SAMPLE_BUFFER_SIZE/2) : 0];
 8010210:	1825      	adds	r5, r4, r0

  MIOS32_BOARD_J10_PinSet(0, 1); // for performance measurements at J10A.D0
 8010212:	2000      	movs	r0, #0
 8010214:	f003 f83e 	bl	8013294 <MIOS32_BOARD_J10_PinSet>

  // update waves
  // on a STM32F407 this takes ca. 35 uS
  wavupa();
 8010218:	f009 fe1e 	bl	8019e58 <wavupa>
 801021c:	2300      	movs	r3, #0
/////////////////////////////////////////////////////////////////////////////
// This function is called by MIOS32_I2S when the lower (state == 0) or 
// upper (state == 1) range of the sample buffer has been transfered, so 
// that it can be updated
/////////////////////////////////////////////////////////////////////////////
void SYNTH_ReloadSampleBuffer(u32 state)
 801021e:	4a6e      	ldr	r2, [pc, #440]	; (80103d8 <SYNTH_ReloadSampleBuffer+0x1d8>)
 8010220:	1899      	adds	r1, r3, r2
  // transfer into sample buffer
  {
    int *tbuf_ptr = (int *)&tbuf[0];
    for(i=0; i<SAMPLE_BUFFER_SIZE/2; ++i) {
      // 24bit -> 16bit data
      u16 chn1_value = *(tbuf_ptr++) >> 16;
 8010222:	589f      	ldr	r7, [r3, r2]
  n=h&7; // determine A/D batch
  knob[n   ]=(short)ADC_DR0; // read three conversion results, one from each bank of 8 controls
  knob[n+ 8]=(short)ADC_DR1;
  knob[n+16]=(short)ADC_DR2;
#endif
}
 8010224:	88ce      	ldrh	r6, [r1, #6]
 8010226:	0c38      	lsrs	r0, r7, #16
 8010228:	3308      	adds	r3, #8
    for(i=0; i<SAMPLE_BUFFER_SIZE/2; ++i) {
      // 24bit -> 16bit data
      u16 chn1_value = *(tbuf_ptr++) >> 16;
      u16 chn2_value = *(tbuf_ptr++) >> 16;

      *buffer++ = ((u32)chn2_value << 16) | chn1_value;
 801022a:	ea40 4406 	orr.w	r4, r0, r6, lsl #16
  wavupa();

  // transfer into sample buffer
  {
    int *tbuf_ptr = (int *)&tbuf[0];
    for(i=0; i<SAMPLE_BUFFER_SIZE/2; ++i) {
 801022e:	2b20      	cmp	r3, #32
      // 24bit -> 16bit data
      u16 chn1_value = *(tbuf_ptr++) >> 16;
      u16 chn2_value = *(tbuf_ptr++) >> 16;

      *buffer++ = ((u32)chn2_value << 16) | chn1_value;
 8010230:	f845 4b04 	str.w	r4, [r5], #4
  wavupa();

  // transfer into sample buffer
  {
    int *tbuf_ptr = (int *)&tbuf[0];
    for(i=0; i<SAMPLE_BUFFER_SIZE/2; ++i) {
 8010234:	d1f3      	bne.n	801021e <SYNTH_ReloadSampleBuffer+0x1e>

      *buffer++ = ((u32)chn2_value << 16) | chn1_value;
    }
  }

  MIOS32_BOARD_J10_PinSet(0, 0); // for performance measurements at J10A.D0
 8010236:	2000      	movs	r0, #0


  {
    ++h; // count interrupts
 8010238:	4d68      	ldr	r5, [pc, #416]	; (80103dc <SYNTH_ReloadSampleBuffer+0x1dc>)

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
 801023a:	4f69      	ldr	r7, [pc, #420]	; (80103e0 <SYNTH_ReloadSampleBuffer+0x1e0>)

      *buffer++ = ((u32)chn2_value << 16) | chn1_value;
    }
  }

  MIOS32_BOARD_J10_PinSet(0, 0); // for performance measurements at J10A.D0
 801023c:	4601      	mov	r1, r0
 801023e:	f003 f829 	bl	8013294 <MIOS32_BOARD_J10_PinSet>


  {
    ++h; // count interrupts
 8010242:	682b      	ldr	r3, [r5, #0]
 8010244:	1c5e      	adds	r6, r3, #1

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
 8010246:	f006 010f 	and.w	r1, r6, #15
 801024a:	2250      	movs	r2, #80	; 0x50
 801024c:	434a      	muls	r2, r1
 801024e:	19d3      	adds	r3, r2, r7
    struct patchdata *p = patch+v->chan;     // find its parameters
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
 8010250:	2106      	movs	r1, #6
  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
    int n = !!(h&NPOLY);       // choose an eg
 8010252:	f3c6 1700 	ubfx	r7, r6, #4, #1


  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
 8010256:	9200      	str	r2, [sp, #0]
    struct patchdata *p = patch+v->chan;     // find its parameters
 8010258:	f993 2002 	ldrsb.w	r2, [r3, #2]

  MIOS32_BOARD_J10_PinSet(0, 0); // for performance measurements at J10A.D0


  {
    ++h; // count interrupts
 801025c:	602e      	str	r6, [r5, #0]

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
 801025e:	4379      	muls	r1, r7

  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
 8010260:	0050      	lsls	r0, r2, #1
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
 8010262:	3118      	adds	r1, #24

  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
 8010264:	ea4f 1942 	mov.w	r9, r2, lsl #5
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
    int i = ev->logout;
    int j = (v->note&0x80)||sus[v->chan]!=0; // note down?
 8010268:	f993 6001 	ldrsb.w	r6, [r3, #1]

  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
 801026c:	4d5d      	ldr	r5, [pc, #372]	; (80103e4 <SYNTH_ReloadSampleBuffer+0x1e4>)
 801026e:	ebc0 0909 	rsb	r9, r0, r9
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
 8010272:	1858      	adds	r0, r3, r1
    int i = ev->logout;
    int j = (v->note&0x80)||sus[v->chan]!=0; // note down?
 8010274:	2e00      	cmp	r6, #0

  {
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
 8010276:	444d      	add	r5, r9
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
    struct egvars *ev = v->egv+n;
    int i = ev->logout;
 8010278:	8844      	ldrh	r4, [r0, #2]
    int j = (v->note&0x80)||sus[v->chan]!=0; // note down?
 801027a:	db05      	blt.n	8010288 <SYNTH_ReloadSampleBuffer+0x88>
 801027c:	4e5a      	ldr	r6, [pc, #360]	; (80103e8 <SYNTH_ReloadSampleBuffer+0x1e8>)
 801027e:	5cb2      	ldrb	r2, [r6, r2]
 8010280:	1c16      	adds	r6, r2, #0
 8010282:	bf18      	it	ne
 8010284:	2601      	movne	r6, #1
 8010286:	e000      	b.n	801028a <SYNTH_ReloadSampleBuffer+0x8a>
 8010288:	2601      	movs	r6, #1

    if(ev->state==0) i=0;
 801028a:	5a5a      	ldrh	r2, [r3, r1]
 801028c:	2a00      	cmp	r2, #0
 801028e:	d039      	beq.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
    else {
      if(!j) ev->state=5; // exit sustain when note is released
 8010290:	b90e      	cbnz	r6, 8010296 <SYNTH_ReloadSampleBuffer+0x96>
 8010292:	2205      	movs	r2, #5
 8010294:	525a      	strh	r2, [r3, r1]
      switch(ev->state) {
 8010296:	f833 b001 	ldrh.w	fp, [r3, r1]
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
 801029a:	f107 0a01 	add.w	sl, r7, #1
 801029e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
    int j = (v->note&0x80)||sus[v->chan]!=0; // note down?

    if(ev->state==0) i=0;
    else {
      if(!j) ev->state=5; // exit sustain when note is released
      switch(ev->state) {
 80102a2:	f10b 3bff 	add.w	fp, fp, #4294967295
    ++h; // count interrupts

    struct voicedata *v = vcs+(h&(NPOLY-1)); // choose a voice for eg processing
    struct patchdata *p = patch+v->chan;     // find its parameters
    int n = !!(h&NPOLY);       // choose an eg
    struct egparams *ep = p->egp+n;         // get pointers to parameters and variables
 80102a6:	f10a 0c06 	add.w	ip, sl, #6
    struct egvars *ev = v->egv+n;
    int i = ev->logout;
 80102aa:	4622      	mov	r2, r4
    int j = (v->note&0x80)||sus[v->chan]!=0; // note down?

    if(ev->state==0) i=0;
    else {
      if(!j) ev->state=5; // exit sustain when note is released
      switch(ev->state) {
 80102ac:	f8cd b004 	str.w	fp, [sp, #4]
 80102b0:	f1bb 0f04 	cmp.w	fp, #4
 80102b4:	d826      	bhi.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
 80102b6:	e8df f00b 	tbb	[pc, fp]
 80102ba:	0c03      	.short	0x0c03
 80102bc:	2514      	.short	0x2514
 80102be:	1f          	.byte	0x1f
 80102bf:	00          	.byte	0x00
      case 1:
	i+=ep->a;  // attack
 80102c0:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80102c4:	18a2      	adds	r2, r4, r2
	if(i>=0x10000) i=0xffff, ev->state=2;
 80102c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80102ca:	42a2      	cmp	r2, r4
 80102cc:	dd1a      	ble.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
 80102ce:	2202      	movs	r2, #2
 80102d0:	e00f      	b.n	80102f2 <SYNTH_ReloadSampleBuffer+0xf2>
	break;
      case 2:
	i--;       // hold at top of attack
 80102d2:	1e62      	subs	r2, r4, #1
	if(i<=0xfff0) ev->state=3; // hold for 16 iterations
 80102d4:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80102d8:	42a2      	cmp	r2, r4
 80102da:	dc13      	bgt.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
 80102dc:	2403      	movs	r4, #3
 80102de:	525c      	strh	r4, [r3, r1]
 80102e0:	e010      	b.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
	break;
      case 3:
	i-=ep->d;  // decay
 80102e2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80102e6:	1aa2      	subs	r2, r4, r2
	if(i<ep->s) i=ep->s, ev->state=4;
 80102e8:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 80102ec:	42a2      	cmp	r2, r4
 80102ee:	da09      	bge.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
 80102f0:	2204      	movs	r2, #4
 80102f2:	525a      	strh	r2, [r3, r1]
 80102f4:	4622      	mov	r2, r4
 80102f6:	e005      	b.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
	break;
      case 4:  // sustain
	break;
      case 5:
	i-=ep->r;  // release
 80102f8:	f8bc 2006 	ldrh.w	r2, [ip, #6]
	if(i<0) i=0, ev->state=0;
 80102fc:	1aa2      	subs	r2, r4, r2
 80102fe:	d501      	bpl.n	8010304 <SYNTH_ReloadSampleBuffer+0x104>
 8010300:	2200      	movs	r2, #0
 8010302:	525a      	strh	r2, [r3, r1]
	break;
      }
    }

    ev->logout=i;
 8010304:	8042      	strh	r2, [r0, #2]
    if(i==0) ev->out=0;
 8010306:	b17a      	cbz	r2, 8010328 <SYNTH_ReloadSampleBuffer+0x128>
    else ev->out=(exptab0[(i&0xfc0)>>6]*exptab1[i&0x3f])>>(31-(i>>12)); // compute linear output
 8010308:	f3c2 1485 	ubfx	r4, r2, #6, #6
 801030c:	4937      	ldr	r1, [pc, #220]	; (80103ec <SYNTH_ReloadSampleBuffer+0x1ec>)
 801030e:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
 8010312:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 8010316:	4c36      	ldr	r4, [pc, #216]	; (80103f0 <SYNTH_ReloadSampleBuffer+0x1f0>)
 8010318:	f834 401e 	ldrh.w	r4, [r4, lr, lsl #1]
 801031c:	1312      	asrs	r2, r2, #12
 801031e:	4361      	muls	r1, r4
 8010320:	f1c2 021f 	rsb	r2, r2, #31
 8010324:	fa41 f202 	asr.w	r2, r1, r2
 8010328:	8082      	strh	r2, [r0, #4]

    if(n==0) { // do oscillator 1 eg as well
 801032a:	2f00      	cmp	r7, #0
 801032c:	d139      	bne.n	80103a2 <SYNTH_ReloadSampleBuffer+0x1a2>
      i=v->eg0trip;
 801032e:	8ada      	ldrh	r2, [r3, #22]
      if(i>4) v->vol=ev->out;
 8010330:	2a04      	cmp	r2, #4
 8010332:	bfc4      	itt	gt
 8010334:	8881      	ldrhgt	r1, [r0, #4]
 8010336:	8299      	strhgt	r1, [r3, #20]
      if(v->vol==ev->out) i=0;
 8010338:	8a9c      	ldrh	r4, [r3, #20]
 801033a:	8881      	ldrh	r1, [r0, #4]
 801033c:	428c      	cmp	r4, r1
 801033e:	bf08      	it	eq
 8010340:	2200      	moveq	r2, #0
      i++;
 8010342:	1c50      	adds	r0, r2, #1
      v->eg0trip=i;
 8010344:	82d8      	strh	r0, [r3, #22]
      i=v->o1eglogout;
 8010346:	8a5a      	ldrh	r2, [r3, #18]
      if(!j) v->o1egstate=1;
 8010348:	b90e      	cbnz	r6, 801034e <SYNTH_ReloadSampleBuffer+0x14e>
 801034a:	2101      	movs	r1, #1
 801034c:	8219      	strh	r1, [r3, #16]
      if(v->o1egstate==0) { // attack
 801034e:	8a18      	ldrh	r0, [r3, #16]
 8010350:	b960      	cbnz	r0, 801036c <SYNTH_ReloadSampleBuffer+0x16c>
	i+=p->o1ega;
 8010352:	f8df b090 	ldr.w	fp, [pc, #144]	; 80103e4 <SYNTH_ReloadSampleBuffer+0x1e4>
 8010356:	f839 000b 	ldrh.w	r0, [r9, fp]
	if(i>=0x10000) i=0xffff, v->o1egstate=1;
 801035a:	f64f 71ff 	movw	r1, #65535	; 0xffff
      i++;
      v->eg0trip=i;
      i=v->o1eglogout;
      if(!j) v->o1egstate=1;
      if(v->o1egstate==0) { // attack
	i+=p->o1ega;
 801035e:	1812      	adds	r2, r2, r0
	if(i>=0x10000) i=0xffff, v->o1egstate=1;
 8010360:	428a      	cmp	r2, r1
 8010362:	dd07      	ble.n	8010374 <SYNTH_ReloadSampleBuffer+0x174>
 8010364:	2201      	movs	r2, #1
 8010366:	821a      	strh	r2, [r3, #16]
 8010368:	460a      	mov	r2, r1
 801036a:	e003      	b.n	8010374 <SYNTH_ReloadSampleBuffer+0x174>
      } else { // decay
	i-=p->o1egd;
 801036c:	8869      	ldrh	r1, [r5, #2]
 801036e:	1a52      	subs	r2, r2, r1
 8010370:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if(i<0) i=0;
      }
      v->o1eglogout=i;
 8010374:	825a      	strh	r2, [r3, #18]
      if(i==0) v->o1egout=0;
 8010376:	b192      	cbz	r2, 801039e <SYNTH_ReloadSampleBuffer+0x19e>
      else v->o1egout=(((exptab0[(i&0xfc0)>>6]*exptab1[i&0x3f])>>(31-(i>>12)))*p->o1vol)>>16; // compute linear output
 8010378:	f3c2 1485 	ubfx	r4, r2, #6, #6
 801037c:	481b      	ldr	r0, [pc, #108]	; (80103ec <SYNTH_ReloadSampleBuffer+0x1ec>)
 801037e:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
 8010382:	481b      	ldr	r0, [pc, #108]	; (80103f0 <SYNTH_ReloadSampleBuffer+0x1f0>)
 8010384:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 8010388:	1312      	asrs	r2, r2, #12
 801038a:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 801038e:	4341      	muls	r1, r0
 8010390:	f1c2 001f 	rsb	r0, r2, #31
 8010394:	fa41 f200 	asr.w	r2, r1, r0
 8010398:	88a9      	ldrh	r1, [r5, #4]
 801039a:	434a      	muls	r2, r1
 801039c:	1412      	asrs	r2, r2, #16
 801039e:	851a      	strh	r2, [r3, #40]	; 0x28
 80103a0:	e015      	b.n	80103ce <SYNTH_ReloadSampleBuffer+0x1ce>
    } else { // recalculate filter coefficient
      int k=((p->cut*p->cut)>>8)+((v->egv[1].logout*((p->fega*v->vel)>>6))>>15);
 80103a2:	7aa8      	ldrb	r0, [r5, #10]
 80103a4:	78da      	ldrb	r2, [r3, #3]
 80103a6:	8c1b      	ldrh	r3, [r3, #32]
 80103a8:	fb10 f100 	smulbb	r1, r0, r0
 80103ac:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80103b0:	4342      	muls	r2, r0
 80103b2:	1192      	asrs	r2, r2, #6
 80103b4:	435a      	muls	r2, r3
 80103b6:	13d3      	asrs	r3, r2, #15
      if(k<0) k=0;
 80103b8:	eb13 2211 	adds.w	r2, r3, r1, lsr #8
 80103bc:	d403      	bmi.n	80103c6 <SYNTH_ReloadSampleBuffer+0x1c6>
      if(k>255) k=255;
 80103be:	2aff      	cmp	r2, #255	; 0xff
 80103c0:	bfa8      	it	ge
 80103c2:	22ff      	movge	r2, #255	; 0xff
 80103c4:	e000      	b.n	80103c8 <SYNTH_ReloadSampleBuffer+0x1c8>
      v->o1eglogout=i;
      if(i==0) v->o1egout=0;
      else v->o1egout=(((exptab0[(i&0xfc0)>>6]*exptab1[i&0x3f])>>(31-(i>>12)))*p->o1vol)>>16; // compute linear output
    } else { // recalculate filter coefficient
      int k=((p->cut*p->cut)>>8)+((v->egv[1].logout*((p->fega*v->vel)>>6))>>15);
      if(k<0) k=0;
 80103c6:	2200      	movs	r2, #0
      if(k>255) k=255;
      v->fk=k;
 80103c8:	9900      	ldr	r1, [sp, #0]
 80103ca:	4805      	ldr	r0, [pc, #20]	; (80103e0 <SYNTH_ReloadSampleBuffer+0x1e0>)
 80103cc:	540a      	strb	r2, [r1, r0]
  n=h&7; // determine A/D batch
  knob[n   ]=(short)ADC_DR0; // read three conversion results, one from each bank of 8 controls
  knob[n+ 8]=(short)ADC_DR1;
  knob[n+16]=(short)ADC_DR2;
#endif
}
 80103ce:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d2:	bf00      	nop
 80103d4:	20000060 	.word	0x20000060
 80103d8:	20000fa4 	.word	0x20000fa4
 80103dc:	20000080 	.word	0x20000080
 80103e0:	200008c4 	.word	0x200008c4
 80103e4:	200006e4 	.word	0x200006e4
 80103e8:	20000fc4 	.word	0x20000fc4
 80103ec:	0801b2c4 	.word	0x0801b2c4
 80103f0:	0801b344 	.word	0x0801b344

080103f4 <SYNTH_Init>:

/////////////////////////////////////////////////////////////////////////////
// initializes the synth
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_Init(u32 mode)
{
 80103f4:	b508      	push	{r3, lr}
  // use J10A.D0 for performance measurements
  MIOS32_BOARD_J10_PinInit(0, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 80103f6:	2105      	movs	r1, #5
 80103f8:	2000      	movs	r0, #0
 80103fa:	f002 ff48 	bl	801328e <MIOS32_BOARD_J10_PinInit>

  // start I2S DMA transfers
  return MIOS32_I2S_Start((u32 *)&sample_buffer[0], SAMPLE_BUFFER_SIZE, &SYNTH_ReloadSampleBuffer);
 80103fe:	4803      	ldr	r0, [pc, #12]	; (801040c <SYNTH_Init+0x18>)
 8010400:	4a03      	ldr	r2, [pc, #12]	; (8010410 <SYNTH_Init+0x1c>)
 8010402:	2108      	movs	r1, #8
}
 8010404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  // use J10A.D0 for performance measurements
  MIOS32_BOARD_J10_PinInit(0, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);

  // start I2S DMA transfers
  return MIOS32_I2S_Start((u32 *)&sample_buffer[0], SAMPLE_BUFFER_SIZE, &SYNTH_ReloadSampleBuffer);
 8010408:	f002 bec8 	b.w	801319c <MIOS32_I2S_Start>
 801040c:	20000060 	.word	0x20000060
 8010410:	08010201 	.word	0x08010201

08010414 <stopv>:


/////////////////////////////////////////////////////////////////////////////
// silence one voice
/////////////////////////////////////////////////////////////////////////////
void stopv(struct voicedata*v) {
 8010414:	b510      	push	{r4, lr}
 8010416:	4604      	mov	r4, r0
  MIOS32_IRQ_Disable();
 8010418:	f002 fa92 	bl	8012940 <MIOS32_IRQ_Disable>

  v->egv[0].state=0; // stop aeg processing for voice
 801041c:	2300      	movs	r3, #0
  v->egv[0].out=0;   // silence voice
  v->egv[1].state=0; // stop feg processing for voice
  v->egv[1].logout=0;
  v->egv[1].out=0;
  v->eg0trip=0;
  v->o1egstate=1;
 801041e:	2101      	movs	r1, #1
  v->o1egout=0;
  v->o1vol=0;
  v->o1o=0;
  v->o1fb=0;
  v->fk=0;
  v->chan=NCHAN-1;
 8010420:	200f      	movs	r0, #15
// silence one voice
/////////////////////////////////////////////////////////////////////////////
void stopv(struct voicedata*v) {
  MIOS32_IRQ_Disable();

  v->egv[0].state=0; // stop aeg processing for voice
 8010422:	8323      	strh	r3, [r4, #24]
  v->egv[0].logout=0;
 8010424:	8363      	strh	r3, [r4, #26]
  v->egv[0].out=0;   // silence voice
 8010426:	83a3      	strh	r3, [r4, #28]
  v->egv[1].state=0; // stop feg processing for voice
 8010428:	83e3      	strh	r3, [r4, #30]
  v->egv[1].logout=0;
 801042a:	8423      	strh	r3, [r4, #32]
  v->egv[1].out=0;
 801042c:	8463      	strh	r3, [r4, #34]	; 0x22
  v->eg0trip=0;
 801042e:	82e3      	strh	r3, [r4, #22]
  v->o1egstate=1;
 8010430:	8221      	strh	r1, [r4, #16]
  v->o1eglogout=0;
 8010432:	8263      	strh	r3, [r4, #18]
  v->o1egout=0;
 8010434:	8523      	strh	r3, [r4, #40]	; 0x28
  v->o1vol=0;
 8010436:	8563      	strh	r3, [r4, #42]	; 0x2a
  v->o1o=0;
 8010438:	64e3      	str	r3, [r4, #76]	; 0x4c
  v->o1fb=0;
 801043a:	63e3      	str	r3, [r4, #60]	; 0x3c
  v->fk=0;
 801043c:	7023      	strb	r3, [r4, #0]
  v->chan=NCHAN-1;
 801043e:	70a0      	strb	r0, [r4, #2]
  v->vol=0;
 8010440:	82a3      	strh	r3, [r4, #20]
  v->out=0;
 8010442:	64a3      	str	r3, [r4, #72]	; 0x48
  v->o0ph=0x00000000;
 8010444:	62e3      	str	r3, [r4, #44]	; 0x2c
  v->o0dph=0x00000000;
 8010446:	6363      	str	r3, [r4, #52]	; 0x34
  v->o1dph=0x00000000;
 8010448:	63a3      	str	r3, [r4, #56]	; 0x38
  v->lo=v->ba=0;
 801044a:	6463      	str	r3, [r4, #68]	; 0x44
 801044c:	6423      	str	r3, [r4, #64]	; 0x40

  MIOS32_IRQ_Enable();
}
 801044e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  v->o0ph=0x00000000;
  v->o0dph=0x00000000;
  v->o1dph=0x00000000;
  v->lo=v->ba=0;

  MIOS32_IRQ_Enable();
 8010452:	f002 ba89 	b.w	8012968 <MIOS32_IRQ_Enable>
	...

08010458 <SYNTH_MIDI_NotifyPackage>:

/////////////////////////////////////////////////////////////////////////////
// Handles incoming MIDI data
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8010458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801045c:	f3c1 2803 	ubfx	r8, r1, #8, #4
 8010460:	f3c1 6307 	ubfx	r3, r1, #24, #8
 8010464:	f3c1 4607 	ubfx	r6, r1, #16, #8
  switch( midi_package.type ) {
 8010468:	f001 010f 	and.w	r1, r1, #15
 801046c:	3908      	subs	r1, #8
 801046e:	fa5f f588 	uxtb.w	r5, r8
 8010472:	b2df      	uxtb	r7, r3
 8010474:	2906      	cmp	r1, #6
 8010476:	f200 80a0 	bhi.w	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
 801047a:	e8df f001 	tbb	[pc, r1]
 801047e:	0504      	.short	0x0504
 8010480:	9e9e259e 	.word	0x9e9e259e
 8010484:	55          	.byte	0x55
 8010485:	00          	.byte	0x00
  case NoteOff:
    midi_package.velocity = 0; // set velocity to 0 and fall through
 8010486:	2700      	movs	r7, #0
    int mu=-1;
    int mi=0;
    int i;

    struct voicedata *v;
    for(i=0;i<NPOLY;i++) { // find a voice to use
 8010488:	2200      	movs	r2, #0
 801048a:	4b4d      	ldr	r3, [pc, #308]	; (80105c0 <SYNTH_MIDI_NotifyPackage+0x168>)
  switch( midi_package.type ) {
  case NoteOff:
    midi_package.velocity = 0; // set velocity to 0 and fall through
  case NoteOn: {
    int mu=-1;
    int mi=0;
 801048c:	4610      	mov	r0, r2
{
  switch( midi_package.type ) {
  case NoteOff:
    midi_package.velocity = 0; // set velocity to 0 and fall through
  case NoteOn: {
    int mu=-1;
 801048e:	f04f 3cff 	mov.w	ip, #4294967295
    int i;

    struct voicedata *v;
    for(i=0;i<NPOLY;i++) { // find a voice to use
      v = vcs+i;
      int u=v->egv[0].state;
 8010492:	8b19      	ldrh	r1, [r3, #24]
    int mi=0;
    int i;

    struct voicedata *v;
    for(i=0;i<NPOLY;i++) { // find a voice to use
      v = vcs+i;
 8010494:	461c      	mov	r4, r3
      int u=v->egv[0].state;
      if(u&&v->chan==midi_package.chn&&(v->note&0x7f)==midi_package.note) break; // this channel+note combination already sounding? reuse the voice
 8010496:	b151      	cbz	r1, 80104ae <SYNTH_MIDI_NotifyPackage+0x56>
 8010498:	f993 9002 	ldrsb.w	r9, [r3, #2]
 801049c:	45a9      	cmp	r9, r5
 801049e:	d107      	bne.n	80104b0 <SYNTH_MIDI_NotifyPackage+0x58>
 80104a0:	f893 9001 	ldrb.w	r9, [r3, #1]
 80104a4:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 80104a8:	45b1      	cmp	r9, r6
 80104aa:	d101      	bne.n	80104b0 <SYNTH_MIDI_NotifyPackage+0x58>
 80104ac:	e055      	b.n	801055a <SYNTH_MIDI_NotifyPackage+0x102>
      if(u==0) u=6; // preferentially steal an idle voice
 80104ae:	2106      	movs	r1, #6
      u=(u<<16)-v->egv[0].logout;
 80104b0:	8b5c      	ldrh	r4, [r3, #26]
 80104b2:	0409      	lsls	r1, r1, #16
 80104b4:	1b09      	subs	r1, r1, r4
      if(u>mu) mu=u,mi=i; // find most advanced+quietest voice to steal
 80104b6:	4561      	cmp	r1, ip
 80104b8:	bfc4      	itt	gt
 80104ba:	4610      	movgt	r0, r2
 80104bc:	468c      	movgt	ip, r1
    int mu=-1;
    int mi=0;
    int i;

    struct voicedata *v;
    for(i=0;i<NPOLY;i++) { // find a voice to use
 80104be:	3201      	adds	r2, #1
 80104c0:	3350      	adds	r3, #80	; 0x50
 80104c2:	2a10      	cmp	r2, #16
 80104c4:	d1e5      	bne.n	8010492 <SYNTH_MIDI_NotifyPackage+0x3a>
 80104c6:	e052      	b.n	801056e <SYNTH_MIDI_NotifyPackage+0x116>
    v->out=0;
    MIOS32_IRQ_Enable();
  } break;

  case CC: {
    if(midi_package.cc_number==120||midi_package.cc_number>=123) { // all notes off
 80104c8:	2e78      	cmp	r6, #120	; 0x78
 80104ca:	d001      	beq.n	80104d0 <SYNTH_MIDI_NotifyPackage+0x78>
 80104cc:	2e7a      	cmp	r6, #122	; 0x7a
 80104ce:	d909      	bls.n	80104e4 <SYNTH_MIDI_NotifyPackage+0x8c>
 80104d0:	2400      	movs	r4, #0
      int i;
      for(i=0;i<NPOLY;i++) stopv(vcs+i);
 80104d2:	493b      	ldr	r1, [pc, #236]	; (80105c0 <SYNTH_MIDI_NotifyPackage+0x168>)
 80104d4:	1908      	adds	r0, r1, r4
 80104d6:	3450      	adds	r4, #80	; 0x50
 80104d8:	f7ff ff9c 	bl	8010414 <stopv>
 80104dc:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 80104e0:	d1f7      	bne.n	80104d2 <SYNTH_MIDI_NotifyPackage+0x7a>
 80104e2:	e06a      	b.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
      break;
    }
    if(midi_package.cc_number==64) { // sustain pedal
 80104e4:	2e40      	cmp	r6, #64	; 0x40
 80104e6:	d102      	bne.n	80104ee <SYNTH_MIDI_NotifyPackage+0x96>
      sus[midi_package.chn]=midi_package.value;
 80104e8:	4a36      	ldr	r2, [pc, #216]	; (80105c4 <SYNTH_MIDI_NotifyPackage+0x16c>)
 80104ea:	5553      	strb	r3, [r2, r5]
      break;
 80104ec:	e065      	b.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
    }
    if(midi_package.cc_number>= 16&&midi_package.cc_number< 32) { ctrl[midi_package.chn][midi_package.cc_number-16    ]=midi_package.value; chup[midi_package.chn]=1; } // controller 0..15; set update flag
 80104ee:	f1a6 0010 	sub.w	r0, r6, #16
 80104f2:	280f      	cmp	r0, #15
 80104f4:	d809      	bhi.n	801050a <SYNTH_MIDI_NotifyPackage+0xb2>
 80104f6:	4a34      	ldr	r2, [pc, #208]	; (80105c8 <SYNTH_MIDI_NotifyPackage+0x170>)
 80104f8:	2118      	movs	r1, #24
 80104fa:	fb01 2005 	mla	r0, r1, r5, r2
 80104fe:	4a33      	ldr	r2, [pc, #204]	; (80105cc <SYNTH_MIDI_NotifyPackage+0x174>)
 8010500:	1981      	adds	r1, r0, r6
 8010502:	2001      	movs	r0, #1
 8010504:	5550      	strb	r0, [r2, r5]
 8010506:	f801 3c10 	strb.w	r3, [r1, #-16]
    if(midi_package.cc_number>=102&&midi_package.cc_number<110) { ctrl[midi_package.chn][midi_package.cc_number-102+16]=midi_package.value; chup[midi_package.chn]=1; } // controller 16..23; set update flag
 801050a:	f1a6 0166 	sub.w	r1, r6, #102	; 0x66
 801050e:	2907      	cmp	r1, #7
 8010510:	d853      	bhi.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
 8010512:	4a2d      	ldr	r2, [pc, #180]	; (80105c8 <SYNTH_MIDI_NotifyPackage+0x170>)
 8010514:	2018      	movs	r0, #24
 8010516:	fb00 2105 	mla	r1, r0, r5, r2
 801051a:	198e      	adds	r6, r1, r6
 801051c:	2001      	movs	r0, #1
 801051e:	f806 3c56 	strb.w	r3, [r6, #-86]
 8010522:	4b2a      	ldr	r3, [pc, #168]	; (80105cc <SYNTH_MIDI_NotifyPackage+0x174>)
 8010524:	5558      	strb	r0, [r3, r5]
 8010526:	e048      	b.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
  } break;
  case PitchBend: {
    int i;
    pbend[midi_package.chn]=(midi_package.evnt2<<7)+midi_package.evnt1-0x2000;
 8010528:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 801052c:	4828      	ldr	r0, [pc, #160]	; (80105d0 <SYNTH_MIDI_NotifyPackage+0x178>)
 801052e:	eb06 17c7 	add.w	r7, r6, r7, lsl #7
 8010532:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8010536:	2400      	movs	r4, #0


/////////////////////////////////////////////////////////////////////////////
// Handles incoming MIDI data
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
 8010538:	4a21      	ldr	r2, [pc, #132]	; (80105c0 <SYNTH_MIDI_NotifyPackage+0x168>)
 801053a:	18a0      	adds	r0, r4, r2
    if(midi_package.cc_number>=102&&midi_package.cc_number<110) { ctrl[midi_package.chn][midi_package.cc_number-102+16]=midi_package.value; chup[midi_package.chn]=1; } // controller 16..23; set update flag
  } break;
  case PitchBend: {
    int i;
    pbend[midi_package.chn]=(midi_package.evnt2<<7)+midi_package.evnt1-0x2000;
    for(i=0;i<NPOLY;i++) if(vcs[i].chan==midi_package.chn) setfreqvol(vcs+i,ctrl[midi_package.chn]); // update frequencies for all affected voices
 801053c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8010540:	42ab      	cmp	r3, r5
 8010542:	d105      	bne.n	8010550 <SYNTH_MIDI_NotifyPackage+0xf8>
 8010544:	4a20      	ldr	r2, [pc, #128]	; (80105c8 <SYNTH_MIDI_NotifyPackage+0x170>)
 8010546:	2118      	movs	r1, #24
 8010548:	fb01 2105 	mla	r1, r1, r5, r2
 801054c:	f7ff fd9a 	bl	8010084 <setfreqvol>
 8010550:	3450      	adds	r4, #80	; 0x50
 8010552:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8010556:	d1ef      	bne.n	8010538 <SYNTH_MIDI_NotifyPackage+0xe0>
 8010558:	e02f      	b.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
      u=(u<<16)-v->egv[0].logout;
      if(u>mu) mu=u,mi=i; // find most advanced+quietest voice to steal
    }

    u8 retrig = 0;
    if(midi_package.velocity==0) { // note off
 801055a:	b987      	cbnz	r7, 801057e <SYNTH_MIDI_NotifyPackage+0x126>
      if(i==NPOLY) break; // ignore if note already gone
      vcs[i].note&=0x7f;    // allow exit from attack/sustain
 801055c:	4818      	ldr	r0, [pc, #96]	; (80105c0 <SYNTH_MIDI_NotifyPackage+0x168>)
 801055e:	2150      	movs	r1, #80	; 0x50
 8010560:	fb01 0202 	mla	r2, r1, r2, r0
 8010564:	7853      	ldrb	r3, [r2, #1]
 8010566:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801056a:	7051      	strb	r1, [r2, #1]
      break;
 801056c:	e025      	b.n	80105ba <SYNTH_MIDI_NotifyPackage+0x162>
      u=(u<<16)-v->egv[0].logout;
      if(u>mu) mu=u,mi=i; // find most advanced+quietest voice to steal
    }

    u8 retrig = 0;
    if(midi_package.velocity==0) { // note off
 801056e:	b327      	cbz	r7, 80105ba <SYNTH_MIDI_NotifyPackage+0x162>
	retrig = 1;
      }
    }
    if( !retrig ) {
      // note on, not already sounding:
      v=vcs+mi; // point to voice to be stolen
 8010570:	4b13      	ldr	r3, [pc, #76]	; (80105c0 <SYNTH_MIDI_NotifyPackage+0x168>)
 8010572:	2450      	movs	r4, #80	; 0x50
 8010574:	fb04 3400 	mla	r4, r4, r0, r3
      stopv(v); // silence it
 8010578:	4620      	mov	r0, r4
 801057a:	f7ff ff4b 	bl	8010414 <stopv>
    }

    MIOS32_IRQ_Disable();
    v->note=midi_package.note|0x80;  // set up voice data
 801057e:	f066 067f 	orn	r6, r6, #127	; 0x7f
      // note on, not already sounding:
      v=vcs+mi; // point to voice to be stolen
      stopv(v); // silence it
    }

    MIOS32_IRQ_Disable();
 8010582:	f002 f9dd 	bl	8012940 <MIOS32_IRQ_Disable>
    v->note=midi_package.note|0x80;  // set up voice data
 8010586:	7066      	strb	r6, [r4, #1]
    v->chan=midi_package.chn;
 8010588:	f884 8002 	strb.w	r8, [r4, #2]
    v->vel=midi_package.velocity;
 801058c:	70e7      	strb	r7, [r4, #3]
    MIOS32_IRQ_Enable();
 801058e:	f002 f9eb 	bl	8012968 <MIOS32_IRQ_Enable>
    setfreqvol(v,ctrl[midi_package.chn]);
 8010592:	4a0d      	ldr	r2, [pc, #52]	; (80105c8 <SYNTH_MIDI_NotifyPackage+0x170>)
 8010594:	2118      	movs	r1, #24
 8010596:	4620      	mov	r0, r4
 8010598:	fb01 2105 	mla	r1, r1, r5, r2
 801059c:	f7ff fd72 	bl	8010084 <setfreqvol>
    MIOS32_IRQ_Disable();
 80105a0:	f002 f9ce 	bl	8012940 <MIOS32_IRQ_Disable>
    v->egv[0].state=1; // trigger note
    v->egv[1].state=1;
    v->eg0trip=0;
 80105a4:	2300      	movs	r3, #0
    v->chan=midi_package.chn;
    v->vel=midi_package.velocity;
    MIOS32_IRQ_Enable();
    setfreqvol(v,ctrl[midi_package.chn]);
    MIOS32_IRQ_Disable();
    v->egv[0].state=1; // trigger note
 80105a6:	2001      	movs	r0, #1
 80105a8:	8320      	strh	r0, [r4, #24]
    v->egv[1].state=1;
 80105aa:	83e0      	strh	r0, [r4, #30]
    v->eg0trip=0;
 80105ac:	82e3      	strh	r3, [r4, #22]
    v->o1egstate=0;
 80105ae:	8223      	strh	r3, [r4, #16]
    v->o1eglogout=0;
 80105b0:	8263      	strh	r3, [r4, #18]
    v->o1egout=0;
 80105b2:	8523      	strh	r3, [r4, #40]	; 0x28
    v->out=0;
 80105b4:	64a3      	str	r3, [r4, #72]	; 0x48
    MIOS32_IRQ_Enable();
 80105b6:	f002 f9d7 	bl	8012968 <MIOS32_IRQ_Enable>
    for(i=0;i<NPOLY;i++) if(vcs[i].chan==midi_package.chn) setfreqvol(vcs+i,ctrl[midi_package.chn]); // update frequencies for all affected voices
  } break;
  }

  return 0; // no error
}
 80105ba:	2000      	movs	r0, #0
 80105bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c0:	200008c4 	.word	0x200008c4
 80105c4:	20000fc4 	.word	0x20000fc4
 80105c8:	20000dc4 	.word	0x20000dc4
 80105cc:	20000f44 	.word	0x20000f44
 80105d0:	20000f54 	.word	0x20000f54

080105d4 <SYNTH_Update_1mS>:

/////////////////////////////////////////////////////////////////////////////
// Called periodically to update channel controllers
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_Update_1mS(void)
{
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	4c5c      	ldr	r4, [pc, #368]	; (8010748 <SYNTH_Update_1mS+0x174>)
  int i;

  for(i=0; i<NCHAN; ++i) {
 80105d8:	2600      	movs	r6, #0
    if( chup[i] ) {
 80105da:	4b5c      	ldr	r3, [pc, #368]	; (801074c <SYNTH_Update_1mS+0x178>)
 80105dc:	5cf2      	ldrb	r2, [r6, r3]
 80105de:	b92a      	cbnz	r2, 80105ec <SYNTH_Update_1mS+0x18>
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_Update_1mS(void)
{
  int i;

  for(i=0; i<NCHAN; ++i) {
 80105e0:	3601      	adds	r6, #1
 80105e2:	341e      	adds	r4, #30
 80105e4:	2e10      	cmp	r6, #16
 80105e6:	d1f8      	bne.n	80105da <SYNTH_Update_1mS+0x6>
      procctrl(i);  // update next channel
    }
  }

  return 0; // no error
}
 80105e8:	2000      	movs	r0, #0
 80105ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/////////////////////////////////////////////////////////////////////////////
// process all controllers for given channel
/////////////////////////////////////////////////////////////////////////////
static void procctrl(int chan) {
  struct patchdata*pa=patch+chan;
  unsigned char*ct=ctrl[chan];
 80105ec:	4958      	ldr	r1, [pc, #352]	; (8010750 <SYNTH_Update_1mS+0x17c>)
 80105ee:	2518      	movs	r5, #24
 80105f0:	fb05 1506 	mla	r5, r5, r6, r1
{
  int i;

  for(i=0; i<NCHAN; ++i) {
    if( chup[i] ) {
      chup[i]=0;    // reset update flag
 80105f4:	2000      	movs	r0, #0
static void procctrl(int chan) {
  struct patchdata*pa=patch+chan;
  unsigned char*ct=ctrl[chan];
  int i;

  i=ct[6];
 80105f6:	79a9      	ldrb	r1, [r5, #6]
{
  int i;

  for(i=0; i<NCHAN; ++i) {
    if( chup[i] ) {
      chup[i]=0;    // reset update flag
 80105f8:	54f0      	strb	r0, [r6, r3]
  struct patchdata*pa=patch+chan;
  unsigned char*ct=ctrl[chan];
  int i;

  i=ct[6];
  if(i) i=(exptab0[(i&0xf)<<2])>>(7-(i>>4)); // convert oscillator 1 level to linear
 80105fa:	b149      	cbz	r1, 8010610 <SYNTH_Update_1mS+0x3c>
 80105fc:	f001 030f 	and.w	r3, r1, #15
 8010600:	4854      	ldr	r0, [pc, #336]	; (8010754 <SYNTH_Update_1mS+0x180>)
 8010602:	110f      	asrs	r7, r1, #4
 8010604:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 8010608:	f1c7 0207 	rsb	r2, r7, #7
 801060c:	fa41 f102 	asr.w	r1, r1, r2
  pa->o1vol=i;

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
 8010610:	792f      	ldrb	r7, [r5, #4]
  unsigned char*ct=ctrl[chan];
  int i;

  i=ct[6];
  if(i) i=(exptab0[(i&0xf)<<2])>>(7-(i>>4)); // convert oscillator 1 level to linear
  pa->o1vol=i;
 8010612:	80a1      	strh	r1, [r4, #4]

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
 8010614:	fb17 f207 	smulbb	r2, r7, r7
 8010618:	1113      	asrs	r3, r2, #4
  if(ct[5]==127) pa->o1egd=0;
 801061a:	796a      	ldrb	r2, [r5, #5]

  i=ct[6];
  if(i) i=(exptab0[(i&0xf)<<2])>>(7-(i>>4)); // convert oscillator 1 level to linear
  pa->o1vol=i;

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
 801061c:	1c58      	adds	r0, r3, #1
 801061e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010622:	fb91 f7f0 	sdiv	r7, r1, r0
  if(ct[5]==127) pa->o1egd=0;
 8010626:	2a7f      	cmp	r2, #127	; 0x7f

  i=ct[6];
  if(i) i=(exptab0[(i&0xf)<<2])>>(7-(i>>4)); // convert oscillator 1 level to linear
  pa->o1vol=i;

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
 8010628:	8027      	strh	r7, [r4, #0]
  if(ct[5]==127) pa->o1egd=0;
 801062a:	d102      	bne.n	8010632 <SYNTH_Update_1mS+0x5e>
 801062c:	2700      	movs	r7, #0
 801062e:	8067      	strh	r7, [r4, #2]
 8010630:	e005      	b.n	801063e <SYNTH_Update_1mS+0x6a>
  else           pa->o1egd=0xffff/(ct[5]*ct[5]+1);
 8010632:	fb12 f302 	smulbb	r3, r2, r2
 8010636:	1c58      	adds	r0, r3, #1
 8010638:	fb91 f1f0 	sdiv	r1, r1, r0
 801063c:	8061      	strh	r1, [r4, #2]

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
 801063e:	7b2a      	ldrb	r2, [r5, #12]
 8010640:	fb12 f302 	smulbb	r3, r2, r2
 8010644:	1118      	asrs	r0, r3, #4
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
 8010646:	7b6b      	ldrb	r3, [r5, #13]

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
  if(ct[5]==127) pa->o1egd=0;
  else           pa->o1egd=0xffff/(ct[5]*ct[5]+1);

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
 8010648:	1c41      	adds	r1, r0, #1
 801064a:	f64f 77ff 	movw	r7, #65535	; 0xffff
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
 801064e:	fb13 f003 	smulbb	r0, r3, r3

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
  if(ct[5]==127) pa->o1egd=0;
  else           pa->o1egd=0xffff/(ct[5]*ct[5]+1);

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
 8010652:	fb97 f2f1 	sdiv	r2, r7, r1
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
 8010656:	1c41      	adds	r1, r0, #1
  if(ct[14]==0) pa->egp[0].s=0;
 8010658:	7ba8      	ldrb	r0, [r5, #14]

  pa->o1ega=0xffff/(ct[4]*ct[4]/16+1);  // scale oscillator 1 eg parameters
  if(ct[5]==127) pa->o1egd=0;
  else           pa->o1egd=0xffff/(ct[5]*ct[5]+1);

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
 801065a:	81e2      	strh	r2, [r4, #14]
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
 801065c:	fb97 f2f1 	sdiv	r2, r7, r1
 8010660:	8222      	strh	r2, [r4, #16]
  if(ct[14]==0) pa->egp[0].s=0;
 8010662:	b110      	cbz	r0, 801066a <SYNTH_Update_1mS+0x96>
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
 8010664:	01c3      	lsls	r3, r0, #7
 8010666:	f5a3 4080 	sub.w	r0, r3, #16384	; 0x4000
 801066a:	8260      	strh	r0, [r4, #18]
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);
 801066c:	7be9      	ldrb	r1, [r5, #15]
 801066e:	fb11 f201 	smulbb	r2, r1, r1

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 8010672:	7a29      	ldrb	r1, [r5, #8]

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
  if(ct[14]==0) pa->egp[0].s=0;
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);
 8010674:	1c53      	adds	r3, r2, #1

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 8010676:	fb11 f201 	smulbb	r2, r1, r1

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
  if(ct[14]==0) pa->egp[0].s=0;
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);
 801067a:	fb97 f0f3 	sdiv	r0, r7, r3

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 801067e:	1113      	asrs	r3, r2, #4
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
 8010680:	7a6a      	ldrb	r2, [r5, #9]

  pa->egp[0].a=0xffff/(ct[12]*ct[12]/16+1);  // scale amplitude eg parameters
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
  if(ct[14]==0) pa->egp[0].s=0;
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);
 8010682:	82a0      	strh	r0, [r4, #20]

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 8010684:	1c58      	adds	r0, r3, #1
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
 8010686:	fb12 f302 	smulbb	r3, r2, r2
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
  if(ct[14]==0) pa->egp[0].s=0;
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 801068a:	fb97 f1f0 	sdiv	r1, r7, r0
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
 801068e:	1c58      	adds	r0, r3, #1
 8010690:	fb97 f7f0 	sdiv	r7, r7, r0
 8010694:	8327      	strh	r7, [r4, #24]
  i=ct[10]; // sustain level
 8010696:	7aaf      	ldrb	r7, [r5, #10]
  pa->egp[0].d=0xffff/(ct[13]*ct[13]+1);
  if(ct[14]==0) pa->egp[0].s=0;
  else          pa->egp[0].s=0xc000+(ct[14]<<7);
  pa->egp[0].r=0xffff/(ct[15]*ct[15]+1);

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
 8010698:	82e1      	strh	r1, [r4, #22]
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
  i=ct[10]; // sustain level
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
 801069a:	b14f      	cbz	r7, 80106b0 <SYNTH_Update_1mS+0xdc>
 801069c:	f007 030f 	and.w	r3, r7, #15
 80106a0:	482c      	ldr	r0, [pc, #176]	; (8010754 <SYNTH_Update_1mS+0x180>)
 80106a2:	1139      	asrs	r1, r7, #4
 80106a4:	f830 7033 	ldrh.w	r7, [r0, r3, lsl #3]
 80106a8:	f1c1 0207 	rsb	r2, r1, #7
 80106ac:	fa47 f702 	asr.w	r7, r7, r2
  pa->egp[1].s=i;
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);
 80106b0:	7ae9      	ldrb	r1, [r5, #11]

  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
  i=ct[10]; // sustain level
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
  pa->egp[1].s=i;
 80106b2:	8367      	strh	r7, [r4, #26]
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);
 80106b4:	fb11 f201 	smulbb	r2, r1, r1

  pa->cut=ct[20]<<1;   // scale filter control parameters
 80106b8:	7d29      	ldrb	r1, [r5, #20]
  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
  i=ct[10]; // sustain level
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
  pa->egp[1].s=i;
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);
 80106ba:	1c53      	adds	r3, r2, #1
 80106bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80106c0:	fb90 f7f3 	sdiv	r7, r0, r3

  pa->cut=ct[20]<<1;   // scale filter control parameters
 80106c4:	004a      	lsls	r2, r1, #1
  pa->fega=(ct[19]<<1)-128;
 80106c6:	7ceb      	ldrb	r3, [r5, #19]
  pa->egp[1].a=0xffff/(ct[8]*ct[8]/16+1);  // scale filter eg parameters
  pa->egp[1].d=0xffff/(ct[9]*ct[9]+1);
  i=ct[10]; // sustain level
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
  pa->egp[1].s=i;
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);
 80106c8:	83a7      	strh	r7, [r4, #28]

  pa->cut=ct[20]<<1;   // scale filter control parameters
 80106ca:	72a2      	strb	r2, [r4, #10]
  pa->fega=(ct[19]<<1)-128;
  pa->res=0xff-(ct[21]<<1);
 80106cc:	7d6f      	ldrb	r7, [r5, #21]

  if(ct[18]<0x20) pa->omode=0;  // oscillator combine mode
 80106ce:	7caa      	ldrb	r2, [r5, #18]
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
  pa->egp[1].s=i;
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);

  pa->cut=ct[20]<<1;   // scale filter control parameters
  pa->fega=(ct[19]<<1)-128;
 80106d0:	0058      	lsls	r0, r3, #1
 80106d2:	3880      	subs	r0, #128	; 0x80
  pa->res=0xff-(ct[21]<<1);
 80106d4:	ea6f 0147 	mvn.w	r1, r7, lsl #1

  if(ct[18]<0x20) pa->omode=0;  // oscillator combine mode
 80106d8:	2a1f      	cmp	r2, #31
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4));
  pa->egp[1].s=i;
  pa->egp[1].r=0xffff/(ct[11]*ct[11]+1);

  pa->cut=ct[20]<<1;   // scale filter control parameters
  pa->fega=(ct[19]<<1)-128;
 80106da:	72e0      	strb	r0, [r4, #11]
  pa->res=0xff-(ct[21]<<1);
 80106dc:	7321      	strb	r1, [r4, #12]

  if(ct[18]<0x20) pa->omode=0;  // oscillator combine mode
 80106de:	d801      	bhi.n	80106e4 <SYNTH_Update_1mS+0x110>
 80106e0:	2300      	movs	r3, #0
 80106e2:	e004      	b.n	80106ee <SYNTH_Update_1mS+0x11a>
  else if(ct[18]>0x60) pa->omode=2;
 80106e4:	2a60      	cmp	r2, #96	; 0x60
 80106e6:	d901      	bls.n	80106ec <SYNTH_Update_1mS+0x118>
 80106e8:	2302      	movs	r3, #2
 80106ea:	e000      	b.n	80106ee <SYNTH_Update_1mS+0x11a>
  else pa->omode=1;
 80106ec:	2301      	movs	r3, #1
 80106ee:	7363      	strb	r3, [r4, #13]

  i=ct[22]; // volume
 80106f0:	7dab      	ldrb	r3, [r5, #22]
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
 80106f2:	b14b      	cbz	r3, 8010708 <SYNTH_Update_1mS+0x134>
 80106f4:	f003 020f 	and.w	r2, r3, #15
 80106f8:	4916      	ldr	r1, [pc, #88]	; (8010754 <SYNTH_Update_1mS+0x180>)
 80106fa:	1118      	asrs	r0, r3, #4
 80106fc:	f831 3032 	ldrh.w	r3, [r1, r2, lsl #3]
 8010700:	f1c0 0707 	rsb	r7, r0, #7
 8010704:	fa43 f307 	asr.w	r3, r3, r7
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
 8010708:	7de8      	ldrb	r0, [r5, #23]
 801070a:	4a13      	ldr	r2, [pc, #76]	; (8010758 <SYNTH_Update_1mS+0x184>)
 801070c:	f020 0701 	bic.w	r7, r0, #1
 8010710:	f1c7 01fe 	rsb	r1, r7, #254	; 0xfe
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
 8010714:	3780      	adds	r7, #128	; 0x80
  else if(ct[18]>0x60) pa->omode=2;
  else pa->omode=1;

  i=ct[22]; // volume
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
 8010716:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
 801071a:	f932 7017 	ldrsh.w	r7, [r2, r7, lsl #1]
  else if(ct[18]>0x60) pa->omode=2;
  else pa->omode=1;

  i=ct[22]; // volume
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
 801071e:	4358      	muls	r0, r3
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
 8010720:	437b      	muls	r3, r7
  else if(ct[18]>0x60) pa->omode=2;
  else pa->omode=1;

  i=ct[22]; // volume
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
 8010722:	13c1      	asrs	r1, r0, #15
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
 8010724:	13db      	asrs	r3, r3, #15
  else if(ct[18]>0x60) pa->omode=2;
  else pa->omode=1;

  i=ct[22]; // volume
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
 8010726:	80e1      	strh	r1, [r4, #6]
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
 8010728:	8123      	strh	r3, [r4, #8]
 801072a:	2700      	movs	r7, #0
}

/////////////////////////////////////////////////////////////////////////////
// Called periodically to update channel controllers
/////////////////////////////////////////////////////////////////////////////
s32 SYNTH_Update_1mS(void)
 801072c:	4a0b      	ldr	r2, [pc, #44]	; (801075c <SYNTH_Update_1mS+0x188>)
 801072e:	18b8      	adds	r0, r7, r2

  i=ct[22]; // volume
  if(i) i=exptab0[(i&0xf)<<2]>>(7-(i>>4)); // convert to linear
  pa->lvol=(sintab[254-(ct[23]&~1)]*i)>>15; // apply pan settings maintining constant total power
  pa->rvol=(sintab[128+(ct[23]&~1)]*i)>>15;
  for(i=0;i<NPOLY;i++) if(vcs[i].chan==chan) setfreqvol(vcs+i,ct); // update any affected voices
 8010730:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8010734:	42b1      	cmp	r1, r6
 8010736:	d102      	bne.n	801073e <SYNTH_Update_1mS+0x16a>
 8010738:	4629      	mov	r1, r5
 801073a:	f7ff fca3 	bl	8010084 <setfreqvol>
 801073e:	3750      	adds	r7, #80	; 0x50
 8010740:	f5b7 6fa0 	cmp.w	r7, #1280	; 0x500
 8010744:	d1f2      	bne.n	801072c <SYNTH_Update_1mS+0x158>
 8010746:	e74b      	b.n	80105e0 <SYNTH_Update_1mS+0xc>
 8010748:	200006e4 	.word	0x200006e4
 801074c:	20000f44 	.word	0x20000f44
 8010750:	20000dc4 	.word	0x20000dc4
 8010754:	0801b2c4 	.word	0x0801b2c4
 8010758:	0801b3c4 	.word	0x0801b3c4
 801075c:	200008c4 	.word	0x200008c4

08010760 <TASK_Hooks>:

/////////////////////////////////////////////////////////////////////////////
// Remaining application hooks
/////////////////////////////////////////////////////////////////////////////
static void TASK_Hooks(void *pvParameters)
{
 8010760:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010762:	f000 faef 	bl	8010d44 <xTaskGetTickCount>
 8010766:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010768:	2101      	movs	r1, #1
 801076a:	a801      	add	r0, sp, #4
 801076c:	f000 fc16 	bl	8010f9c <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 8010770:	f000 fae8 	bl	8010d44 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 8010774:	9b01      	ldr	r3, [sp, #4]
 8010776:	1f42      	subs	r2, r0, #5
 8010778:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 801077a:	bf38      	it	cc
 801077c:	9001      	strcc	r0, [sp, #4]
# endif
#endif

#if !defined(MIOS32_DONT_USE_AIN) && !defined(MIOS32_DONT_SERVICE_AIN)
    // check for AIN pin changes, call APP_AIN_NotifyChange on each pin change
    MIOS32_AIN_Handler(APP_AIN_NotifyChange);
 801077e:	4804      	ldr	r0, [pc, #16]	; (8010790 <TASK_Hooks+0x30>)
 8010780:	f002 fe0d 	bl	801339e <MIOS32_AIN_Handler>
#endif

#if !defined(MIOS32_DONT_USE_COM)
    // check for incoming COM messages
    MIOS32_COM_Receive_Handler();
 8010784:	f001 fd4a 	bl	801221c <MIOS32_COM_Receive_Handler>
#endif

    // optional APP_Tick() hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_Tick();
 8010788:	f7ff fc48 	bl	801001c <APP_Tick>
  }
 801078c:	e7ec      	b.n	8010768 <TASK_Hooks+0x8>
 801078e:	bf00      	nop
 8010790:	08010081 	.word	0x08010081

08010794 <TASK_MIDI_Hooks>:
// MIDI task (separated from TASK_Hooks() to ensure parallel handling of
// MIDI events if a hook in TASK_Hooks() blocks)
/////////////////////////////////////////////////////////////////////////////
#if !defined(MIOS32_DONT_USE_MIDI)
static void TASK_MIDI_Hooks(void *pvParameters)
{
 8010794:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010796:	f000 fad5 	bl	8010d44 <xTaskGetTickCount>
 801079a:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 801079c:	2101      	movs	r1, #1
 801079e:	a801      	add	r0, sp, #4
 80107a0:	f000 fbfc 	bl	8010f9c <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 80107a4:	f000 face 	bl	8010d44 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 80107a8:	9b01      	ldr	r3, [sp, #4]
 80107aa:	1f42      	subs	r2, r0, #5
 80107ac:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 80107ae:	bf38      	it	cc
 80107b0:	9001      	strcc	r0, [sp, #4]

    // handle timeout/expire counters and USB packages
    MIOS32_MIDI_Periodic_mS();
 80107b2:	f001 f9af 	bl	8011b14 <MIOS32_MIDI_Periodic_mS>

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 80107b6:	4803      	ldr	r0, [pc, #12]	; (80107c4 <TASK_MIDI_Hooks+0x30>)
 80107b8:	f001 fc5e 	bl	8012078 <MIOS32_MIDI_Receive_Handler>

    // optional application specific hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_MIDI_Tick();
 80107bc:	f7ff fc49 	bl	8010052 <APP_MIDI_Tick>
  }
 80107c0:	e7ec      	b.n	801079c <TASK_MIDI_Hooks+0x8>
 80107c2:	bf00      	nop
 80107c4:	08010055 	.word	0x08010055

080107c8 <main>:

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 80107c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 80107ca:	2000      	movs	r0, #0
 80107cc:	f002 f820 	bl	8012810 <MIOS32_SYS_Init>
#endif
#ifndef MIOS32_DONT_USE_DELAY
  MIOS32_DELAY_Init(0);
 80107d0:	2000      	movs	r0, #0
 80107d2:	f002 fdb3 	bl	801333c <MIOS32_DELAY_Init>
#endif
#ifndef MIOS32_DONT_USE_TIMESTAMP
  MIOS32_TIMESTAMP_Init(0);
 80107d6:	2000      	movs	r0, #0
 80107d8:	f001 ff42 	bl	8012660 <MIOS32_TIMESTAMP_Init>
#endif
#ifndef MIOS32_DONT_USE_BOARD
  MIOS32_BOARD_Init(0);
 80107dc:	2000      	movs	r0, #0
 80107de:	f002 fd1b 	bl	8013218 <MIOS32_BOARD_Init>
#endif
#ifndef MIOS32_DONT_USE_SPI
  MIOS32_SPI_Init(0);
 80107e2:	2000      	movs	r0, #0
 80107e4:	f002 fad6 	bl	8012d94 <MIOS32_SPI_Init>
#endif
#if !defined(MIOS32_DONT_USE_ENC) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_ENC_Init(0);
#endif
#if !defined(MIOS32_DONT_USE_MF)
  MIOS32_MF_Init(0);
 80107e8:	2000      	movs	r0, #0
 80107ea:	f001 ff35 	bl	8012658 <MIOS32_MF_Init>
#endif
#if !defined(MIOS32_DONT_USE_AIN)
  MIOS32_AIN_Init(0);
 80107ee:	2000      	movs	r0, #0
 80107f0:	f002 fdd2 	bl	8013398 <MIOS32_AIN_Init>
#endif
#ifndef MIOS32_DONT_USE_IIC_BS
  MIOS32_IIC_BS_Init(0);
 80107f4:	2000      	movs	r0, #0
 80107f6:	f001 ff2c 	bl	8012652 <MIOS32_IIC_BS_Init>
#endif
#ifndef MIOS32_DONT_USE_MIDI
  MIOS32_MIDI_Init(0);
 80107fa:	2000      	movs	r0, #0
 80107fc:	f000 ff5a 	bl	80116b4 <MIOS32_MIDI_Init>
#endif
#ifndef MIOS32_DONT_USE_USB
  MIOS32_USB_Init(0);
 8010800:	2000      	movs	r0, #0
 8010802:	f002 ff6b 	bl	80136dc <MIOS32_USB_Init>
#endif
#ifndef MIOS32_DONT_USE_OSC
  MIOS32_OSC_Init(0);
 8010806:	2000      	movs	r0, #0
 8010808:	f001 fcd0 	bl	80121ac <MIOS32_OSC_Init>
#endif
#ifndef MIOS32_DONT_USE_COM
  MIOS32_COM_Init(0);
 801080c:	2000      	movs	r0, #0
 801080e:	f001 fcd3 	bl	80121b8 <MIOS32_COM_Init>
#endif
#ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_Init(0);
 8010812:	2000      	movs	r0, #0
 8010814:	f000 feb2 	bl	801157c <MIOS32_LCD_Init>
  APP_LCD_Init(0);
  MIOS32_LCD_DeviceSet(0);
# endif
#endif
#ifdef MIOS32_USE_I2S
  MIOS32_I2S_Init(0);
 8010818:	2000      	movs	r0, #0
 801081a:	f002 fc17 	bl	801304c <MIOS32_I2S_Init>
#endif

  // call C++ constructors
  __libc_init_array();
 801081e:	f00a fd0b 	bl	801b238 <__libc_init_array>

  // initialize application
  APP_Init();
 8010822:	f7ff fbed 	bl	8010000 <APP_Init>

#if MIOS32_LCD_BOOT_MSG_DELAY
  // print boot message
# ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_PrintBootMessage();
 8010826:	f000 ff11 	bl	801164c <MIOS32_LCD_PrintBootMessage>
 801082a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
    MIOS32_DELAY_Wait_uS(1000);
 801082e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010832:	f002 fda5 	bl	8013380 <MIOS32_DELAY_Wait_uS>
# endif

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
 8010836:	3c01      	subs	r4, #1
 8010838:	d1f9      	bne.n	801082e <main+0x66>
    MIOS32_DELAY_Wait_uS(1000);
# endif
#endif

  // start the task which calls the application hooks
  xTaskCreate(TASK_Hooks, "Hooks", (MIOS32_TASK_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 801083a:	2503      	movs	r5, #3
 801083c:	4623      	mov	r3, r4
 801083e:	9500      	str	r5, [sp, #0]
 8010840:	9401      	str	r4, [sp, #4]
 8010842:	4909      	ldr	r1, [pc, #36]	; (8010868 <main+0xa0>)
 8010844:	4809      	ldr	r0, [pc, #36]	; (801086c <main+0xa4>)
 8010846:	f44f 7280 	mov.w	r2, #256	; 0x100
 801084a:	f000 f96b 	bl	8010b24 <xTaskCreate>
#if !defined(MIOS32_DONT_USE_MIDI)
  xTaskCreate(TASK_MIDI_Hooks, "MIDI_Hooks", (MIOS32_TASK_MIDI_HOOKS_STACK_SIZE)/4, NULL, PRIORITY_TASK_HOOKS, NULL);
 801084e:	4908      	ldr	r1, [pc, #32]	; (8010870 <main+0xa8>)
 8010850:	9500      	str	r5, [sp, #0]
 8010852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010856:	4623      	mov	r3, r4
 8010858:	9401      	str	r4, [sp, #4]
 801085a:	4806      	ldr	r0, [pc, #24]	; (8010874 <main+0xac>)
 801085c:	f000 f962 	bl	8010b24 <xTaskCreate>
#endif

  // start the scheduler
  vTaskStartScheduler();
 8010860:	f000 fa36 	bl	8010cd0 <vTaskStartScheduler>

  // Will only get here if there was not enough heap space to create the idle task
  return 0;
}
 8010864:	4620      	mov	r0, r4
 8010866:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010868:	0801b5c9 	.word	0x0801b5c9
 801086c:	08010761 	.word	0x08010761
 8010870:	0801b5c4 	.word	0x0801b5c4
 8010874:	08010795 	.word	0x08010795

08010878 <vApplicationTickHook>:
}

void vApplicationTickHook(void)
{
#if !defined(MIOS32_DONT_USE_TIMESTAMP)
  MIOS32_TIMESTAMP_Inc();
 8010878:	f001 befc 	b.w	8012674 <MIOS32_TIMESTAMP_Inc>

0801087c <vApplicationIdleHook>:
/////////////////////////////////////////////////////////////////////////////
// Idle Hook (called by FreeRTOS when nothing else to do)
/////////////////////////////////////////////////////////////////////////////
void vApplicationIdleHook(void)
{
  APP_Background();
 801087c:	f7ff bbcd 	b.w	801001a <APP_Background>

08010880 <_abort>:
// This function aborts any operations, but keeps MIDI alive (for uploading
// a new firmware)
// If MIDI isn't enabled, the status LED will be flashed
/////////////////////////////////////////////////////////////////////////////
void _abort(void)
{
 8010880:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_MIDI
  // keep MIDI alive, so that program code can be updated
  u32 delay_ctr = 0;
 8010882:	2400      	movs	r4, #0
  while( 1 ) {
    ++delay_ctr;
 8010884:	3401      	adds	r4, #1

    if( (delay_ctr % 100) == 0 ) {
 8010886:	2364      	movs	r3, #100	; 0x64
 8010888:	fbb4 f2f3 	udiv	r2, r4, r3
 801088c:	fb03 4012 	mls	r0, r3, r2, r4
 8010890:	b908      	cbnz	r0, 8010896 <_abort+0x16>
      // handle timeout/expire counters and USB packages
      MIOS32_MIDI_Periodic_mS();
 8010892:	f001 f93f 	bl	8011b14 <MIOS32_MIDI_Periodic_mS>
    }

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 8010896:	4809      	ldr	r0, [pc, #36]	; (80108bc <_abort+0x3c>)
 8010898:	f001 fbee 	bl	8012078 <MIOS32_MIDI_Receive_Handler>
#if !defined(MIOS32_DONT_USE_BOARD_LED)
    if( (delay_ctr % 10000) == 0 ) {
 801089c:	f242 7110 	movw	r1, #10000	; 0x2710
 80108a0:	fbb4 f3f1 	udiv	r3, r4, r1
 80108a4:	fb01 4213 	mls	r2, r1, r3, r4
 80108a8:	2a00      	cmp	r2, #0
 80108aa:	d1eb      	bne.n	8010884 <_abort+0x4>
      // toggle board LED
      MIOS32_BOARD_LED_Set(1, ~MIOS32_BOARD_LED_Get());
 80108ac:	f002 fced 	bl	801328a <MIOS32_BOARD_LED_Get>
 80108b0:	43c1      	mvns	r1, r0
 80108b2:	2001      	movs	r0, #1
 80108b4:	f002 fce6 	bl	8013284 <MIOS32_BOARD_LED_Set>
 80108b8:	e7e4      	b.n	8010884 <_abort+0x4>
 80108ba:	bf00      	nop
 80108bc:	08010055 	.word	0x08010055

080108c0 <vApplicationMallocFailedHook>:

/////////////////////////////////////////////////////////////////////////////
// enabled in FreeRTOSConfig.h
/////////////////////////////////////////////////////////////////////////////
void vApplicationMallocFailedHook(void)
{
 80108c0:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80108c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80108c6:	f000 fef1 	bl	80116ac <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80108ca:	2000      	movs	r0, #0
 80108cc:	f000 fef0 	bl	80116b0 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80108d0:	2000      	movs	r0, #0
 80108d2:	f000 fe01 	bl	80114d8 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80108d6:	f000 fe4f 	bl	8011578 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80108da:	2000      	movs	r0, #0
 80108dc:	4601      	mov	r1, r0
 80108de:	f000 fe01 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("FATAL: FreeRTOS "); // 16 chars
 80108e2:	4807      	ldr	r0, [pc, #28]	; (8010900 <vApplicationMallocFailedHook+0x40>)
 80108e4:	f000 fea6 	bl	8011634 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80108e8:	2101      	movs	r1, #1
 80108ea:	2000      	movs	r0, #0
 80108ec:	f000 fdfa 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Malloc Error!!! "); // 16 chars
 80108f0:	4804      	ldr	r0, [pc, #16]	; (8010904 <vApplicationMallocFailedHook+0x44>)
 80108f2:	f000 fe9f 	bl	8011634 <MIOS32_LCD_PrintString>
#endif

#ifndef MIOS32_DONT_USE_MIDI
  // Note: message won't be sent if MIDI task cannot be created!
  MIOS32_MIDI_SendDebugMessage("FATAL: FreeRTOS Malloc Error!!!\n");
 80108f6:	4804      	ldr	r0, [pc, #16]	; (8010908 <vApplicationMallocFailedHook+0x48>)
 80108f8:	f001 f8bc 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
#endif

  _abort();
 80108fc:	f7ff ffc0 	bl	8010880 <_abort>
 8010900:	0801b5cf 	.word	0x0801b5cf
 8010904:	0801b5e0 	.word	0x0801b5e0
 8010908:	0801b5f1 	.word	0x0801b5f1

0801090c <HardFault_Handler_c>:

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 801090c:	b510      	push	{r4, lr}
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 801090e:	6803      	ldr	r3, [r0, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 8010910:	6841      	ldr	r1, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 8010912:	6882      	ldr	r2, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 8010914:	68c4      	ldr	r4, [r0, #12]

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 8010916:	b088      	sub	sp, #32
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 8010918:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 801091a:	6903      	ldr	r3, [r0, #16]
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 801091c:	9101      	str	r1, [sp, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 801091e:	9202      	str	r2, [sp, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 8010920:	6941      	ldr	r1, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 8010922:	6982      	ldr	r2, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 8010924:	69c0      	ldr	r0, [r0, #28]
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 8010926:	9403      	str	r4, [sp, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 8010928:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801092a:	4c33      	ldr	r4, [pc, #204]	; (80109f8 <HardFault_Handler_c+0xec>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 801092c:	9105      	str	r1, [sp, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 801092e:	9206      	str	r2, [sp, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 8010930:	9007      	str	r0, [sp, #28]
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
 8010932:	9906      	ldr	r1, [sp, #24]
 8010934:	4831      	ldr	r0, [pc, #196]	; (80109fc <HardFault_Handler_c+0xf0>)
 8010936:	f001 f89d 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801093a:	4620      	mov	r0, r4
 801093c:	f001 f89a 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
 8010940:	482f      	ldr	r0, [pc, #188]	; (8010a00 <HardFault_Handler_c+0xf4>)
 8010942:	f001 f897 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 8010946:	4620      	mov	r0, r4
 8010948:	f001 f894 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 801094c:	9900      	ldr	r1, [sp, #0]
 801094e:	482d      	ldr	r0, [pc, #180]	; (8010a04 <HardFault_Handler_c+0xf8>)
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 8010950:	4c2d      	ldr	r4, [pc, #180]	; (8010a08 <HardFault_Handler_c+0xfc>)
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010952:	f001 f88f 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R1 = %08x\n", stacked_r1);
 8010956:	9901      	ldr	r1, [sp, #4]
 8010958:	482c      	ldr	r0, [pc, #176]	; (8010a0c <HardFault_Handler_c+0x100>)
 801095a:	f001 f88b 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R2 = %08x\n", stacked_r2);
 801095e:	9902      	ldr	r1, [sp, #8]
 8010960:	482b      	ldr	r0, [pc, #172]	; (8010a10 <HardFault_Handler_c+0x104>)
 8010962:	f001 f887 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R3 = %08x\n", stacked_r3);
 8010966:	9903      	ldr	r1, [sp, #12]
 8010968:	482a      	ldr	r0, [pc, #168]	; (8010a14 <HardFault_Handler_c+0x108>)
 801096a:	f001 f883 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R12 = %08x\n", stacked_r12);
 801096e:	9904      	ldr	r1, [sp, #16]
 8010970:	4829      	ldr	r0, [pc, #164]	; (8010a18 <HardFault_Handler_c+0x10c>)
 8010972:	f001 f87f 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("LR = %08x\n", stacked_lr);
 8010976:	9905      	ldr	r1, [sp, #20]
 8010978:	4828      	ldr	r0, [pc, #160]	; (8010a1c <HardFault_Handler_c+0x110>)
 801097a:	f001 f87b 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PC = %08x\n", stacked_pc);
 801097e:	9906      	ldr	r1, [sp, #24]
 8010980:	4827      	ldr	r0, [pc, #156]	; (8010a20 <HardFault_Handler_c+0x114>)
 8010982:	f001 f877 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
 8010986:	9907      	ldr	r1, [sp, #28]
 8010988:	4826      	ldr	r0, [pc, #152]	; (8010a24 <HardFault_Handler_c+0x118>)
 801098a:	f001 f873 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
 801098e:	4b26      	ldr	r3, [pc, #152]	; (8010a28 <HardFault_Handler_c+0x11c>)
 8010990:	4826      	ldr	r0, [pc, #152]	; (8010a2c <HardFault_Handler_c+0x120>)
 8010992:	6819      	ldr	r1, [r3, #0]
 8010994:	f001 f86e 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
 8010998:	4925      	ldr	r1, [pc, #148]	; (8010a30 <HardFault_Handler_c+0x124>)
 801099a:	4826      	ldr	r0, [pc, #152]	; (8010a34 <HardFault_Handler_c+0x128>)
 801099c:	6809      	ldr	r1, [r1, #0]
 801099e:	f001 f869 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
 80109a2:	4a25      	ldr	r2, [pc, #148]	; (8010a38 <HardFault_Handler_c+0x12c>)
 80109a4:	4825      	ldr	r0, [pc, #148]	; (8010a3c <HardFault_Handler_c+0x130>)
 80109a6:	6811      	ldr	r1, [r2, #0]
 80109a8:	f001 f864 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
 80109ac:	4824      	ldr	r0, [pc, #144]	; (8010a40 <HardFault_Handler_c+0x134>)
 80109ae:	6801      	ldr	r1, [r0, #0]
 80109b0:	4824      	ldr	r0, [pc, #144]	; (8010a44 <HardFault_Handler_c+0x138>)
 80109b2:	f001 f85f 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 80109b6:	6821      	ldr	r1, [r4, #0]
 80109b8:	4823      	ldr	r0, [pc, #140]	; (8010a48 <HardFault_Handler_c+0x13c>)
 80109ba:	f001 f85b 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>

#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80109be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80109c2:	f000 fe73 	bl	80116ac <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80109c6:	2000      	movs	r0, #0
 80109c8:	f000 fe72 	bl	80116b0 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80109cc:	2000      	movs	r0, #0
 80109ce:	f000 fd83 	bl	80114d8 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80109d2:	f000 fdd1 	bl	8011578 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80109d6:	2000      	movs	r0, #0
 80109d8:	4601      	mov	r1, r0
 80109da:	f000 fd83 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("!! HARD FAULT !!");
 80109de:	481b      	ldr	r0, [pc, #108]	; (8010a4c <HardFault_Handler_c+0x140>)
 80109e0:	f000 fe28 	bl	8011634 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80109e4:	2101      	movs	r1, #1
 80109e6:	2000      	movs	r0, #0
 80109e8:	f000 fd7c 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintFormattedString("at PC=0x%08x", stacked_pc);
 80109ec:	9906      	ldr	r1, [sp, #24]
 80109ee:	4818      	ldr	r0, [pc, #96]	; (8010a50 <HardFault_Handler_c+0x144>)
 80109f0:	f000 fe4a 	bl	8011688 <MIOS32_LCD_PrintFormattedString>
#endif

  _abort();
 80109f4:	f7ff ff44 	bl	8010880 <_abort>
 80109f8:	0801b63b 	.word	0x0801b63b
 80109fc:	0801b625 	.word	0x0801b625
 8010a00:	0801b64f 	.word	0x0801b64f
 8010a04:	0801b663 	.word	0x0801b663
 8010a08:	e000ed3c 	.word	0xe000ed3c
 8010a0c:	0801b66e 	.word	0x0801b66e
 8010a10:	0801b679 	.word	0x0801b679
 8010a14:	0801b684 	.word	0x0801b684
 8010a18:	0801b68f 	.word	0x0801b68f
 8010a1c:	0801b69b 	.word	0x0801b69b
 8010a20:	0801b630 	.word	0x0801b630
 8010a24:	0801b6a6 	.word	0x0801b6a6
 8010a28:	e000ed38 	.word	0xe000ed38
 8010a2c:	0801b6b2 	.word	0x0801b6b2
 8010a30:	e000ed28 	.word	0xe000ed28
 8010a34:	0801b6bf 	.word	0x0801b6bf
 8010a38:	e000ed2c 	.word	0xe000ed2c
 8010a3c:	0801b6cc 	.word	0x0801b6cc
 8010a40:	e000ed30 	.word	0xe000ed30
 8010a44:	0801b6d9 	.word	0x0801b6d9
 8010a48:	0801b6e6 	.word	0x0801b6e6
 8010a4c:	0801b6f3 	.word	0x0801b6f3
 8010a50:	0801b704 	.word	0x0801b704

08010a54 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
  __asm("TST LR, #4");
 8010a54:	f01e 0f04 	tst.w	lr, #4
  __asm("ITE EQ");
 8010a58:	bf0c      	ite	eq
  __asm("MRSEQ R0, MSP");
 8010a5a:	f3ef 8008 	mrseq	r0, MSP
  __asm("MRSNE R0, PSP");
 8010a5e:	f3ef 8009 	mrsne	r0, PSP
  __asm("B HardFault_Handler_c");
 8010a62:	f7ff bf53 	b.w	801090c <HardFault_Handler_c>
 8010a66:	4770      	bx	lr

08010a68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010a6a:	4d1e      	ldr	r5, [pc, #120]	; (8010ae4 <prvAddCurrentTaskToDelayedList+0x7c>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ae8 <prvAddCurrentTaskToDelayedList+0x80>)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a6e:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a70:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010a72:	6828      	ldr	r0, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a74:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a76:	6829      	ldr	r1, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a7e:	1d08      	adds	r0, r1, #4
 8010a80:	f000 fb18 	bl	80110b4 <uxListRemove>
 8010a84:	b948      	cbnz	r0, 8010a9a <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010a86:	4b19      	ldr	r3, [pc, #100]	; (8010aec <prvAddCurrentTaskToDelayedList+0x84>)
 8010a88:	6819      	ldr	r1, [r3, #0]
 8010a8a:	6828      	ldr	r0, [r5, #0]
 8010a8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010a8e:	2001      	movs	r0, #1
 8010a90:	fa00 f202 	lsl.w	r2, r0, r2
 8010a94:	ea21 0102 	bic.w	r1, r1, r2
 8010a98:	6019      	str	r1, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a9a:	1c63      	adds	r3, r4, #1
 8010a9c:	4811      	ldr	r0, [pc, #68]	; (8010ae4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8010a9e:	d107      	bne.n	8010ab0 <prvAddCurrentTaskToDelayedList+0x48>
 8010aa0:	b137      	cbz	r7, 8010ab0 <prvAddCurrentTaskToDelayedList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aa2:	6802      	ldr	r2, [r0, #0]
 8010aa4:	4812      	ldr	r0, [pc, #72]	; (8010af0 <prvAddCurrentTaskToDelayedList+0x88>)
 8010aa6:	1d11      	adds	r1, r2, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aac:	f000 bade 	b.w	801106c <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ab0:	19a4      	adds	r4, r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ab2:	6802      	ldr	r2, [r0, #0]
 8010ab4:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8010ab6:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 8010ab8:	42b4      	cmp	r4, r6
 8010aba:	d207      	bcs.n	8010acc <prvAddCurrentTaskToDelayedList+0x64>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010abc:	490d      	ldr	r1, [pc, #52]	; (8010af4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8010abe:	6808      	ldr	r0, [r1, #0]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	1d19      	adds	r1, r3, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ac8:	f000 badc 	b.w	8011084 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010acc:	490a      	ldr	r1, [pc, #40]	; (8010af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010ace:	6808      	ldr	r0, [r1, #0]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	1d19      	adds	r1, r3, #4
 8010ad4:	f000 fad6 	bl	8011084 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ad8:	4808      	ldr	r0, [pc, #32]	; (8010afc <prvAddCurrentTaskToDelayedList+0x94>)
 8010ada:	6802      	ldr	r2, [r0, #0]
 8010adc:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8010ade:	bf38      	it	cc
 8010ae0:	6004      	strcc	r4, [r0, #0]
 8010ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae4:	20000128 	.word	0x20000128
 8010ae8:	20000130 	.word	0x20000130
 8010aec:	20000180 	.word	0x20000180
 8010af0:	2000016c 	.word	0x2000016c
 8010af4:	20000134 	.word	0x20000134
 8010af8:	20000088 	.word	0x20000088
 8010afc:	2000012c 	.word	0x2000012c

08010b00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b00:	4a06      	ldr	r2, [pc, #24]	; (8010b1c <prvResetNextTaskUnblockTime+0x1c>)
 8010b02:	4807      	ldr	r0, [pc, #28]	; (8010b20 <prvResetNextTaskUnblockTime+0x20>)
 8010b04:	6813      	ldr	r3, [r2, #0]
 8010b06:	6819      	ldr	r1, [r3, #0]
 8010b08:	b911      	cbnz	r1, 8010b10 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b0e:	e003      	b.n	8010b18 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010b10:	6812      	ldr	r2, [r2, #0]
 8010b12:	68d3      	ldr	r3, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b14:	68d9      	ldr	r1, [r3, #12]
 8010b16:	684a      	ldr	r2, [r1, #4]
 8010b18:	6002      	str	r2, [r0, #0]
 8010b1a:	4770      	bx	lr
 8010b1c:	20000088 	.word	0x20000088
 8010b20:	2000012c 	.word	0x2000012c

08010b24 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b28:	ea4f 0b82 	mov.w	fp, r2, lsl #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b2c:	4681      	mov	r9, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b2e:	4658      	mov	r0, fp
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b30:	460e      	mov	r6, r1
 8010b32:	4692      	mov	sl, r2
 8010b34:	4698      	mov	r8, r3
 8010b36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b38:	f000 fbb8 	bl	80112ac <pvPortMalloc>

			if( pxStack != NULL )
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f000 80a5 	beq.w	8010c8e <xTaskCreate+0x16a>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010b44:	2050      	movs	r0, #80	; 0x50
 8010b46:	f000 fbb1 	bl	80112ac <pvPortMalloc>

				if( pxNewTCB != NULL )
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	b170      	cbz	r0, 8010b6c <xTaskCreate+0x48>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b4e:	6305      	str	r5, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b50:	465a      	mov	r2, fp
 8010b52:	4628      	mov	r0, r5
 8010b54:	21a5      	movs	r1, #165	; 0xa5
 8010b56:	f00a fb9e 	bl	801b296 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b60:	eb03 008a 	add.w	r0, r3, sl, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010b64:	f020 0b07 	bic.w	fp, r0, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b68:	2500      	movs	r5, #0
 8010b6a:	e006      	b.n	8010b7a <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f000 fc1d 	bl	80113ac <vPortFree>
 8010b72:	e08c      	b.n	8010c8e <xTaskCreate+0x16a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b74:	3501      	adds	r5, #1
 8010b76:	2d10      	cmp	r5, #16
 8010b78:	d006      	beq.n	8010b88 <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b7a:	5d72      	ldrb	r2, [r6, r5]
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 8010b7c:	1961      	adds	r1, r4, r5
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b7e:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010b82:	5d73      	ldrb	r3, [r6, r5]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1f5      	bne.n	8010b74 <xTaskCreate+0x50>
 8010b88:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b8a:	2500      	movs	r5, #0
 8010b8c:	2e04      	cmp	r6, #4
 8010b8e:	bf34      	ite	cc
 8010b90:	46b2      	movcc	sl, r6
 8010b92:	f04f 0a04 	movcs.w	sl, #4
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b96:	1d26      	adds	r6, r4, #4
 8010b98:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b9a:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010b9e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ba2:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ba6:	64a5      	str	r5, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ba8:	f000 fa5d 	bl	8011066 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010bac:	f104 0018 	add.w	r0, r4, #24
 8010bb0:	f000 fa59 	bl	8011066 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bb4:	f1ca 0005 	rsb	r0, sl, #5
 8010bb8:	61a0      	str	r0, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010bba:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010bbc:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8010bbe:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010bc2:	4658      	mov	r0, fp
 8010bc4:	4649      	mov	r1, r9
 8010bc6:	4642      	mov	r2, r8
 8010bc8:	f000 fa9e 	bl	8011108 <pxPortInitialiseStack>
 8010bcc:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010bce:	b107      	cbz	r7, 8010bd2 <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010bd0:	603c      	str	r4, [r7, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010bd2:	f000 fac5 	bl	8011160 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010bd6:	4a30      	ldr	r2, [pc, #192]	; (8010c98 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8010bd8:	4830      	ldr	r0, [pc, #192]	; (8010c9c <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8010bda:	6811      	ldr	r1, [r2, #0]
 8010bdc:	1c4b      	adds	r3, r1, #1
 8010bde:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010be0:	6805      	ldr	r5, [r0, #0]
 8010be2:	bb15      	cbnz	r5, 8010c2a <xTaskCreate+0x106>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010be4:	6004      	str	r4, [r0, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010be6:	6810      	ldr	r0, [r2, #0]
 8010be8:	2801      	cmp	r0, #1
 8010bea:	d127      	bne.n	8010c3c <xTaskCreate+0x118>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bec:	4a2c      	ldr	r2, [pc, #176]	; (8010ca0 <xTaskCreate+0x17c>)
 8010bee:	2714      	movs	r7, #20
 8010bf0:	fb07 2005 	mla	r0, r7, r5, r2

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bf4:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bf6:	f000 fa2b 	bl	8011050 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bfa:	2d05      	cmp	r5, #5
 8010bfc:	d1f6      	bne.n	8010bec <xTaskCreate+0xc8>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8010bfe:	4f29      	ldr	r7, [pc, #164]	; (8010ca4 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList2 );
 8010c00:	4d29      	ldr	r5, [pc, #164]	; (8010ca8 <xTaskCreate+0x184>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8010c02:	4638      	mov	r0, r7
 8010c04:	f000 fa24 	bl	8011050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f000 fa21 	bl	8011050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010c0e:	4827      	ldr	r0, [pc, #156]	; (8010cac <xTaskCreate+0x188>)
 8010c10:	f000 fa1e 	bl	8011050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010c14:	4826      	ldr	r0, [pc, #152]	; (8010cb0 <xTaskCreate+0x18c>)
 8010c16:	f000 fa1b 	bl	8011050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c1a:	4826      	ldr	r0, [pc, #152]	; (8010cb4 <xTaskCreate+0x190>)
 8010c1c:	f000 fa18 	bl	8011050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c20:	4925      	ldr	r1, [pc, #148]	; (8010cb8 <xTaskCreate+0x194>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c22:	4b26      	ldr	r3, [pc, #152]	; (8010cbc <xTaskCreate+0x198>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c24:	600f      	str	r7, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c26:	601d      	str	r5, [r3, #0]
 8010c28:	e008      	b.n	8010c3c <xTaskCreate+0x118>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010c2a:	4d25      	ldr	r5, [pc, #148]	; (8010cc0 <xTaskCreate+0x19c>)
 8010c2c:	682a      	ldr	r2, [r5, #0]
 8010c2e:	b92a      	cbnz	r2, 8010c3c <xTaskCreate+0x118>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010c30:	6801      	ldr	r1, [r0, #0]
 8010c32:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8010c34:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8010c36:	42ab      	cmp	r3, r5
				{
					pxCurrentTCB = pxNewTCB;
 8010c38:	bf98      	it	ls
 8010c3a:	6004      	strls	r4, [r0, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010c3c:	4821      	ldr	r0, [pc, #132]	; (8010cc4 <xTaskCreate+0x1a0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010c40:	6802      	ldr	r2, [r0, #0]
 8010c42:	1c55      	adds	r5, r2, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010c44:	4a20      	ldr	r2, [pc, #128]	; (8010cc8 <xTaskCreate+0x1a4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010c46:	6005      	str	r5, [r0, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010c48:	6811      	ldr	r1, [r2, #0]
 8010c4a:	2501      	movs	r5, #1
 8010c4c:	fa05 f003 	lsl.w	r0, r5, r3
 8010c50:	4301      	orrs	r1, r0
 8010c52:	6011      	str	r1, [r2, #0]
 8010c54:	4a12      	ldr	r2, [pc, #72]	; (8010ca0 <xTaskCreate+0x17c>)
 8010c56:	2014      	movs	r0, #20
 8010c58:	fb00 2003 	mla	r0, r0, r3, r2
 8010c5c:	4631      	mov	r1, r6
 8010c5e:	f000 fa05 	bl	801106c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010c62:	f000 fa8d 	bl	8011180 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010c66:	4b16      	ldr	r3, [pc, #88]	; (8010cc0 <xTaskCreate+0x19c>)
 8010c68:	6819      	ldr	r1, [r3, #0]
 8010c6a:	b169      	cbz	r1, 8010c88 <xTaskCreate+0x164>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010c6c:	480b      	ldr	r0, [pc, #44]	; (8010c9c <xTaskCreate+0x178>)
 8010c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010c70:	6802      	ldr	r2, [r0, #0]
 8010c72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d207      	bcs.n	8010c88 <xTaskCreate+0x164>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c78:	4a14      	ldr	r2, [pc, #80]	; (8010ccc <xTaskCreate+0x1a8>)
 8010c7a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010c7e:	6010      	str	r0, [r2, #0]
 8010c80:	f3bf 8f4f 	dsb	sy
 8010c84:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8010c88:	4628      	mov	r0, r5
 8010c8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010c8e:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8010c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c96:	bf00      	nop
 8010c98:	20000150 	.word	0x20000150
 8010c9c:	20000128 	.word	0x20000128
 8010ca0:	200000ac 	.word	0x200000ac
 8010ca4:	20000094 	.word	0x20000094
 8010ca8:	20000154 	.word	0x20000154
 8010cac:	20000138 	.word	0x20000138
 8010cb0:	20000110 	.word	0x20000110
 8010cb4:	2000016c 	.word	0x2000016c
 8010cb8:	20000088 	.word	0x20000088
 8010cbc:	20000134 	.word	0x20000134
 8010cc0:	2000008c 	.word	0x2000008c
 8010cc4:	2000014c 	.word	0x2000014c
 8010cc8:	20000180 	.word	0x20000180
 8010ccc:	e000ed04 	.word	0xe000ed04

08010cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010cd0:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010cd2:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <vTaskStartScheduler+0x4c>)
 8010cd4:	4812      	ldr	r0, [pc, #72]	; (8010d20 <vTaskStartScheduler+0x50>)
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	2400      	movs	r4, #0
 8010cda:	9400      	str	r4, [sp, #0]
 8010cdc:	4911      	ldr	r1, [pc, #68]	; (8010d24 <vTaskStartScheduler+0x54>)
 8010cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ce2:	4623      	mov	r3, r4
 8010ce4:	f7ff ff1e 	bl	8010b24 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010ce8:	2801      	cmp	r0, #1
 8010cea:	d114      	bne.n	8010d16 <vTaskStartScheduler+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010cec:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8010cf0:	f383 8811 	msr	BASEPRI, r3
 8010cf4:	f3bf 8f6f 	isb	sy
 8010cf8:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010cfc:	490a      	ldr	r1, [pc, #40]	; (8010d28 <vTaskStartScheduler+0x58>)
		xSchedulerRunning = pdTRUE;
 8010cfe:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <vTaskStartScheduler+0x5c>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010d00:	f04f 32ff 	mov.w	r2, #4294967295
 8010d04:	600a      	str	r2, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8010d06:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010d08:	4809      	ldr	r0, [pc, #36]	; (8010d30 <vTaskStartScheduler+0x60>)
 8010d0a:	6004      	str	r4, [r0, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d0c:	b002      	add	sp, #8
 8010d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010d12:	f000 ba8f 	b.w	8011234 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d16:	b002      	add	sp, #8
 8010d18:	bd10      	pop	{r4, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20000168 	.word	0x20000168
 8010d20:	08010f25 	.word	0x08010f25
 8010d24:	0801b711 	.word	0x0801b711
 8010d28:	2000012c 	.word	0x2000012c
 8010d2c:	2000008c 	.word	0x2000008c
 8010d30:	20000130 	.word	0x20000130

08010d34 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010d34:	4b02      	ldr	r3, [pc, #8]	; (8010d40 <vTaskSuspendAll+0xc>)
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	1c50      	adds	r0, r2, #1
 8010d3a:	6018      	str	r0, [r3, #0]
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	20000090 	.word	0x20000090

08010d44 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d44:	4b01      	ldr	r3, [pc, #4]	; (8010d4c <xTaskGetTickCount+0x8>)
 8010d46:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	20000130 	.word	0x20000130

08010d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d52:	4b35      	ldr	r3, [pc, #212]	; (8010e28 <xTaskIncrementTick+0xd8>)
 8010d54:	6818      	ldr	r0, [r3, #0]
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d136      	bne.n	8010dc8 <xTaskIncrementTick+0x78>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8010d5a:	4b34      	ldr	r3, [pc, #208]	; (8010e2c <xTaskIncrementTick+0xdc>)
 8010d5c:	681e      	ldr	r6, [r3, #0]
 8010d5e:	3601      	adds	r6, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d60:	601e      	str	r6, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8010d62:	b95e      	cbnz	r6, 8010d7c <xTaskIncrementTick+0x2c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d64:	4a32      	ldr	r2, [pc, #200]	; (8010e30 <xTaskIncrementTick+0xe0>)
 8010d66:	4d33      	ldr	r5, [pc, #204]	; (8010e34 <xTaskIncrementTick+0xe4>)
 8010d68:	6811      	ldr	r1, [r2, #0]
 8010d6a:	6828      	ldr	r0, [r5, #0]
 8010d6c:	4b32      	ldr	r3, [pc, #200]	; (8010e38 <xTaskIncrementTick+0xe8>)
 8010d6e:	6010      	str	r0, [r2, #0]
 8010d70:	6029      	str	r1, [r5, #0]
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	1c51      	adds	r1, r2, #1
 8010d76:	6019      	str	r1, [r3, #0]
 8010d78:	f7ff fec2 	bl	8010b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d7c:	4d2f      	ldr	r5, [pc, #188]	; (8010e3c <xTaskIncrementTick+0xec>)
 8010d7e:	6828      	ldr	r0, [r5, #0]
 8010d80:	2500      	movs	r5, #0
 8010d82:	4286      	cmp	r6, r0
 8010d84:	d310      	bcc.n	8010da8 <xTaskIncrementTick+0x58>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d86:	4b2a      	ldr	r3, [pc, #168]	; (8010e30 <xTaskIncrementTick+0xe0>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	6811      	ldr	r1, [r2, #0]
 8010d8c:	b921      	cbnz	r1, 8010d98 <xTaskIncrementTick+0x48>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d8e:	4b2b      	ldr	r3, [pc, #172]	; (8010e3c <xTaskIncrementTick+0xec>)
 8010d90:	f04f 30ff 	mov.w	r0, #4294967295
 8010d94:	6018      	str	r0, [r3, #0]
					break;
 8010d96:	e007      	b.n	8010da8 <xTaskIncrementTick+0x58>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010d98:	681c      	ldr	r4, [r3, #0]
 8010d9a:	68e0      	ldr	r0, [r4, #12]
 8010d9c:	68c4      	ldr	r4, [r0, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d9e:	6863      	ldr	r3, [r4, #4]

					if( xConstTickCount < xItemValue )
 8010da0:	429e      	cmp	r6, r3
 8010da2:	d21f      	bcs.n	8010de4 <xTaskIncrementTick+0x94>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010da4:	4925      	ldr	r1, [pc, #148]	; (8010e3c <xTaskIncrementTick+0xec>)
 8010da6:	600b      	str	r3, [r1, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010da8:	4a25      	ldr	r2, [pc, #148]	; (8010e40 <xTaskIncrementTick+0xf0>)
 8010daa:	6811      	ldr	r1, [r2, #0]
 8010dac:	4a25      	ldr	r2, [pc, #148]	; (8010e44 <xTaskIncrementTick+0xf4>)
 8010dae:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8010db0:	2314      	movs	r3, #20
 8010db2:	4358      	muls	r0, r3
 8010db4:	5811      	ldr	r1, [r2, r0]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8010db6:	4824      	ldr	r0, [pc, #144]	; (8010e48 <xTaskIncrementTick+0xf8>)
 8010db8:	6803      	ldr	r3, [r0, #0]
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8010dba:	2901      	cmp	r1, #1
 8010dbc:	bf88      	it	hi
 8010dbe:	2501      	movhi	r5, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8010dc0:	b94b      	cbnz	r3, 8010dd6 <xTaskIncrementTick+0x86>
			{
				vApplicationTickHook();
 8010dc2:	f7ff fd59 	bl	8010878 <vApplicationTickHook>
 8010dc6:	e006      	b.n	8010dd6 <xTaskIncrementTick+0x86>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010dc8:	491f      	ldr	r1, [pc, #124]	; (8010e48 <xTaskIncrementTick+0xf8>)
 8010dca:	680a      	ldr	r2, [r1, #0]
 8010dcc:	1c55      	adds	r5, r2, #1
 8010dce:	600d      	str	r5, [r1, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010dd0:	f7ff fd52 	bl	8010878 <vApplicationTickHook>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010dd4:	2500      	movs	r5, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010dd6:	4a1d      	ldr	r2, [pc, #116]	; (8010e4c <xTaskIncrementTick+0xfc>)
 8010dd8:	6811      	ldr	r1, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8010dda:	2900      	cmp	r1, #0
 8010ddc:	bf0c      	ite	eq
 8010dde:	4628      	moveq	r0, r5
 8010de0:	2001      	movne	r0, #1
 8010de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010de4:	1d27      	adds	r7, r4, #4
 8010de6:	4638      	mov	r0, r7
 8010de8:	f000 f964 	bl	80110b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010dec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010dee:	b11a      	cbz	r2, 8010df8 <xTaskIncrementTick+0xa8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010df0:	f104 0018 	add.w	r0, r4, #24
 8010df4:	f000 f95e 	bl	80110b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010df8:	4a15      	ldr	r2, [pc, #84]	; (8010e50 <xTaskIncrementTick+0x100>)
 8010dfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010dfc:	6810      	ldr	r0, [r2, #0]
 8010dfe:	2101      	movs	r1, #1
 8010e00:	fa01 f103 	lsl.w	r1, r1, r3
 8010e04:	4301      	orrs	r1, r0
 8010e06:	6011      	str	r1, [r2, #0]
 8010e08:	4a0e      	ldr	r2, [pc, #56]	; (8010e44 <xTaskIncrementTick+0xf4>)
 8010e0a:	2014      	movs	r0, #20
 8010e0c:	fb00 2003 	mla	r0, r0, r3, r2
 8010e10:	4639      	mov	r1, r7
 8010e12:	f000 f92b 	bl	801106c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e16:	4b0a      	ldr	r3, [pc, #40]	; (8010e40 <xTaskIncrementTick+0xf0>)
 8010e18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010e1a:	6819      	ldr	r1, [r3, #0]
 8010e1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8010e1e:	4290      	cmp	r0, r2
 8010e20:	bf28      	it	cs
 8010e22:	2501      	movcs	r5, #1
 8010e24:	e7af      	b.n	8010d86 <xTaskIncrementTick+0x36>
 8010e26:	bf00      	nop
 8010e28:	20000090 	.word	0x20000090
 8010e2c:	20000130 	.word	0x20000130
 8010e30:	20000088 	.word	0x20000088
 8010e34:	20000134 	.word	0x20000134
 8010e38:	20000084 	.word	0x20000084
 8010e3c:	2000012c 	.word	0x2000012c
 8010e40:	20000128 	.word	0x20000128
 8010e44:	200000ac 	.word	0x200000ac
 8010e48:	200000a8 	.word	0x200000a8
 8010e4c:	20000184 	.word	0x20000184
 8010e50:	20000180 	.word	0x20000180

08010e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010e54:	b570      	push	{r4, r5, r6, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010e56:	f000 f983 	bl	8011160 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010e5a:	4b29      	ldr	r3, [pc, #164]	; (8010f00 <xTaskResumeAll+0xac>)
 8010e5c:	681a      	ldr	r2, [r3, #0]
 8010e5e:	1e50      	subs	r0, r2, #1
 8010e60:	6018      	str	r0, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e62:	681c      	ldr	r4, [r3, #0]
 8010e64:	b10c      	cbz	r4, 8010e6a <xTaskResumeAll+0x16>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8010e66:	2400      	movs	r4, #0
 8010e68:	e045      	b.n	8010ef6 <xTaskResumeAll+0xa2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e6a:	4926      	ldr	r1, [pc, #152]	; (8010f04 <xTaskResumeAll+0xb0>)
 8010e6c:	680b      	ldr	r3, [r1, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d0f9      	beq.n	8010e66 <xTaskResumeAll+0x12>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e72:	4d25      	ldr	r5, [pc, #148]	; (8010f08 <xTaskResumeAll+0xb4>)
 8010e74:	682a      	ldr	r2, [r5, #0]
 8010e76:	b30a      	cbz	r2, 8010ebc <xTaskResumeAll+0x68>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010e78:	68ee      	ldr	r6, [r5, #12]
 8010e7a:	68f4      	ldr	r4, [r6, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e7c:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e7e:	f104 0018 	add.w	r0, r4, #24
 8010e82:	f000 f917 	bl	80110b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e86:	4630      	mov	r0, r6
 8010e88:	f000 f914 	bl	80110b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010e8c:	4a1f      	ldr	r2, [pc, #124]	; (8010f0c <xTaskResumeAll+0xb8>)
 8010e8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010e90:	6811      	ldr	r1, [r2, #0]
 8010e92:	2501      	movs	r5, #1
 8010e94:	fa05 f003 	lsl.w	r0, r5, r3
 8010e98:	4301      	orrs	r1, r0
 8010e9a:	6011      	str	r1, [r2, #0]
 8010e9c:	4a1c      	ldr	r2, [pc, #112]	; (8010f10 <xTaskResumeAll+0xbc>)
 8010e9e:	2014      	movs	r0, #20
 8010ea0:	fb00 2003 	mla	r0, r0, r3, r2
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	f000 f8e1 	bl	801106c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010eaa:	4b1a      	ldr	r3, [pc, #104]	; (8010f14 <xTaskResumeAll+0xc0>)
 8010eac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010eae:	6819      	ldr	r1, [r3, #0]
 8010eb0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010eb2:	4290      	cmp	r0, r2
					{
						xYieldPending = pdTRUE;
 8010eb4:	bf24      	itt	cs
 8010eb6:	4818      	ldrcs	r0, [pc, #96]	; (8010f18 <xTaskResumeAll+0xc4>)
 8010eb8:	6005      	strcs	r5, [r0, #0]
 8010eba:	e7da      	b.n	8010e72 <xTaskResumeAll+0x1e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ebc:	b10c      	cbz	r4, 8010ec2 <xTaskResumeAll+0x6e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ebe:	f7ff fe1f 	bl	8010b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010ec2:	4816      	ldr	r0, [pc, #88]	; (8010f1c <xTaskResumeAll+0xc8>)
 8010ec4:	6804      	ldr	r4, [r0, #0]
 8010ec6:	4605      	mov	r5, r0

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010ec8:	b144      	cbz	r4, 8010edc <xTaskResumeAll+0x88>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010eca:	f7ff ff41 	bl	8010d50 <xTaskIncrementTick>
 8010ece:	b110      	cbz	r0, 8010ed6 <xTaskResumeAll+0x82>
							{
								xYieldPending = pdTRUE;
 8010ed0:	4b11      	ldr	r3, [pc, #68]	; (8010f18 <xTaskResumeAll+0xc4>)
 8010ed2:	2101      	movs	r1, #1
 8010ed4:	6019      	str	r1, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010ed6:	3c01      	subs	r4, #1
 8010ed8:	d1f7      	bne.n	8010eca <xTaskResumeAll+0x76>

						uxPendedTicks = 0;
 8010eda:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010edc:	4a0e      	ldr	r2, [pc, #56]	; (8010f18 <xTaskResumeAll+0xc4>)
 8010ede:	6810      	ldr	r0, [r2, #0]
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0c0      	beq.n	8010e66 <xTaskResumeAll+0x12>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ee4:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <xTaskResumeAll+0xcc>)
 8010ee6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8010eea:	6019      	str	r1, [r3, #0]
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010ef4:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ef6:	f000 f943 	bl	8011180 <vPortExitCritical>

	return xAlreadyYielded;
}
 8010efa:	4620      	mov	r0, r4
 8010efc:	bd70      	pop	{r4, r5, r6, pc}
 8010efe:	bf00      	nop
 8010f00:	20000090 	.word	0x20000090
 8010f04:	20000150 	.word	0x20000150
 8010f08:	20000138 	.word	0x20000138
 8010f0c:	20000180 	.word	0x20000180
 8010f10:	200000ac 	.word	0x200000ac
 8010f14:	20000128 	.word	0x20000128
 8010f18:	20000184 	.word	0x20000184
 8010f1c:	200000a8 	.word	0x200000a8
 8010f20:	e000ed04 	.word	0xe000ed04

08010f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f24:	b570      	push	{r4, r5, r6, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f26:	4c18      	ldr	r4, [pc, #96]	; (8010f88 <prvIdleTask+0x64>)
 8010f28:	6823      	ldr	r3, [r4, #0]
 8010f2a:	b1f3      	cbz	r3, 8010f6a <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010f2c:	4d17      	ldr	r5, [pc, #92]	; (8010f8c <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
 8010f2e:	f7ff ff01 	bl	8010d34 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010f32:	682e      	ldr	r6, [r5, #0]
			}
			( void ) xTaskResumeAll();
 8010f34:	f7ff ff8e 	bl	8010e54 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8010f38:	2e00      	cmp	r6, #0
 8010f3a:	d0f4      	beq.n	8010f26 <prvIdleTask+0x2>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8010f3c:	f000 f910 	bl	8011160 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010f40:	68eb      	ldr	r3, [r5, #12]
 8010f42:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f44:	1d28      	adds	r0, r5, #4
 8010f46:	f000 f8b5 	bl	80110b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010f4a:	4811      	ldr	r0, [pc, #68]	; (8010f90 <prvIdleTask+0x6c>)
 8010f4c:	6801      	ldr	r1, [r0, #0]
 8010f4e:	1e4a      	subs	r2, r1, #1
 8010f50:	6002      	str	r2, [r0, #0]
					--uxDeletedTasksWaitingCleanUp;
 8010f52:	6826      	ldr	r6, [r4, #0]
 8010f54:	1e73      	subs	r3, r6, #1
 8010f56:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8010f58:	f000 f912 	bl	8011180 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010f5c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010f5e:	f000 fa25 	bl	80113ac <vPortFree>
			vPortFree( pxTCB );
 8010f62:	4628      	mov	r0, r5
 8010f64:	f000 fa22 	bl	80113ac <vPortFree>
 8010f68:	e7dd      	b.n	8010f26 <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010f6a:	480a      	ldr	r0, [pc, #40]	; (8010f94 <prvIdleTask+0x70>)
 8010f6c:	6801      	ldr	r1, [r0, #0]
 8010f6e:	2901      	cmp	r1, #1
 8010f70:	d907      	bls.n	8010f82 <prvIdleTask+0x5e>
			{
				taskYIELD();
 8010f72:	4d09      	ldr	r5, [pc, #36]	; (8010f98 <prvIdleTask+0x74>)
 8010f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f78:	602a      	str	r2, [r5, #0]
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010f82:	f7ff fc7b 	bl	801087c <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8010f86:	e7ce      	b.n	8010f26 <prvIdleTask+0x2>
 8010f88:	20000124 	.word	0x20000124
 8010f8c:	20000110 	.word	0x20000110
 8010f90:	20000150 	.word	0x20000150
 8010f94:	200000ac 	.word	0x200000ac
 8010f98:	e000ed04 	.word	0xe000ed04

08010f9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	460d      	mov	r5, r1

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8010fa2:	f7ff fec7 	bl	8010d34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010fa6:	4b13      	ldr	r3, [pc, #76]	; (8010ff4 <vTaskDelayUntil+0x58>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010fa8:	6822      	ldr	r2, [r4, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010faa:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 8010fac:	4290      	cmp	r0, r2
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010fae:	eb05 0102 	add.w	r1, r5, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 8010fb2:	d202      	bcs.n	8010fba <vTaskDelayUntil+0x1e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010fb4:	4291      	cmp	r1, r2
 8010fb6:	d207      	bcs.n	8010fc8 <vTaskDelayUntil+0x2c>
 8010fb8:	e001      	b.n	8010fbe <vTaskDelayUntil+0x22>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010fba:	4291      	cmp	r1, r2
 8010fbc:	d306      	bcc.n	8010fcc <vTaskDelayUntil+0x30>
 8010fbe:	4281      	cmp	r1, r0
 8010fc0:	bf94      	ite	ls
 8010fc2:	2200      	movls	r2, #0
 8010fc4:	2201      	movhi	r2, #1
 8010fc6:	e002      	b.n	8010fce <vTaskDelayUntil+0x32>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010fc8:	2200      	movs	r2, #0
 8010fca:	e000      	b.n	8010fce <vTaskDelayUntil+0x32>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 8010fcc:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010fce:	6021      	str	r1, [r4, #0]

			if( xShouldDelay != pdFALSE )
 8010fd0:	b11a      	cbz	r2, 8010fda <vTaskDelayUntil+0x3e>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010fd2:	1a08      	subs	r0, r1, r0
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	f7ff fd47 	bl	8010a68 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010fda:	f7ff ff3b 	bl	8010e54 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fde:	b938      	cbnz	r0, 8010ff0 <vTaskDelayUntil+0x54>
		{
			portYIELD_WITHIN_API();
 8010fe0:	4b05      	ldr	r3, [pc, #20]	; (8010ff8 <vTaskDelayUntil+0x5c>)
 8010fe2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010fe6:	6018      	str	r0, [r3, #0]
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20000130 	.word	0x20000130
 8010ff8:	e000ed04 	.word	0xe000ed04

08010ffc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ffc:	4b0f      	ldr	r3, [pc, #60]	; (801103c <vTaskSwitchContext+0x40>)
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	4b0f      	ldr	r3, [pc, #60]	; (8011040 <vTaskSwitchContext+0x44>)
 8011002:	b10a      	cbz	r2, 8011008 <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011004:	2201      	movs	r2, #1
 8011006:	e017      	b.n	8011038 <vTaskSwitchContext+0x3c>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011008:	480e      	ldr	r0, [pc, #56]	; (8011044 <vTaskSwitchContext+0x48>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 801100a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801100c:	6801      	ldr	r1, [r0, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 801100e:	fab1 f381 	clz	r3, r1
 8011012:	b2da      	uxtb	r2, r3
 8011014:	4b0c      	ldr	r3, [pc, #48]	; (8011048 <vTaskSwitchContext+0x4c>)
 8011016:	2114      	movs	r1, #20
 8011018:	f1c2 001f 	rsb	r0, r2, #31
 801101c:	fb01 3000 	mla	r0, r1, r0, r3
 8011020:	f100 0108 	add.w	r1, r0, #8
 8011024:	6842      	ldr	r2, [r0, #4]
 8011026:	6853      	ldr	r3, [r2, #4]
 8011028:	428b      	cmp	r3, r1
 801102a:	6043      	str	r3, [r0, #4]
 801102c:	bf04      	itt	eq
 801102e:	685b      	ldreq	r3, [r3, #4]
 8011030:	6043      	streq	r3, [r0, #4]
 8011032:	6840      	ldr	r0, [r0, #4]
 8011034:	4b05      	ldr	r3, [pc, #20]	; (801104c <vTaskSwitchContext+0x50>)
 8011036:	68c2      	ldr	r2, [r0, #12]
 8011038:	601a      	str	r2, [r3, #0]
 801103a:	4770      	bx	lr
 801103c:	20000090 	.word	0x20000090
 8011040:	20000184 	.word	0x20000184
 8011044:	20000180 	.word	0x20000180
 8011048:	200000ac 	.word	0x200000ac
 801104c:	20000128 	.word	0x20000128

08011050 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011050:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011054:	f04f 32ff 	mov.w	r2, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011058:	2100      	movs	r1, #0
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801105a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801105c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801105e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011060:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011062:	6001      	str	r1, [r0, #0]
 8011064:	4770      	bx	lr

08011066 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011066:	2300      	movs	r3, #0
 8011068:	6103      	str	r3, [r0, #16]
 801106a:	4770      	bx	lr

0801106c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801106c:	6843      	ldr	r3, [r0, #4]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801106e:	6108      	str	r0, [r1, #16]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011070:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011072:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011074:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011076:	689a      	ldr	r2, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;
 8011078:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801107a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 801107c:	6801      	ldr	r1, [r0, #0]
 801107e:	1c4b      	adds	r3, r1, #1
 8011080:	6003      	str	r3, [r0, #0]
 8011082:	4770      	bx	lr

08011084 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011084:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011086:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011088:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801108a:	d101      	bne.n	8011090 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801108c:	6903      	ldr	r3, [r0, #16]
 801108e:	e007      	b.n	80110a0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011090:	f100 0308 	add.w	r3, r0, #8
 8011094:	685c      	ldr	r4, [r3, #4]
 8011096:	6825      	ldr	r5, [r4, #0]
 8011098:	4295      	cmp	r5, r2
 801109a:	d801      	bhi.n	80110a0 <vListInsert+0x1c>
 801109c:	4623      	mov	r3, r4
 801109e:	e7f9      	b.n	8011094 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80110a0:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80110a2:	6108      	str	r0, [r1, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80110a4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80110a6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;
 80110a8:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 80110aa:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80110ac:	6801      	ldr	r1, [r0, #0]
 80110ae:	1c4b      	adds	r3, r1, #1
 80110b0:	6003      	str	r3, [r0, #0]
 80110b2:	bd30      	pop	{r4, r5, pc}

080110b4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110b4:	6841      	ldr	r1, [r0, #4]
 80110b6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80110b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110ba:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110bc:	6882      	ldr	r2, [r0, #8]
 80110be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110c0:	6859      	ldr	r1, [r3, #4]
 80110c2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110c4:	bf08      	it	eq
 80110c6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80110c8:	2200      	movs	r2, #0
 80110ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80110cc:	6818      	ldr	r0, [r3, #0]
 80110ce:	3801      	subs	r0, #1
 80110d0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80110d2:	4770      	bx	lr

080110d4 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80110d4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	e7fe      	b.n	80110e4 <prvTaskExitError+0x10>
	...

080110e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80110e8:	4806      	ldr	r0, [pc, #24]	; (8011104 <prvPortStartFirstTask+0x1c>)
 80110ea:	6800      	ldr	r0, [r0, #0]
 80110ec:	6800      	ldr	r0, [r0, #0]
 80110ee:	f380 8808 	msr	MSP, r0
 80110f2:	b662      	cpsie	i
 80110f4:	b661      	cpsie	f
 80110f6:	f3bf 8f4f 	dsb	sy
 80110fa:	f3bf 8f6f 	isb	sy
 80110fe:	df00      	svc	0
 8011100:	bf00      	nop
 8011102:	0000      	.short	0x0000
 8011104:	e000ed08 	.word	0xe000ed08

08011108 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801110c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011110:	4b05      	ldr	r3, [pc, #20]	; (8011128 <pxPortInitialiseStack+0x20>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011112:	f840 2c20 	str.w	r2, [r0, #-32]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011116:	f021 0101 	bic.w	r1, r1, #1
 801111a:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801111e:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8011122:	3840      	subs	r0, #64	; 0x40
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	080110d5 	.word	0x080110d5
 801112c:	00000000 	.word	0x00000000

08011130 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011130:	4b07      	ldr	r3, [pc, #28]	; (8011150 <pxCurrentTCBConst2>)
 8011132:	6819      	ldr	r1, [r3, #0]
 8011134:	6808      	ldr	r0, [r1, #0]
 8011136:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801113a:	f380 8809 	msr	PSP, r0
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f04f 0000 	mov.w	r0, #0
 8011146:	f380 8811 	msr	BASEPRI, r0
 801114a:	f04e 0e0d 	orr.w	lr, lr, #13
 801114e:	4770      	bx	lr

08011150 <pxCurrentTCBConst2>:
 8011150:	20000128 	.word	0x20000128
 8011154:	f3af 8000 	nop.w
 8011158:	f3af 8000 	nop.w
 801115c:	f3af 8000 	nop.w

08011160 <vPortEnterCritical>:
 8011160:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8011164:	f383 8811 	msr	BASEPRI, r3
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011170:	4b02      	ldr	r3, [pc, #8]	; (801117c <vPortEnterCritical+0x1c>)
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	1c50      	adds	r0, r2, #1
 8011176:	6018      	str	r0, [r3, #0]
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	20000000 	.word	0x20000000

08011180 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8011180:	4a03      	ldr	r2, [pc, #12]	; (8011190 <vPortExitCritical+0x10>)
 8011182:	6813      	ldr	r3, [r2, #0]
 8011184:	1e58      	subs	r0, r3, #1
 8011186:	6010      	str	r0, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011188:	b908      	cbnz	r0, 801118e <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801118a:	f380 8811 	msr	BASEPRI, r0
 801118e:	4770      	bx	lr
 8011190:	20000000 	.word	0x20000000
	...

080111a0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80111a0:	f3ef 8009 	mrs	r0, PSP
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	4b0d      	ldr	r3, [pc, #52]	; (80111e0 <pxCurrentTCBConst>)
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80111b0:	6010      	str	r0, [r2, #0]
 80111b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80111b6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80111ba:	f380 8811 	msr	BASEPRI, r0
 80111be:	f7ff ff1d 	bl	8010ffc <vTaskSwitchContext>
 80111c2:	f04f 0000 	mov.w	r0, #0
 80111c6:	f380 8811 	msr	BASEPRI, r0
 80111ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80111ce:	6819      	ldr	r1, [r3, #0]
 80111d0:	6808      	ldr	r0, [r1, #0]
 80111d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80111d6:	f380 8809 	msr	PSP, r0
 80111da:	f3bf 8f6f 	isb	sy
 80111de:	4770      	bx	lr

080111e0 <pxCurrentTCBConst>:
 80111e0:	20000128 	.word	0x20000128
 80111e4:	f3af 8000 	nop.w
 80111e8:	f3af 8000 	nop.w
 80111ec:	f3af 8000 	nop.w

080111f0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80111f0:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80111f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011202:	f7ff fda5 	bl	8010d50 <xTaskIncrementTick>
 8011206:	b118      	cbz	r0, 8011210 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011208:	4b03      	ldr	r3, [pc, #12]	; (8011218 <xPortSysTickHandler+0x28>)
 801120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011210:	2000      	movs	r0, #0
 8011212:	f380 8811 	msr	BASEPRI, r0
 8011216:	bd08      	pop	{r3, pc}
 8011218:	e000ed04 	.word	0xe000ed04

0801121c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801121c:	4b03      	ldr	r3, [pc, #12]	; (801122c <vPortSetupTimerInterrupt+0x10>)
 801121e:	4a04      	ldr	r2, [pc, #16]	; (8011230 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011220:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011222:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011224:	f843 0c04 	str.w	r0, [r3, #-4]
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	e000e014 	.word	0xe000e014
 8011230:	0002903f 	.word	0x0002903f

08011234 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011234:	b508      	push	{r3, lr}
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011236:	4b09      	ldr	r3, [pc, #36]	; (801125c <xPortStartScheduler+0x28>)
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	f442 007f 	orr.w	r0, r2, #16711680	; 0xff0000
 801123e:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011240:	6819      	ldr	r1, [r3, #0]
 8011242:	f041 427f 	orr.w	r2, r1, #4278190080	; 0xff000000
 8011246:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011248:	f7ff ffe8 	bl	801121c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801124c:	4b04      	ldr	r3, [pc, #16]	; (8011260 <xPortStartScheduler+0x2c>)
 801124e:	2000      	movs	r0, #0
 8011250:	6018      	str	r0, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011252:	f7ff ff49 	bl	80110e8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8011256:	f7ff ff3d 	bl	80110d4 <prvTaskExitError>
 801125a:	bf00      	nop
 801125c:	e000ed20 	.word	0xe000ed20
 8011260:	20000000 	.word	0x20000000

08011264 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011264:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011266:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <prvInsertBlockIntoFreeList+0x40>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	4282      	cmp	r2, r0
 801126c:	d201      	bcs.n	8011272 <prvInsertBlockIntoFreeList+0xe>
 801126e:	4613      	mov	r3, r2
 8011270:	e7fa      	b.n	8011268 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011272:	6859      	ldr	r1, [r3, #4]
 8011274:	185c      	adds	r4, r3, r1
 8011276:	4284      	cmp	r4, r0
 8011278:	d103      	bne.n	8011282 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801127a:	6840      	ldr	r0, [r0, #4]
 801127c:	1841      	adds	r1, r0, r1
 801127e:	6059      	str	r1, [r3, #4]
 8011280:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011282:	6841      	ldr	r1, [r0, #4]
 8011284:	1844      	adds	r4, r0, r1
 8011286:	4294      	cmp	r4, r2
 8011288:	d107      	bne.n	801129a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801128a:	4c07      	ldr	r4, [pc, #28]	; (80112a8 <prvInsertBlockIntoFreeList+0x44>)
 801128c:	6824      	ldr	r4, [r4, #0]
 801128e:	42a2      	cmp	r2, r4
 8011290:	d003      	beq.n	801129a <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011292:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011294:	6812      	ldr	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011296:	1861      	adds	r1, r4, r1
 8011298:	6041      	str	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801129a:	4283      	cmp	r3, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801129c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801129e:	bf18      	it	ne
 80112a0:	6018      	strne	r0, [r3, #0]
 80112a2:	bd10      	pop	{r4, pc}
 80112a4:	20000190 	.word	0x20000190
 80112a8:	2000018c 	.word	0x2000018c

080112ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ae:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80112b0:	f7ff fd40 	bl	8010d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80112b4:	4b37      	ldr	r3, [pc, #220]	; (8011394 <pvPortMalloc+0xe8>)
 80112b6:	6818      	ldr	r0, [r3, #0]
 80112b8:	bb18      	cbnz	r0, 8011302 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80112ba:	4a37      	ldr	r2, [pc, #220]	; (8011398 <pvPortMalloc+0xec>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112bc:	0751      	lsls	r1, r2, #29
 80112be:	d007      	beq.n	80112d0 <pvPortMalloc+0x24>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112c0:	1dd6      	adds	r6, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112c2:	f026 0307 	bic.w	r3, r6, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112c6:	f502 5020 	add.w	r0, r2, #10240	; 0x2800
 80112ca:	1ac1      	subs	r1, r0, r3
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112cc:	461a      	mov	r2, r3
 80112ce:	e001      	b.n	80112d4 <pvPortMalloc+0x28>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80112d0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112d4:	1851      	adds	r1, r2, r1
	uxAddress -= xHeapStructSize;
 80112d6:	3908      	subs	r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112d8:	f021 0107 	bic.w	r1, r1, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112dc:	4e2f      	ldr	r6, [pc, #188]	; (801139c <pvPortMalloc+0xf0>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80112de:	482d      	ldr	r0, [pc, #180]	; (8011394 <pvPortMalloc+0xe8>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112e0:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112e2:	2300      	movs	r3, #0
 80112e4:	6073      	str	r3, [r6, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 80112e6:	600b      	str	r3, [r1, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80112e8:	604b      	str	r3, [r1, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80112ea:	1a8b      	subs	r3, r1, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80112ec:	e882 000a 	stmia.w	r2, {r1, r3}

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112f0:	4e2b      	ldr	r6, [pc, #172]	; (80113a0 <pvPortMalloc+0xf4>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112f2:	4a2c      	ldr	r2, [pc, #176]	; (80113a4 <pvPortMalloc+0xf8>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112f4:	6033      	str	r3, [r6, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112f8:	4b2b      	ldr	r3, [pc, #172]	; (80113a8 <pvPortMalloc+0xfc>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80112fa:	6001      	str	r1, [r0, #0]
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011300:	6019      	str	r1, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011302:	4829      	ldr	r0, [pc, #164]	; (80113a8 <pvPortMalloc+0xfc>)
 8011304:	6806      	ldr	r6, [r0, #0]
 8011306:	4235      	tst	r5, r6
 8011308:	d13b      	bne.n	8011382 <pvPortMalloc+0xd6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801130a:	2d00      	cmp	r5, #0
 801130c:	d03a      	beq.n	8011384 <pvPortMalloc+0xd8>
			{
				xWantedSize += xHeapStructSize;
 801130e:	f105 0308 	add.w	r3, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011312:	075a      	lsls	r2, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011314:	bf1c      	itt	ne
 8011316:	f023 0307 	bicne.w	r3, r3, #7
 801131a:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801131c:	2b00      	cmp	r3, #0
 801131e:	d02e      	beq.n	801137e <pvPortMalloc+0xd2>
 8011320:	4d1f      	ldr	r5, [pc, #124]	; (80113a0 <pvPortMalloc+0xf4>)
 8011322:	682f      	ldr	r7, [r5, #0]
 8011324:	42bb      	cmp	r3, r7
 8011326:	d82c      	bhi.n	8011382 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8011328:	4a1c      	ldr	r2, [pc, #112]	; (801139c <pvPortMalloc+0xf0>)
 801132a:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801132c:	6861      	ldr	r1, [r4, #4]
 801132e:	4299      	cmp	r1, r3
 8011330:	d304      	bcc.n	801133c <pvPortMalloc+0x90>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011332:	4d18      	ldr	r5, [pc, #96]	; (8011394 <pvPortMalloc+0xe8>)
 8011334:	6828      	ldr	r0, [r5, #0]
 8011336:	4284      	cmp	r4, r0
 8011338:	d106      	bne.n	8011348 <pvPortMalloc+0x9c>
 801133a:	e022      	b.n	8011382 <pvPortMalloc+0xd6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801133c:	6820      	ldr	r0, [r4, #0]
 801133e:	2800      	cmp	r0, #0
 8011340:	d0f7      	beq.n	8011332 <pvPortMalloc+0x86>
 8011342:	4622      	mov	r2, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
 8011344:	4604      	mov	r4, r0
 8011346:	e7f1      	b.n	801132c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011348:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801134a:	6815      	ldr	r5, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801134c:	6010      	str	r0, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801134e:	1aca      	subs	r2, r1, r3
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011350:	3508      	adds	r5, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011352:	2a10      	cmp	r2, #16
 8011354:	d904      	bls.n	8011360 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011356:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011358:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801135a:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801135c:	f7ff ff82 	bl	8011264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011360:	6862      	ldr	r2, [r4, #4]
 8011362:	490f      	ldr	r1, [pc, #60]	; (80113a0 <pvPortMalloc+0xf4>)
 8011364:	1abb      	subs	r3, r7, r2
 8011366:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011368:	490e      	ldr	r1, [pc, #56]	; (80113a4 <pvPortMalloc+0xf8>)
 801136a:	6808      	ldr	r0, [r1, #0]
 801136c:	4283      	cmp	r3, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801136e:	ea42 0606 	orr.w	r6, r2, r6

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011372:	bf38      	it	cc
 8011374:	600b      	strcc	r3, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8011376:	2200      	movs	r2, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011378:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801137a:	6022      	str	r2, [r4, #0]
 801137c:	e002      	b.n	8011384 <pvPortMalloc+0xd8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801137e:	461d      	mov	r5, r3
 8011380:	e000      	b.n	8011384 <pvPortMalloc+0xd8>
 8011382:	2500      	movs	r5, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011384:	f7ff fd66 	bl	8010e54 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011388:	b90d      	cbnz	r5, 801138e <pvPortMalloc+0xe2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801138a:	f7ff fa99 	bl	80108c0 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 801138e:	4628      	mov	r0, r5
 8011390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011392:	bf00      	nop
 8011394:	2000018c 	.word	0x2000018c
 8011398:	20000fd4 	.word	0x20000fd4
 801139c:	20000190 	.word	0x20000190
 80113a0:	20000188 	.word	0x20000188
 80113a4:	20000198 	.word	0x20000198
 80113a8:	2000019c 	.word	0x2000019c

080113ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113ac:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80113ae:	4604      	mov	r4, r0
 80113b0:	b1e0      	cbz	r0, 80113ec <vPortFree+0x40>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80113b2:	4a0f      	ldr	r2, [pc, #60]	; (80113f0 <vPortFree+0x44>)
 80113b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80113b8:	6810      	ldr	r0, [r2, #0]
 80113ba:	4218      	tst	r0, r3
 80113bc:	d016      	beq.n	80113ec <vPortFree+0x40>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80113be:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80113c2:	b999      	cbnz	r1, 80113ec <vPortFree+0x40>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113c4:	ea23 0300 	bic.w	r3, r3, r0
 80113c8:	f844 3c04 	str.w	r3, [r4, #-4]

				vTaskSuspendAll();
 80113cc:	f7ff fcb2 	bl	8010d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113d0:	4b08      	ldr	r3, [pc, #32]	; (80113f4 <vPortFree+0x48>)
 80113d2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	1881      	adds	r1, r0, r2
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113da:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113de:	6019      	str	r1, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113e0:	f7ff ff40 	bl	8011264 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80113e8:	f7ff bd34 	b.w	8010e54 <xTaskResumeAll>
 80113ec:	bd10      	pop	{r4, pc}
 80113ee:	bf00      	nop
 80113f0:	2000019c 	.word	0x2000019c
 80113f4:	20000188 	.word	0x20000188

080113f8 <Default_Handler>:
 * @param  None     
 * @retval : None       
*/

void Default_Handler(void) 
{
 80113f8:	e7fe      	b.n	80113f8 <Default_Handler>
	...

080113fc <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 80113fc:	4668      	mov	r0, sp
 80113fe:	f020 0107 	bic.w	r1, r0, #7
 8011402:	468d      	mov	sp, r1
 8011404:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8011406:	2300      	movs	r3, #0
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8011408:	4a0e      	ldr	r2, [pc, #56]	; (8011444 <Reset_Handler+0x48>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 801140a:	490f      	ldr	r1, [pc, #60]	; (8011448 <Reset_Handler+0x4c>)
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 801140c:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 801140e:	4288      	cmp	r0, r1
 8011410:	d204      	bcs.n	801141c <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
 8011412:	490e      	ldr	r1, [pc, #56]	; (801144c <Reset_Handler+0x50>)
 8011414:	5858      	ldr	r0, [r3, r1]
 8011416:	5098      	str	r0, [r3, r2]
 8011418:	3304      	adds	r3, #4
 801141a:	e7f5      	b.n	8011408 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 801141c:	480c      	ldr	r0, [pc, #48]	; (8011450 <Reset_Handler+0x54>)
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 801141e:	4a0d      	ldr	r2, [pc, #52]	; (8011454 <Reset_Handler+0x58>)
 8011420:	4290      	cmp	r0, r2
 8011422:	d203      	bcs.n	801142c <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
 8011424:	2200      	movs	r2, #0
 8011426:	f840 2b04 	str.w	r2, [r0], #4
 801142a:	e7f8      	b.n	801141e <Reset_Handler+0x22>
  for(pulDest = &_sdata; pulDest < &_edata; )
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 801142c:	4b0a      	ldr	r3, [pc, #40]	; (8011458 <Reset_Handler+0x5c>)
  {
    *(pulDest++) = 0;
  }

  /* Zero fill the bss_ccm segment. */
  for(pulDest = &_sbss_ccm; pulDest < &_ebss_ccm; )
 801142e:	480b      	ldr	r0, [pc, #44]	; (801145c <Reset_Handler+0x60>)
 8011430:	4283      	cmp	r3, r0
 8011432:	d203      	bcs.n	801143c <Reset_Handler+0x40>
  {
    *(pulDest++) = 0;
 8011434:	2100      	movs	r1, #0
 8011436:	f843 1b04 	str.w	r1, [r3], #4
 801143a:	e7f8      	b.n	801142e <Reset_Handler+0x32>
  }

  /* Call the application's entry point.*/
  main();
 801143c:	f7ff f9c4 	bl	80107c8 <main>
 8011440:	e7fe      	b.n	8011440 <Reset_Handler+0x44>
 8011442:	bf00      	nop
 8011444:	20000000 	.word	0x20000000
 8011448:	20000060 	.word	0x20000060
 801144c:	0801c490 	.word	0x0801c490
 8011450:	20000060 	.word	0x20000060
 8011454:	200045b0 	.word	0x200045b0
 8011458:	10000000 	.word	0x10000000
 801145c:	10000000 	.word	0x10000000

08011460 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
 8011460:	4770      	bx	lr
	...

08011464 <MIOS32_LCD_ParametersFetchFromBslInfoRange>:
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 8011464:	4a10      	ldr	r2, [pc, #64]	; (80114a8 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x44>)
 8011466:	4b11      	ldr	r3, [pc, #68]	; (80114ac <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
 8011468:	6811      	ldr	r1, [r2, #0]
 801146a:	6850      	ldr	r0, [r2, #4]
 801146c:	8912      	ldrh	r2, [r2, #8]
 801146e:	6019      	str	r1, [r3, #0]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 8011470:	490f      	ldr	r1, [pc, #60]	; (80114b0 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x4c>)
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 8011472:	6058      	str	r0, [r3, #4]
 8011474:	811a      	strh	r2, [r3, #8]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 8011476:	7808      	ldrb	r0, [r1, #0]
 8011478:	2842      	cmp	r0, #66	; 0x42
 801147a:	d113      	bne.n	80114a4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x40>
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 801147c:	4a0d      	ldr	r2, [pc, #52]	; (80114b4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x50>)
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 801147e:	480e      	ldr	r0, [pc, #56]	; (80114b8 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x54>)
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 8011480:	7811      	ldrb	r1, [r2, #0]
 8011482:	7019      	strb	r1, [r3, #0]
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 8011484:	7802      	ldrb	r2, [r0, #0]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 8011486:	490d      	ldr	r1, [pc, #52]	; (80114bc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x58>)
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 8011488:	705a      	strb	r2, [r3, #1]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 801148a:	7808      	ldrb	r0, [r1, #0]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 801148c:	4a0c      	ldr	r2, [pc, #48]	; (80114c0 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x5c>)
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 801148e:	7098      	strb	r0, [r3, #2]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 8011490:	7811      	ldrb	r1, [r2, #0]
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 8011492:	4a06      	ldr	r2, [pc, #24]	; (80114ac <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
 8011494:	29ff      	cmp	r1, #255	; 0xff
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
 8011496:	bf08      	it	eq
 8011498:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801149c:	8099      	strh	r1, [r3, #4]
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 801149e:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x60>)
 80114a0:	7818      	ldrb	r0, [r3, #0]
 80114a2:	80d0      	strh	r0, [r2, #6]
  }
#endif

  return 0; // no error
}
 80114a4:	2000      	movs	r0, #0
 80114a6:	4770      	bx	lr
 80114a8:	0801b71a 	.word	0x0801b71a
 80114ac:	200037d6 	.word	0x200037d6
 80114b0:	08003fc0 	.word	0x08003fc0
 80114b4:	08003fc1 	.word	0x08003fc1
 80114b8:	08003fc2 	.word	0x08003fc2
 80114bc:	08003fc3 	.word	0x08003fc3
 80114c0:	08003fc4 	.word	0x08003fc4
 80114c4:	08003fc5 	.word	0x08003fc5

080114c8 <MIOS32_LCD_TypeIsGLCD>:
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 80114c8:	4b02      	ldr	r3, [pc, #8]	; (80114d4 <MIOS32_LCD_TypeIsGLCD+0xc>)
 80114ca:	f993 0000 	ldrsb.w	r0, [r3]
}
 80114ce:	0fc0      	lsrs	r0, r0, #31
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	200037d6 	.word	0x200037d6

080114d8 <MIOS32_LCD_DeviceSet>:
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 80114d8:	4b01      	ldr	r3, [pc, #4]	; (80114e0 <MIOS32_LCD_DeviceSet+0x8>)
 80114da:	7018      	strb	r0, [r3, #0]

  return 0; // no error
}
 80114dc:	2000      	movs	r0, #0
 80114de:	4770      	bx	lr
 80114e0:	200001ac 	.word	0x200001ac

080114e4 <MIOS32_LCD_CursorSet>:
//! \param[in] column number
//! \param[in] line number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
 80114e4:	b510      	push	{r4, lr}
  // set character position
  mios32_lcd_column = column;
 80114e6:	4b0b      	ldr	r3, [pc, #44]	; (8011514 <MIOS32_LCD_CursorSet+0x30>)
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 80114e8:	4c0b      	ldr	r4, [pc, #44]	; (8011518 <MIOS32_LCD_CursorSet+0x34>)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
 80114ea:	8018      	strh	r0, [r3, #0]
  mios32_lcd_line = line;
 80114ec:	4a0b      	ldr	r2, [pc, #44]	; (801151c <MIOS32_LCD_CursorSet+0x38>)

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 80114ee:	88a3      	ldrh	r3, [r4, #4]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;
 80114f0:	8011      	strh	r1, [r2, #0]

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 80114f2:	b113      	cbz	r3, 80114fa <MIOS32_LCD_CursorSet+0x16>
    font_width = font_bitmap.width;
 80114f4:	b2da      	uxtb	r2, r3
    font_height = font_bitmap.height;
 80114f6:	79a3      	ldrb	r3, [r4, #6]
 80114f8:	e001      	b.n	80114fe <MIOS32_LCD_CursorSet+0x1a>
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
 80114fa:	2308      	movs	r3, #8
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
 80114fc:	2206      	movs	r2, #6
  if( font_bitmap.width ) {
    font_width = font_bitmap.width;
    font_height = font_bitmap.height;
  }

  mios32_lcd_x = column * font_width;
 80114fe:	4c08      	ldr	r4, [pc, #32]	; (8011520 <MIOS32_LCD_CursorSet+0x3c>)
 8011500:	4342      	muls	r2, r0
 8011502:	8022      	strh	r2, [r4, #0]
  mios32_lcd_y = line * font_height;
 8011504:	4a07      	ldr	r2, [pc, #28]	; (8011524 <MIOS32_LCD_CursorSet+0x40>)
 8011506:	434b      	muls	r3, r1
 8011508:	8013      	strh	r3, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
}
 801150a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  mios32_lcd_x = column * font_width;
  mios32_lcd_y = line * font_height;

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
 801150e:	f008 b953 	b.w	80197b8 <APP_LCD_CursorSet>
 8011512:	bf00      	nop
 8011514:	200037e0 	.word	0x200037e0
 8011518:	200001a0 	.word	0x200001a0
 801151c:	200037e6 	.word	0x200037e6
 8011520:	200037e8 	.word	0x200037e8
 8011524:	200037d4 	.word	0x200037d4

08011528 <MIOS32_LCD_GCursorSet>:
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 8011528:	4b02      	ldr	r3, [pc, #8]	; (8011534 <MIOS32_LCD_GCursorSet+0xc>)
  mios32_lcd_y = y;
 801152a:	4a03      	ldr	r2, [pc, #12]	; (8011538 <MIOS32_LCD_GCursorSet+0x10>)
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 801152c:	8018      	strh	r0, [r3, #0]
  mios32_lcd_y = y;
 801152e:	8011      	strh	r1, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_GCursorSet(x, y);
 8011530:	f008 b8d8 	b.w	80196e4 <APP_LCD_GCursorSet>
 8011534:	200037e8 	.word	0x200037e8
 8011538:	200037d4 	.word	0x200037d4

0801153c <MIOS32_LCD_CursorMapSet>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 801153c:	2300      	movs	r3, #0
    mios32_lcd_cursor_map[i] = map_table[i];
 801153e:	5cc1      	ldrb	r1, [r0, r3]
 8011540:	4a03      	ldr	r2, [pc, #12]	; (8011550 <MIOS32_LCD_CursorMapSet+0x14>)
 8011542:	5499      	strb	r1, [r3, r2]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 8011544:	3301      	adds	r3, #1
 8011546:	2b04      	cmp	r3, #4
 8011548:	d1f9      	bne.n	801153e <MIOS32_LCD_CursorMapSet+0x2>
    mios32_lcd_cursor_map[i] = map_table[i];

  return 0; // no error
}
 801154a:	2000      	movs	r0, #0
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	200037e2 	.word	0x200037e2

08011554 <MIOS32_LCD_FontInit>:
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 8011554:	7882      	ldrb	r2, [r0, #2]
 8011556:	4b07      	ldr	r3, [pc, #28]	; (8011574 <MIOS32_LCD_FontInit+0x20>)
 8011558:	1d11      	adds	r1, r2, #4
 801155a:	1842      	adds	r2, r0, r1
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 801155c:	7801      	ldrb	r1, [r0, #0]
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 801155e:	601a      	str	r2, [r3, #0]
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 8011560:	7842      	ldrb	r2, [r0, #1]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8011562:	78c0      	ldrb	r0, [r0, #3]
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 8011564:	8099      	strh	r1, [r3, #4]
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 8011566:	2101      	movs	r1, #1
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8011568:	8118      	strh	r0, [r3, #8]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 801156a:	80da      	strh	r2, [r3, #6]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 801156c:	7299      	strb	r1, [r3, #10]

  return 0; // no error
}
 801156e:	2000      	movs	r0, #0
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	200001a0 	.word	0x200001a0

08011578 <MIOS32_LCD_Clear>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Clear(void)
{
  // -> forward to app_lcd
  return APP_LCD_Clear();
 8011578:	f008 b810 	b.w	801959c <APP_LCD_Clear>

0801157c <MIOS32_LCD_Init>:
//! Initializes LCD driver
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Init(u32 mode)
{
 801157c:	b513      	push	{r0, r1, r4, lr}
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
 801157e:	4604      	mov	r4, r0
 8011580:	b9f0      	cbnz	r0, 80115c0 <MIOS32_LCD_Init+0x44>
    return -1; // unsupported mode

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();
 8011582:	f7ff ff6f 	bl	8011464 <MIOS32_LCD_ParametersFetchFromBslInfoRange>

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8011586:	4810      	ldr	r0, [pc, #64]	; (80115c8 <MIOS32_LCD_Init+0x4c>)

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 8011588:	4b10      	ldr	r3, [pc, #64]	; (80115cc <MIOS32_LCD_Init+0x50>)

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 801158a:	6801      	ldr	r1, [r0, #0]

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 801158c:	809c      	strh	r4, [r3, #4]

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
  MIOS32_LCD_CursorMapSet(cursor_map);
 801158e:	a801      	add	r0, sp, #4

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 8011590:	9101      	str	r1, [sp, #4]
  MIOS32_LCD_CursorMapSet(cursor_map);
 8011592:	f7ff ffd3 	bl	801153c <MIOS32_LCD_CursorMapSet>
  // the driver is able to modify the default cursor mapping
  // usage example: "dog" LCDs

#if !defined(MIOS32_FAMILY_EMULATION)
  // initial delay - some LCDs need this!
  MIOS32_DELAY_Wait_uS(50000);
 8011596:	f24c 3050 	movw	r0, #50000	; 0xc350
 801159a:	f001 fef1 	bl	8013380 <MIOS32_DELAY_Wait_uS>
#endif

  // call application specific init function
  if( (ret=APP_LCD_Init(mode)) < 0 )
 801159e:	4620      	mov	r0, r4
 80115a0:	f007 fe50 	bl	8019244 <APP_LCD_Init>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	db0d      	blt.n	80115c4 <MIOS32_LCD_Init+0x48>
    return ret;

  // clear screen
  MIOS32_LCD_Clear();
 80115a8:	f7ff ffe6 	bl	8011578 <MIOS32_LCD_Clear>

  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
 80115ac:	4621      	mov	r1, r4
 80115ae:	4620      	mov	r0, r4
 80115b0:	f7ff ff98 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_GCursorSet(0, 0);
 80115b4:	4620      	mov	r0, r4
 80115b6:	4621      	mov	r1, r4
 80115b8:	f7ff ffb6 	bl	8011528 <MIOS32_LCD_GCursorSet>

  return 0; // no error
 80115bc:	4620      	mov	r0, r4
 80115be:	e001      	b.n	80115c4 <MIOS32_LCD_Init+0x48>
{
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80115c0:	f04f 30ff 	mov.w	r0, #4294967295
  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
  MIOS32_LCD_GCursorSet(0, 0);

  return 0; // no error
}
 80115c4:	bd1c      	pop	{r2, r3, r4, pc}
 80115c6:	bf00      	nop
 80115c8:	0801b716 	.word	0x0801b716
 80115cc:	200001a0 	.word	0x200001a0

080115d0 <MIOS32_LCD_PrintChar>:
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 80115d0:	b530      	push	{r4, r5, lr}
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <MIOS32_LCD_PrintChar+0x58>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 80115d4:	f993 1000 	ldrsb.w	r1, [r3]
 80115d8:	2900      	cmp	r1, #0
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 80115da:	b085      	sub	sp, #20
 80115dc:	4605      	mov	r5, r0
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 80115de:	da19      	bge.n	8011614 <MIOS32_LCD_PrintChar+0x44>
    if( !font_bitmap.width )
 80115e0:	4b12      	ldr	r3, [pc, #72]	; (801162c <MIOS32_LCD_PrintChar+0x5c>)
 80115e2:	889a      	ldrh	r2, [r3, #4]
      return -1;    // font not initialized yet!
 80115e4:	f04f 30ff 	mov.w	r0, #4294967295
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
 80115e8:	b1e2      	cbz	r2, 8011624 <MIOS32_LCD_PrintChar+0x54>
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
 80115ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115ee:	ac01      	add	r4, sp, #4
 80115f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80115f4:	88da      	ldrh	r2, [r3, #6]
 80115f6:	891b      	ldrh	r3, [r3, #8]
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
    status = APP_LCD_BitmapPrint(bitmap);
 80115f8:	f8ad 200a 	strh.w	r2, [sp, #10]
  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
 80115fc:	08d1      	lsrs	r1, r2, #3
 80115fe:	4359      	muls	r1, r3
 8011600:	fb05 0001 	mla	r0, r5, r1, r0
    status = APP_LCD_BitmapPrint(bitmap);
 8011604:	9001      	str	r0, [sp, #4]
 8011606:	f8ad 300c 	strh.w	r3, [sp, #12]
 801160a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801160e:	f008 f8ff 	bl	8019810 <APP_LCD_BitmapPrint>
 8011612:	e001      	b.n	8011618 <MIOS32_LCD_PrintChar+0x48>
  } else {
    status = APP_LCD_Data(c);
 8011614:	f007 fd1c 	bl	8019050 <APP_LCD_Data>
  }

  if( status >= 0 ) {
 8011618:	2800      	cmp	r0, #0
 801161a:	db03      	blt.n	8011624 <MIOS32_LCD_PrintChar+0x54>
    // increment cursor
    ++mios32_lcd_column;
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <MIOS32_LCD_PrintChar+0x60>)
 801161e:	881a      	ldrh	r2, [r3, #0]
 8011620:	1c51      	adds	r1, r2, #1
 8011622:	8019      	strh	r1, [r3, #0]
  }

  return status;
}
 8011624:	b005      	add	sp, #20
 8011626:	bd30      	pop	{r4, r5, pc}
 8011628:	200037d6 	.word	0x200037d6
 801162c:	200001a0 	.word	0x200001a0
 8011630:	200037e0 	.word	0x200037e0

08011634 <MIOS32_LCD_PrintString>:
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
{
 8011634:	b538      	push	{r3, r4, r5, lr}
/////////////////////////////////////////////////////////////////////////////
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
 8011636:	1e45      	subs	r5, r0, #1
{
  s32 status = 0;
 8011638:	2400      	movs	r4, #0

  while( *str != '\0' )
 801163a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801163e:	b118      	cbz	r0, 8011648 <MIOS32_LCD_PrintString+0x14>
    status |= MIOS32_LCD_PrintChar(*str++);
 8011640:	f7ff ffc6 	bl	80115d0 <MIOS32_LCD_PrintChar>
 8011644:	4304      	orrs	r4, r0
 8011646:	e7f8      	b.n	801163a <MIOS32_LCD_PrintString+0x6>

  return status;
}
 8011648:	4620      	mov	r0, r4
 801164a:	bd38      	pop	{r3, r4, r5, pc}

0801164c <MIOS32_LCD_PrintBootMessage>:
//! The message is automatically print by the programming model after each reset.<BR>
//! It will also be returned on a SysEx query.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintBootMessage(void)
{
 801164c:	b538      	push	{r3, r4, r5, lr}
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 801164e:	4b0b      	ldr	r3, [pc, #44]	; (801167c <MIOS32_LCD_PrintBootMessage+0x30>)
 8011650:	2400      	movs	r4, #0
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8011652:	4621      	mov	r1, r4
 8011654:	4620      	mov	r0, r4
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8011656:	701c      	strb	r4, [r3, #0]
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8011658:	f7ff ff44 	bl	80114e4 <MIOS32_LCD_CursorSet>
 801165c:	4605      	mov	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 801165e:	4808      	ldr	r0, [pc, #32]	; (8011680 <MIOS32_LCD_PrintBootMessage+0x34>)
 8011660:	f7ff ffe8 	bl	8011634 <MIOS32_LCD_PrintString>
  status |= MIOS32_LCD_CursorSet(0, 1);
 8011664:	2101      	movs	r1, #1
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 8011666:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_CursorSet(0, 1);
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff ff3b 	bl	80114e4 <MIOS32_LCD_CursorSet>
 801166e:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE2);
 8011670:	4804      	ldr	r0, [pc, #16]	; (8011684 <MIOS32_LCD_PrintBootMessage+0x38>)
 8011672:	f7ff ffdf 	bl	8011634 <MIOS32_LCD_PrintString>

  return status;
}
 8011676:	4328      	orrs	r0, r5
 8011678:	bd38      	pop	{r3, r4, r5, pc}
 801167a:	bf00      	nop
 801167c:	200001ac 	.word	0x200001ac
 8011680:	0801b79c 	.word	0x0801b79c
 8011684:	0801b7a7 	.word	0x0801b7a7

08011688 <MIOS32_LCD_PrintFormattedString>:
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 8011688:	b40f      	push	{r0, r1, r2, r3}
 801168a:	b500      	push	{lr}
 801168c:	b093      	sub	sp, #76	; 0x4c
 801168e:	aa14      	add	r2, sp, #80	; 0x50
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
  vsprintf((char *)buffer, format, args);
 8011690:	a802      	add	r0, sp, #8
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 8011692:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
 8011696:	9201      	str	r2, [sp, #4]
  vsprintf((char *)buffer, format, args);
 8011698:	f003 f875 	bl	8014786 <vsprintf>
  return MIOS32_LCD_PrintString(buffer);
 801169c:	a802      	add	r0, sp, #8
 801169e:	f7ff ffc9 	bl	8011634 <MIOS32_LCD_PrintString>
}
 80116a2:	b013      	add	sp, #76	; 0x4c
 80116a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80116a8:	b004      	add	sp, #16
 80116aa:	4770      	bx	lr

080116ac <MIOS32_LCD_BColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_BColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_BColourSet(rgb);
 80116ac:	f008 b8aa 	b.w	8019804 <APP_LCD_BColourSet>

080116b0 <MIOS32_LCD_FColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_FColourSet(rgb);
 80116b0:	f008 b8ab 	b.w	801980a <APP_LCD_FColourSet>

080116b4 <MIOS32_MIDI_Init>:
//! Initializes MIDI layer
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Init(u32 mode)
{
 80116b4:	b538      	push	{r3, r4, r5, lr}
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 80116b6:	4605      	mov	r5, r0
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d145      	bne.n	8011748 <MIOS32_MIDI_Init+0x94>
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 80116bc:	4a24      	ldr	r2, [pc, #144]	; (8011750 <MIOS32_MIDI_Init+0x9c>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 80116be:	4925      	ldr	r1, [pc, #148]	; (8011754 <MIOS32_MIDI_Init+0xa0>)

  // disable callback functions
  direct_rx_callback_func = NULL;
 80116c0:	4c25      	ldr	r4, [pc, #148]	; (8011758 <MIOS32_MIDI_Init+0xa4>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 80116c2:	2310      	movs	r3, #16
 80116c4:	7013      	strb	r3, [r2, #0]
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 80116c6:	700b      	strb	r3, [r1, #0]

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
 80116c8:	4b24      	ldr	r3, [pc, #144]	; (801175c <MIOS32_MIDI_Init+0xa8>)
  sysex_callback_func = NULL;
 80116ca:	4a25      	ldr	r2, [pc, #148]	; (8011760 <MIOS32_MIDI_Init+0xac>)
  timeout_callback_func = NULL;
 80116cc:	4925      	ldr	r1, [pc, #148]	; (8011764 <MIOS32_MIDI_Init+0xb0>)
  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
 80116ce:	6020      	str	r0, [r4, #0]
  direct_tx_callback_func = NULL;
 80116d0:	6018      	str	r0, [r3, #0]
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 80116d2:	4c25      	ldr	r4, [pc, #148]	; (8011768 <MIOS32_MIDI_Init+0xb4>)
  filebrowser_command_callback_func = NULL;
 80116d4:	4b25      	ldr	r3, [pc, #148]	; (801176c <MIOS32_MIDI_Init+0xb8>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
 80116d6:	6010      	str	r0, [r2, #0]
  timeout_callback_func = NULL;
 80116d8:	6008      	str	r0, [r1, #0]
  debug_command_callback_func = NULL;
  filebrowser_command_callback_func = NULL;
 80116da:	6018      	str	r0, [r3, #0]
  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 80116dc:	6020      	str	r0, [r4, #0]
  filebrowser_command_callback_func = NULL;

  // initialize interfaces
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  if( MIOS32_USB_MIDI_Init(0) < 0 )
 80116de:	f002 fa37 	bl	8013b50 <MIOS32_USB_MIDI_Init>
 80116e2:	0fc4      	lsrs	r4, r0, #31
    ret |= (1 << 0);
#endif

#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
 80116e4:	4628      	mov	r0, r5
 80116e6:	f000 fe0d 	bl	8012304 <MIOS32_UART_MIDI_Init>
 80116ea:	2800      	cmp	r0, #0
    ret |= (1 << 1);
 80116ec:	bfb8      	it	lt
 80116ee:	f044 0402 	orrlt.w	r4, r4, #2
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 80116f2:	2000      	movs	r0, #0
 80116f4:	f000 ffa5 	bl	8012642 <MIOS32_IIC_MIDI_Init>
 80116f8:	2800      	cmp	r0, #0
    ret |= (1 << 2);
 80116fa:	bfb8      	it	lt
 80116fc:	f044 0404 	orrlt.w	r4, r4, #4
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 8011700:	2000      	movs	r0, #0
 8011702:	f000 ff93 	bl	801262c <MIOS32_SPI_MIDI_Init>
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
 8011706:	4a1a      	ldr	r2, [pc, #104]	; (8011770 <MIOS32_MIDI_Init+0xbc>)
  sysex_state.ALL = 0;
 8011708:	4b1a      	ldr	r3, [pc, #104]	; (8011774 <MIOS32_MIDI_Init+0xc0>)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
    ret |= (1 << 2);
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 801170a:	2800      	cmp	r0, #0
    ret |= (1 << 3);
 801170c:	bfb8      	it	lt
 801170e:	f044 0408 	orrlt.w	r4, r4, #8
#endif

  last_sysex_port = DEFAULT;
 8011712:	2000      	movs	r0, #0
 8011714:	7010      	strb	r0, [r2, #0]
  sysex_state.ALL = 0;
 8011716:	7819      	ldrb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011718:	4a17      	ldr	r2, [pc, #92]	; (8011778 <MIOS32_MIDI_Init+0xc4>)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
  sysex_state.ALL = 0;
 801171a:	f360 0107 	bfi	r1, r0, #0, #8
 801171e:	7019      	strb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011720:	7010      	strb	r0, [r2, #0]
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *device_id_confirm = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID_CONFIRM;
  u8 *device_id = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID;
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
 8011722:	4816      	ldr	r0, [pc, #88]	; (801177c <MIOS32_MIDI_Init+0xc8>)
 8011724:	7803      	ldrb	r3, [r0, #0]
 8011726:	2b42      	cmp	r3, #66	; 0x42
 8011728:	d104      	bne.n	8011734 <MIOS32_MIDI_Init+0x80>
 801172a:	4915      	ldr	r1, [pc, #84]	; (8011780 <MIOS32_MIDI_Init+0xcc>)
 801172c:	7808      	ldrb	r0, [r1, #0]
 801172e:	0601      	lsls	r1, r0, #24
    sysex_device_id = *device_id;
 8011730:	bf58      	it	pl
 8011732:	7010      	strbpl	r0, [r2, #0]
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8011734:	4b13      	ldr	r3, [pc, #76]	; (8011784 <MIOS32_MIDI_Init+0xd0>)
  sysex_timeout_ctr_flags.ALL = 0;
 8011736:	4914      	ldr	r1, [pc, #80]	; (8011788 <MIOS32_MIDI_Init+0xd4>)
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
    sysex_device_id = *device_id;
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8011738:	2200      	movs	r2, #0
 801173a:	801a      	strh	r2, [r3, #0]
  sysex_timeout_ctr_flags.ALL = 0;
 801173c:	2200      	movs	r2, #0
 801173e:	2300      	movs	r3, #0
 8011740:	e9c1 2300 	strd	r2, r3, [r1]

  return -ret;
 8011744:	4260      	negs	r0, r4
 8011746:	bd38      	pop	{r3, r4, r5, pc}
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
  sysex_timeout_ctr_flags.ALL = 0;

  return -ret;
}
 801174c:	bd38      	pop	{r3, r4, r5, pc}
 801174e:	bf00      	nop
 8011750:	20000005 	.word	0x20000005
 8011754:	20000006 	.word	0x20000006
 8011758:	200001b8 	.word	0x200001b8
 801175c:	200001b0 	.word	0x200001b0
 8011760:	200001e0 	.word	0x200001e0
 8011764:	200001e4 	.word	0x200001e4
 8011768:	200001d0 	.word	0x200001d0
 801176c:	200001bc 	.word	0x200001bc
 8011770:	200001c0 	.word	0x200001c0
 8011774:	200001c8 	.word	0x200001c8
 8011778:	200001c2 	.word	0x200001c2
 801177c:	08003fd0 	.word	0x08003fd0
 8011780:	08003fd1 	.word	0x08003fd1
 8011784:	200001c4 	.word	0x200001c4
 8011788:	200001d8 	.word	0x200001d8

0801178c <MIOS32_MIDI_SendPackage>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 801178c:	f010 0ff0 	tst.w	r0, #240	; 0xf0
//! \param[in] package MIDI package
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
 8011790:	b570      	push	{r4, r5, r6, lr}
 8011792:	4605      	mov	r5, r0
 8011794:	460c      	mov	r4, r1
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8011796:	d104      	bne.n	80117a2 <MIOS32_MIDI_SendPackage+0x16>
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
 8011798:	2801      	cmp	r0, #1
 801179a:	bf0c      	ite	eq
 801179c:	4b1f      	ldreq	r3, [pc, #124]	; (801181c <MIOS32_MIDI_SendPackage+0x90>)
 801179e:	4b20      	ldrne	r3, [pc, #128]	; (8011820 <MIOS32_MIDI_SendPackage+0x94>)
 80117a0:	781d      	ldrb	r5, [r3, #0]

  // insert subport number into package
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 80117a2:	4b20      	ldr	r3, [pc, #128]	; (8011824 <MIOS32_MIDI_SendPackage+0x98>)
 80117a4:	681a      	ldr	r2, [r3, #0]
  if( !(port & 0xf0) ) {
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
  }

  // insert subport number into package
  package.cable = port & 0xf;
 80117a6:	f005 060f 	and.w	r6, r5, #15

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 80117aa:	2a00      	cmp	r2, #0
 80117ac:	d118      	bne.n	80117e0 <MIOS32_MIDI_SendPackage+0x54>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 80117ae:	f005 00f0 	and.w	r0, r5, #240	; 0xf0
 80117b2:	2820      	cmp	r0, #32
 80117b4:	d01c      	beq.n	80117f0 <MIOS32_MIDI_SendPackage+0x64>
 80117b6:	d808      	bhi.n	80117ca <MIOS32_MIDI_SendPackage+0x3e>
 80117b8:	2810      	cmp	r0, #16
 80117ba:	d12b      	bne.n	8011814 <MIOS32_MIDI_SendPackage+0x88>
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 80117bc:	f366 1407 	bfi	r4, r6, #4, #4
 80117c0:	4620      	mov	r0, r4
      
    default:
      // invalid port
      return -1;
  }
}
 80117c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  // branch depending on selected port
  switch( port & 0xf0 ) {
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 80117c6:	f002 bacb 	b.w	8013d60 <MIOS32_USB_MIDI_PackageSend>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 80117ca:	2830      	cmp	r0, #48	; 0x30
 80117cc:	d019      	beq.n	8011802 <MIOS32_MIDI_SendPackage+0x76>
 80117ce:	2850      	cmp	r0, #80	; 0x50
 80117d0:	d120      	bne.n	8011814 <MIOS32_MIDI_SendPackage+0x88>
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 80117d2:	f366 1407 	bfi	r4, r6, #4, #4
 80117d6:	4620      	mov	r0, r4
      
    default:
      // invalid port
      return -1;
  }
}
 80117d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 80117dc:	f000 bf2b 	b.w	8012636 <MIOS32_SPI_MIDI_PackageSend>
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
    s32 status;
    if( (status=direct_tx_callback_func(port, package)) )
 80117e0:	f366 1407 	bfi	r4, r6, #4, #4
 80117e4:	4628      	mov	r0, r5
 80117e6:	4621      	mov	r1, r4
 80117e8:	4790      	blx	r2
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d0df      	beq.n	80117ae <MIOS32_MIDI_SendPackage+0x22>
 80117ee:	bd70      	pop	{r4, r5, r6, pc}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 80117f0:	f366 1407 	bfi	r4, r6, #4, #4
 80117f4:	f005 000f 	and.w	r0, r5, #15
 80117f8:	4621      	mov	r1, r4
      
    default:
      // invalid port
      return -1;
  }
}
 80117fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 80117fe:	f000 be31 	b.w	8012464 <MIOS32_UART_MIDI_PackageSend>
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011802:	f366 1407 	bfi	r4, r6, #4, #4
 8011806:	f005 000f 	and.w	r0, r5, #15
 801180a:	4621      	mov	r1, r4
      
    default:
      // invalid port
      return -1;
  }
}
 801180c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011810:	f000 bf1c 	b.w	801264c <MIOS32_IIC_MIDI_PackageSend>
      return -1; // SPI_MIDI has been disabled
#endif
      
    default:
      // invalid port
      return -1;
 8011814:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8011818:	bd70      	pop	{r4, r5, r6, pc}
 801181a:	bf00      	nop
 801181c:	20000006 	.word	0x20000006
 8011820:	20000005 	.word	0x20000005
 8011824:	200001b0 	.word	0x200001b0

08011828 <MIOS32_MIDI_SendSysEx>:
//! \param[in] count number of bytes
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSysEx(mios32_midi_port_t port, u8 *stream, u32 count)
{
 8011828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801182c:	4680      	mov	r8, r0
 801182e:	460e      	mov	r6, r1
 8011830:	4617      	mov	r7, r2
  u32 offset;
  mios32_midi_package_t package;

  // MEMO: have a look into the project.lss file - gcc optimizes this code pretty well :)

  for(offset=0; offset<count;) {
 8011832:	2400      	movs	r4, #0
 8011834:	42bc      	cmp	r4, r7
 8011836:	d235      	bcs.n	80118a4 <MIOS32_MIDI_SendSysEx+0x7c>
    // package type depends on number of remaining bytes
    switch( count-offset ) {
 8011838:	1b3b      	subs	r3, r7, r4
 801183a:	2b02      	cmp	r3, #2
 801183c:	d00d      	beq.n	801185a <MIOS32_MIDI_SendSysEx+0x32>
 801183e:	2b03      	cmp	r3, #3
 8011840:	d019      	beq.n	8011876 <MIOS32_MIDI_SendSysEx+0x4e>
 8011842:	2b01      	cmp	r3, #1
 8011844:	d119      	bne.n	801187a <MIOS32_MIDI_SendSysEx+0x52>
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
	package.evnt0 = stream[offset++];
 8011846:	5d32      	ldrb	r2, [r6, r4]

  for(offset=0; offset<count;) {
    // package type depends on number of remaining bytes
    switch( count-offset ) {
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
 8011848:	2105      	movs	r1, #5
 801184a:	f361 0503 	bfi	r5, r1, #0, #4
	package.evnt0 = stream[offset++];
 801184e:	f362 250f 	bfi	r5, r2, #8, #8
 8011852:	3401      	adds	r4, #1
	package.evnt1 = 0x00;
 8011854:	f36f 4517 	bfc	r5, #16, #8
 8011858:	e00a      	b.n	8011870 <MIOS32_MIDI_SendSysEx+0x48>
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 801185a:	1931      	adds	r1, r6, r4
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
 801185c:	5d30      	ldrb	r0, [r6, r4]
	package.evnt1 = stream[offset++];
 801185e:	784a      	ldrb	r2, [r1, #1]
	package.evnt0 = stream[offset++];
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
 8011860:	2306      	movs	r3, #6
 8011862:	f363 0503 	bfi	r5, r3, #0, #4
	package.evnt0 = stream[offset++];
 8011866:	f360 250f 	bfi	r5, r0, #8, #8
	package.evnt1 = stream[offset++];
 801186a:	f362 4517 	bfi	r5, r2, #16, #8
 801186e:	3402      	adds	r4, #2
	package.evnt2 = 0x00;
 8011870:	f36f 651f 	bfc	r5, #24, #8
	break;
 8011874:	e00f      	b.n	8011896 <MIOS32_MIDI_SendSysEx+0x6e>
      case 3:
	package.type = 0x7; // SysEx ends with following three bytes. 
 8011876:	2007      	movs	r0, #7
 8011878:	e000      	b.n	801187c <MIOS32_MIDI_SendSysEx+0x54>
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
 801187a:	2004      	movs	r0, #4
 801187c:	f360 0503 	bfi	r5, r0, #0, #4
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8011880:	1930      	adds	r0, r6, r4
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8011882:	5d33      	ldrb	r3, [r6, r4]
	package.evnt1 = stream[offset++];
 8011884:	7841      	ldrb	r1, [r0, #1]
	package.evnt2 = stream[offset++];
 8011886:	7882      	ldrb	r2, [r0, #2]
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8011888:	f363 250f 	bfi	r5, r3, #8, #8
	package.evnt1 = stream[offset++];
 801188c:	f361 4517 	bfi	r5, r1, #16, #8
	package.evnt2 = stream[offset++];
 8011890:	f362 651f 	bfi	r5, r2, #24, #8
 8011894:	3403      	adds	r4, #3
    }

    res=MIOS32_MIDI_SendPackage(port, package);
 8011896:	4640      	mov	r0, r8
 8011898:	4629      	mov	r1, r5
 801189a:	f7ff ff77 	bl	801178c <MIOS32_MIDI_SendPackage>

    // expection? (e.g., port not available)
    if( res < 0 )
 801189e:	2800      	cmp	r0, #0
 80118a0:	dac8      	bge.n	8011834 <MIOS32_MIDI_SendSysEx+0xc>
 80118a2:	e000      	b.n	80118a6 <MIOS32_MIDI_SendSysEx+0x7e>
      return res;
  }

  return 0;
 80118a4:	2000      	movs	r0, #0
}
 80118a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080118ac <MIOS32_MIDI_SYSEX_SendAckStr>:

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
{
 80118ac:	b530      	push	{r4, r5, lr}
 80118ae:	b0a1      	sub	sp, #132	; 0x84
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80118b0:	23f0      	movs	r3, #240	; 0xf0
 80118b2:	f88d 3000 	strb.w	r3, [sp]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80118b6:	4b13      	ldr	r3, [pc, #76]	; (8011904 <MIOS32_MIDI_SYSEX_SendAckStr+0x58>)
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80118b8:	227e      	movs	r2, #126	; 0x7e
 80118ba:	2532      	movs	r5, #50	; 0x32
 80118bc:	f88d 2003 	strb.w	r2, [sp, #3]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80118c0:	781a      	ldrb	r2, [r3, #0]
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80118c2:	f88d 5004 	strb.w	r5, [sp, #4]
 80118c6:	2400      	movs	r4, #0

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 80118c8:	250f      	movs	r5, #15
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80118ca:	f88d 4001 	strb.w	r4, [sp, #1]
 80118ce:	f88d 4002 	strb.w	r4, [sp, #2]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80118d2:	f88d 2005 	strb.w	r2, [sp, #5]

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 80118d6:	f88d 5006 	strb.w	r5, [sp, #6]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 80118da:	ab02      	add	r3, sp, #8

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 80118dc:	5d0d      	ldrb	r5, [r1, r4]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 80118de:	1e5a      	subs	r2, r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 80118e0:	b135      	cbz	r5, 80118f0 <MIOS32_MIDI_SYSEX_SendAckStr+0x44>
 80118e2:	3401      	adds	r4, #1
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 80118e4:	461a      	mov	r2, r3
  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
    *sysex_buffer_ptr++ = str[i];
 80118e6:	f803 5c01 	strb.w	r5, [r3, #-1]
 80118ea:	3301      	adds	r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 80118ec:	2c64      	cmp	r4, #100	; 0x64
 80118ee:	d1f5      	bne.n	80118dc <MIOS32_MIDI_SYSEX_SendAckStr+0x30>
    *sysex_buffer_ptr++ = str[i];

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 80118f0:	21f7      	movs	r1, #247	; 0xf7
 80118f2:	f802 1b01 	strb.w	r1, [r2], #1

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 80118f6:	4669      	mov	r1, sp
 80118f8:	1a52      	subs	r2, r2, r1
 80118fa:	f7ff ff95 	bl	8011828 <MIOS32_MIDI_SendSysEx>
}
 80118fe:	b021      	add	sp, #132	; 0x84
 8011900:	bd30      	pop	{r4, r5, pc}
 8011902:	bf00      	nop
 8011904:	200001c2 	.word	0x200001c2

08011908 <MIOS32_MIDI_SYSEX_SendAck>:
/////////////////////////////////////////////////////////////////////////////
// This function sends a SysEx acknowledge to notify the user about the received command
// expects acknowledge code (e.g. 0x0f for good, 0x0e for error) and additional argument
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAck(mios32_midi_port_t port, u8 ack_code, u8 ack_arg)
{
 8011908:	b500      	push	{lr}
 801190a:	b089      	sub	sp, #36	; 0x24
  u8 sysex_buffer[32]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 801190c:	23f0      	movs	r3, #240	; 0xf0
 801190e:	f88d 3000 	strb.w	r3, [sp]
 8011912:	2300      	movs	r3, #0
 8011914:	f88d 3001 	strb.w	r3, [sp, #1]
 8011918:	f88d 3002 	strb.w	r3, [sp, #2]
 801191c:	237e      	movs	r3, #126	; 0x7e
 801191e:	f88d 3003 	strb.w	r3, [sp, #3]
 8011922:	2332      	movs	r3, #50	; 0x32
 8011924:	f88d 3004 	strb.w	r3, [sp, #4]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011928:	4b08      	ldr	r3, [pc, #32]	; (801194c <MIOS32_MIDI_SYSEX_SendAck+0x44>)

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
 801192a:	f88d 1006 	strb.w	r1, [sp, #6]

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 801192e:	781b      	ldrb	r3, [r3, #0]

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
  *sysex_buffer_ptr++ = ack_arg;
 8011930:	f88d 2007 	strb.w	r2, [sp, #7]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011934:	21f7      	movs	r1, #247	; 0xf7
 8011936:	f88d 1008 	strb.w	r1, [sp, #8]

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 801193a:	2209      	movs	r2, #9
 801193c:	4669      	mov	r1, sp

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 801193e:	f88d 3005 	strb.w	r3, [sp, #5]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011942:	f7ff ff71 	bl	8011828 <MIOS32_MIDI_SendSysEx>
}
 8011946:	b009      	add	sp, #36	; 0x24
 8011948:	bd00      	pop	{pc}
 801194a:	bf00      	nop
 801194c:	200001c2 	.word	0x200001c2

08011950 <MIOS32_MIDI_SendDebugStringHeader>:
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8011954:	2304      	movs	r3, #4
 8011956:	2400      	movs	r4, #0
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011958:	460e      	mov	r6, r1
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 801195a:	f363 0403 	bfi	r4, r3, #0, #4
  package.evnt0 = mios32_midi_sysex_header[0];
 801195e:	f06f 010f 	mvn.w	r1, #15
 8011962:	f361 240f 	bfi	r4, r1, #8, #8
  package.evnt1 = mios32_midi_sysex_header[1];
 8011966:	f36f 4417 	bfc	r4, #16, #8
  package.evnt2 = mios32_midi_sysex_header[2];
 801196a:	f36f 641f 	bfc	r4, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 801196e:	4621      	mov	r1, r4
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011970:	4605      	mov	r5, r0
 8011972:	4690      	mov	r8, r2

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011974:	f7ff ff0a 	bl	801178c <MIOS32_MIDI_SendPackage>

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011978:	4b0e      	ldr	r3, [pc, #56]	; (80119b4 <MIOS32_MIDI_SendDebugStringHeader+0x64>)

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 801197a:	4607      	mov	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 801197c:	207e      	movs	r0, #126	; 0x7e
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 801197e:	7819      	ldrb	r1, [r3, #0]
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
 8011980:	2232      	movs	r2, #50	; 0x32
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8011982:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = mios32_midi_sysex_header[4];
 8011986:	f362 4417 	bfi	r4, r2, #16, #8
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 801198a:	f361 641f 	bfi	r4, r1, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 801198e:	4621      	mov	r1, r4
 8011990:	4628      	mov	r0, r5
 8011992:	f7ff fefb 	bl	801178c <MIOS32_MIDI_SendPackage>
 8011996:	4307      	orrs	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = MIOS32_MIDI_SYSEX_DEBUG;
 8011998:	200d      	movs	r0, #13
 801199a:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = command; // output string, usually 0x40
 801199e:	f366 4417 	bfi	r4, r6, #16, #8
  package.evnt2 = first_byte; // will be 0x00 if string already ends (""), thats ok, MIOS Studio can handle this
 80119a2:	f368 641f 	bfi	r4, r8, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 80119a6:	4628      	mov	r0, r5
 80119a8:	4621      	mov	r1, r4
 80119aa:	f7ff feef 	bl	801178c <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 80119ae:	4338      	orrs	r0, r7
 80119b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b4:	200001c2 	.word	0x200001c2

080119b8 <MIOS32_MIDI_SendDebugStringBody>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringBody(mios32_midi_port_t port, char *str, u32 len)
{
 80119b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119bc:	4681      	mov	r9, r0
 80119be:	4688      	mov	r8, r1
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  if( len > 0 ) {
 80119c0:	4617      	mov	r7, r2
 80119c2:	b352      	cbz	r2, 8011a1a <MIOS32_MIDI_SendDebugStringBody+0x62>
 80119c4:	460d      	mov	r5, r1
 80119c6:	2600      	movs	r6, #0
    int i = 0;
    for(i=0; i<len; i+=3) {
 80119c8:	ebc8 0305 	rsb	r3, r8, r5
 80119cc:	42bb      	cmp	r3, r7
 80119ce:	d225      	bcs.n	8011a1c <MIOS32_MIDI_SendDebugStringBody+0x64>
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
 80119d0:	7829      	ldrb	r1, [r5, #0]
    int i = 0;
    for(i=0; i<len; i+=3) {
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
 80119d2:	2004      	movs	r0, #4
 80119d4:	f360 0403 	bfi	r4, r0, #0, #4
      if( (b=str[i+0]) ) {
 80119d8:	b131      	cbz	r1, 80119e8 <MIOS32_MIDI_SendDebugStringBody+0x30>
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 80119da:	786b      	ldrb	r3, [r5, #1]
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
 80119dc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80119e0:	f362 240f 	bfi	r4, r2, #8, #8
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 80119e4:	b91b      	cbnz	r3, 80119ee <MIOS32_MIDI_SendDebugStringBody+0x36>
 80119e6:	e00d      	b.n	8011a04 <MIOS32_MIDI_SendDebugStringBody+0x4c>

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
      } else {
	package.evnt0 = 0x00;
 80119e8:	f361 240f 	bfi	r4, r1, #8, #8
 80119ec:	e00a      	b.n	8011a04 <MIOS32_MIDI_SendDebugStringBody+0x4c>
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 80119ee:	78a9      	ldrb	r1, [r5, #2]
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
 80119f0:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80119f4:	f360 4417 	bfi	r4, r0, #16, #8
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 80119f8:	b131      	cbz	r1, 8011a08 <MIOS32_MIDI_SendDebugStringBody+0x50>
	package.evnt2 = b & 0x7f;
 80119fa:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80119fe:	f362 641f 	bfi	r4, r2, #24, #8
 8011a02:	e003      	b.n	8011a0c <MIOS32_MIDI_SendDebugStringBody+0x54>
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
      } else {
	package.evnt1 = 0x00;
 8011a04:	f36f 4417 	bfc	r4, #16, #8
      }

      if( !terminated && (b=str[i+2]) ) {
	package.evnt2 = b & 0x7f;
      } else {
	package.evnt2 = 0x00;
 8011a08:	f36f 641f 	bfc	r4, #24, #8
	terminated = 1;
      }

      status |= MIOS32_MIDI_SendPackage(port, package);
 8011a0c:	4648      	mov	r0, r9
 8011a0e:	4621      	mov	r1, r4
 8011a10:	f7ff febc 	bl	801178c <MIOS32_MIDI_SendPackage>
 8011a14:	3503      	adds	r5, #3
 8011a16:	4306      	orrs	r6, r0
 8011a18:	e7d6      	b.n	80119c8 <MIOS32_MIDI_SendDebugStringBody+0x10>
{
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
 8011a1a:	4616      	mov	r6, r2
    }
  }

  return status;
#endif
}
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011a22 <MIOS32_MIDI_SendDebugStringFooter>:
//! Example: see MIOS32_MIDI_SendDebugStringHeader
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringFooter(mios32_midi_port_t port)
{
 8011a22:	b508      	push	{r3, lr}
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  package.type = 0x5; // SysEx ends with following single byte. 
 8011a24:	2100      	movs	r1, #0
 8011a26:	2305      	movs	r3, #5
 8011a28:	f363 0103 	bfi	r1, r3, #0, #4
  package.evnt0 = 0xf7;
 8011a2c:	f06f 0208 	mvn.w	r2, #8
 8011a30:	f362 210f 	bfi	r1, r2, #8, #8
  package.evnt1 = 0x00;
  package.evnt2 = 0x00;
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011a34:	b289      	uxth	r1, r1
 8011a36:	f7ff fea9 	bl	801178c <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8011a3a:	bd08      	pop	{r3, pc}

08011a3c <MIOS32_MIDI_SendDebugString>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugString(const char *str)
{
 8011a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a3e:	4605      	mov	r5, r0
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011a40:	f009 fc31 	bl	801b2a6 <strlen>

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011a44:	4f0a      	ldr	r7, [pc, #40]	; (8011a70 <MIOS32_MIDI_SendDebugString+0x34>)
 8011a46:	782a      	ldrb	r2, [r5, #0]
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011a48:	4606      	mov	r6, r0

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011a4a:	2140      	movs	r1, #64	; 0x40
 8011a4c:	7838      	ldrb	r0, [r7, #0]
 8011a4e:	f7ff ff7f 	bl	8011950 <MIOS32_MIDI_SendDebugStringHeader>
  if( len >= 2 )
 8011a52:	2e01      	cmp	r6, #1
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011a54:	4604      	mov	r4, r0
  if( len >= 2 )
 8011a56:	d905      	bls.n	8011a64 <MIOS32_MIDI_SendDebugString+0x28>
    status |= MIOS32_MIDI_SendDebugStringBody(debug_port, (char *)&str[1], len-1);
 8011a58:	7838      	ldrb	r0, [r7, #0]
 8011a5a:	1c69      	adds	r1, r5, #1
 8011a5c:	1e72      	subs	r2, r6, #1
 8011a5e:	f7ff ffab 	bl	80119b8 <MIOS32_MIDI_SendDebugStringBody>
 8011a62:	4304      	orrs	r4, r0
  status |= MIOS32_MIDI_SendDebugStringFooter(debug_port);
 8011a64:	4b02      	ldr	r3, [pc, #8]	; (8011a70 <MIOS32_MIDI_SendDebugString+0x34>)
 8011a66:	7818      	ldrb	r0, [r3, #0]
 8011a68:	f7ff ffdb 	bl	8011a22 <MIOS32_MIDI_SendDebugStringFooter>

  return status;
#endif
}
 8011a6c:	4320      	orrs	r0, r4
 8011a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a70:	20000006 	.word	0x20000006

08011a74 <MIOS32_MIDI_SendDebugMessage>:
//! \param[in] *format zero-terminated format string - 128 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugMessage(const char *format, ...)
{
 8011a74:	b40f      	push	{r0, r1, r2, r3}
 8011a76:	b530      	push	{r4, r5, lr}
 8011a78:	b0a3      	sub	sp, #140	; 0x8c
 8011a7a:	9d26      	ldr	r5, [sp, #152]	; 0x98

  // failsave: if format string is longer than 100 chars, break here
  // note that this is a weak protection: if %s is used, or a lot of other format tokens,
  // the resulting string could still lead to a buffer overflow
  // other the other hand we don't want to allocate too many byte for buffer[] to save stack
  if( strlen(format) > 100 ) {
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f009 fc12 	bl	801b2a6 <strlen>
 8011a82:	2864      	cmp	r0, #100	; 0x64
 8011a84:	d901      	bls.n	8011a8a <MIOS32_MIDI_SendDebugMessage+0x16>
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
 8011a86:	480e      	ldr	r0, [pc, #56]	; (8011ac0 <MIOS32_MIDI_SendDebugMessage+0x4c>)
 8011a88:	e013      	b.n	8011ab2 <MIOS32_MIDI_SendDebugMessage+0x3e>
  } else {
    // transform formatted string into string
    va_start(args, format);
    vsprintf(str, format, args);
 8011a8a:	ac02      	add	r4, sp, #8
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011a8c:	aa27      	add	r2, sp, #156	; 0x9c
    vsprintf(str, format, args);
 8011a8e:	4629      	mov	r1, r5
 8011a90:	4620      	mov	r0, r4
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011a92:	9201      	str	r2, [sp, #4]
    vsprintf(str, format, args);
 8011a94:	f002 fe77 	bl	8014786 <vsprintf>
  }

  u32 len = strlen(str);
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f009 fc04 	bl	801b2a6 <strlen>
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	4283      	cmp	r3, r0
 8011aa2:	d005      	beq.n	8011ab0 <MIOS32_MIDI_SendDebugMessage+0x3c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
 8011aa4:	5ce2      	ldrb	r2, [r4, r3]
 8011aa6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8011aaa:	54e1      	strb	r1, [r4, r3]
  }

  u32 len = strlen(str);
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011aac:	3301      	adds	r3, #1
 8011aae:	e7f7      	b.n	8011aa0 <MIOS32_MIDI_SendDebugMessage+0x2c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
  }

  return MIOS32_MIDI_SendDebugString(str);
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f7ff ffc3 	bl	8011a3c <MIOS32_MIDI_SendDebugString>
#endif
}
 8011ab6:	b023      	add	sp, #140	; 0x8c
 8011ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011abc:	b004      	add	sp, #16
 8011abe:	4770      	bx	lr
 8011ac0:	0801b7f4 	.word	0x0801b7f4

08011ac4 <MIOS32_MIDI_TimeOut>:

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011ac4:	b510      	push	{r4, lr}
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8011ac6:	4b0e      	ldr	r3, [pc, #56]	; (8011b00 <MIOS32_MIDI_TimeOut+0x3c>)
 8011ac8:	781a      	ldrb	r2, [r3, #0]
 8011aca:	f002 0108 	and.w	r1, r2, #8

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011ace:	4604      	mov	r4, r0
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8011ad0:	b2c8      	uxtb	r0, r1
 8011ad2:	b148      	cbz	r0, 8011ae8 <MIOS32_MIDI_TimeOut+0x24>
 8011ad4:	490b      	ldr	r1, [pc, #44]	; (8011b04 <MIOS32_MIDI_TimeOut+0x40>)
 8011ad6:	7808      	ldrb	r0, [r1, #0]
 8011ad8:	42a0      	cmp	r0, r4
 8011ada:	d105      	bne.n	8011ae8 <MIOS32_MIDI_TimeOut+0x24>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011adc:	f36f 0207 	bfc	r2, #0, #8
 8011ae0:	701a      	strb	r2, [r3, #0]
  sysex_cmd = 0;
 8011ae2:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <MIOS32_MIDI_TimeOut+0x44>)
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	701a      	strb	r2, [r3, #0]
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
    MIOS32_MIDI_SYSEX_CmdFinished();

  // optional hook to application
  if( timeout_callback_func != NULL )
 8011ae8:	4908      	ldr	r1, [pc, #32]	; (8011b0c <MIOS32_MIDI_TimeOut+0x48>)
 8011aea:	680a      	ldr	r2, [r1, #0]
 8011aec:	b10a      	cbz	r2, 8011af2 <MIOS32_MIDI_TimeOut+0x2e>
    timeout_callback_func(port);
 8011aee:	4620      	mov	r0, r4
 8011af0:	4790      	blx	r2

#ifndef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // this debug message should always be active, so that common users are informed about the exception
  MIOS32_MIDI_SendDebugMessage("[MIOS32_MIDI_Receive_Handler] Timeout on port 0x%02x\n", port);
 8011af2:	4621      	mov	r1, r4
 8011af4:	4806      	ldr	r0, [pc, #24]	; (8011b10 <MIOS32_MIDI_TimeOut+0x4c>)
 8011af6:	f7ff ffbd 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
#endif

  return 0; // no error
}
 8011afa:	2000      	movs	r0, #0
 8011afc:	bd10      	pop	{r4, pc}
 8011afe:	bf00      	nop
 8011b00:	200001c8 	.word	0x200001c8
 8011b04:	200001c0 	.word	0x200001c0
 8011b08:	200001b4 	.word	0x200001b4
 8011b0c:	200001e4 	.word	0x200001e4
 8011b10:	0801b847 	.word	0x0801b847

08011b14 <MIOS32_MIDI_Periodic_mS>:
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Periodic_mS(void)
{
 8011b14:	b510      	push	{r4, lr}
  s32 status = 0;

#ifndef MIOS32_DONT_USE_USB_MIDI
  status |= MIOS32_USB_MIDI_Periodic_mS();
 8011b16:	f002 f965 	bl	8013de4 <MIOS32_USB_MIDI_Periodic_mS>
 8011b1a:	4604      	mov	r4, r0
#endif

#ifndef MIOS32_DONT_USE_UART_MIDI
  status |= MIOS32_UART_MIDI_Periodic_mS();
 8011b1c:	f000 fc18 	bl	8012350 <MIOS32_UART_MIDI_Periodic_mS>
 8011b20:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
 8011b22:	f000 fd91 	bl	8012648 <MIOS32_IIC_MIDI_Periodic_mS>
 8011b26:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011b28:	f000 fd83 	bl	8012632 <MIOS32_SPI_MIDI_Periodic_mS>
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011b2c:	4b05      	ldr	r3, [pc, #20]	; (8011b44 <MIOS32_MIDI_Periodic_mS+0x30>)
 8011b2e:	881a      	ldrh	r2, [r3, #0]
 8011b30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b34:	428a      	cmp	r2, r1
#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011b36:	ea44 0000 	orr.w	r0, r4, r0
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011b3a:	d001      	beq.n	8011b40 <MIOS32_MIDI_Periodic_mS+0x2c>
    ++sysex_timeout_ctr;
 8011b3c:	3201      	adds	r2, #1
 8011b3e:	801a      	strh	r2, [r3, #0]

  return status;
}
 8011b40:	bd10      	pop	{r4, pc}
 8011b42:	bf00      	nop
 8011b44:	200001c4 	.word	0x200001c4

08011b48 <MIOS32_MIDI_SendByteToRxCallback>:
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_byte received MIDI byte
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendByteToRxCallback(mios32_midi_port_t port, u8 midi_byte)
{
 8011b48:	b508      	push	{r3, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL )
 8011b4a:	4b03      	ldr	r3, [pc, #12]	; (8011b58 <MIOS32_MIDI_SendByteToRxCallback+0x10>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	b10a      	cbz	r2, 8011b54 <MIOS32_MIDI_SendByteToRxCallback+0xc>
    return direct_rx_callback_func(port, midi_byte);
 8011b50:	4790      	blx	r2
 8011b52:	bd08      	pop	{r3, pc}
  return 0; // no error
 8011b54:	4610      	mov	r0, r2
}
 8011b56:	bd08      	pop	{r3, pc}
 8011b58:	200001b8 	.word	0x200001b8

08011b5c <MIOS32_MIDI_SendPackageToRxCallback>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011b5c:	4b11      	ldr	r3, [pc, #68]	; (8011ba4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011b60:	681c      	ldr	r4, [r3, #0]
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011b62:	4607      	mov	r7, r0
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011b64:	b1e4      	cbz	r4, 8011ba0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011b66:	f3c1 6407 	ubfx	r4, r1, #24, #8
 8011b6a:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8011b6e:	f3c1 4207 	ubfx	r2, r1, #16, #8
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011b72:	4d0d      	ldr	r5, [pc, #52]	; (8011ba8 <MIOS32_MIDI_SendPackageToRxCallback+0x4c>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011b74:	f88d 4006 	strb.w	r4, [sp, #6]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011b78:	f001 010f 	and.w	r1, r1, #15
    int i;
    s32 status = 0;
 8011b7c:	2400      	movs	r4, #0
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011b7e:	5c6e      	ldrb	r6, [r5, r1]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011b80:	f88d 0004 	strb.w	r0, [sp, #4]
 8011b84:	f88d 2005 	strb.w	r2, [sp, #5]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011b88:	4625      	mov	r5, r4
 8011b8a:	42b5      	cmp	r5, r6
 8011b8c:	da08      	bge.n	8011ba0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
      status |= direct_rx_callback_func(port, buffer[i]);
 8011b8e:	aa01      	add	r2, sp, #4
 8011b90:	4b04      	ldr	r3, [pc, #16]	; (8011ba4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
 8011b92:	5d51      	ldrb	r1, [r2, r5]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	4638      	mov	r0, r7
 8011b98:	4798      	blx	r3
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011b9a:	3501      	adds	r5, #1
      status |= direct_rx_callback_func(port, buffer[i]);
 8011b9c:	4304      	orrs	r4, r0
 8011b9e:	e7f4      	b.n	8011b8a <MIOS32_MIDI_SendPackageToRxCallback+0x2e>
    return status;
  }
  return 0; // no error
}
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ba4:	200001b8 	.word	0x200001b8
 8011ba8:	0801b7e4 	.word	0x0801b7e4

08011bac <MIOS32_MIDI_DebugPortSet>:
//! \param[in] port MIDI port (USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
 8011bac:	2801      	cmp	r0, #1
 8011bae:	d003      	beq.n	8011bb8 <MIOS32_MIDI_DebugPortSet+0xc>
    return -1;

  debug_port = port;
 8011bb0:	4b03      	ldr	r3, [pc, #12]	; (8011bc0 <MIOS32_MIDI_DebugPortSet+0x14>)
 8011bb2:	7018      	strb	r0, [r3, #0]
 
  return 0; // no error
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	4770      	bx	lr
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
    return -1;
 8011bb8:	f04f 30ff 	mov.w	r0, #4294967295

  debug_port = port;
 
  return 0; // no error
}
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	20000006 	.word	0x20000006

08011bc4 <MIOS32_MIDI_SYSEX_Cmd>:

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011bc4:	b530      	push	{r4, r5, lr}
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	4611      	mov	r1, r2
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011bca:	4a5a      	ldr	r2, [pc, #360]	; (8011d34 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
 8011bcc:	7815      	ldrb	r5, [r2, #0]
 8011bce:	2d0d      	cmp	r5, #13

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011bd0:	b08b      	sub	sp, #44	; 0x2c
 8011bd2:	4604      	mov	r4, r0
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011bd4:	d057      	beq.n	8011c86 <MIOS32_MIDI_SYSEX_Cmd+0xc2>
 8011bd6:	d801      	bhi.n	8011bdc <MIOS32_MIDI_SYSEX_Cmd+0x18>
 8011bd8:	b13d      	cbz	r5, 8011bea <MIOS32_MIDI_SYSEX_Cmd+0x26>
 8011bda:	e09a      	b.n	8011d12 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8011bdc:	2d0e      	cmp	r5, #14
 8011bde:	f000 80a5 	beq.w	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8011be2:	2d0f      	cmp	r5, #15
 8011be4:	f040 8095 	bne.w	8011d12 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8011be8:	e087      	b.n	8011cfa <MIOS32_MIDI_SYSEX_Cmd+0x136>
 8011bea:	4a53      	ldr	r2, [pc, #332]	; (8011d38 <MIOS32_MIDI_SYSEX_Cmd+0x174>)
static s32 MIOS32_MIDI_SYSEX_Cmd_Query(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  static u8 query_req = 0;
  char str_buffer[40];

  switch( cmd_state ) {
 8011bec:	b11b      	cbz	r3, 8011bf6 <MIOS32_MIDI_SYSEX_Cmd+0x32>
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d103      	bne.n	8011bfa <MIOS32_MIDI_SYSEX_Cmd+0x36>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
 8011bf2:	7011      	strb	r1, [r2, #0]
 8011bf4:	e09a      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
  char str_buffer[40];

  switch( cmd_state ) {

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
 8011bf6:	7013      	strb	r3, [r2, #0]
 8011bf8:	e098      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011bfa:	7811      	ldrb	r1, [r2, #0]
 8011bfc:	2905      	cmp	r1, #5
 8011bfe:	d028      	beq.n	8011c52 <MIOS32_MIDI_SYSEX_Cmd+0x8e>
 8011c00:	d810      	bhi.n	8011c24 <MIOS32_MIDI_SYSEX_Cmd+0x60>
 8011c02:	2902      	cmp	r1, #2
 8011c04:	d01f      	beq.n	8011c46 <MIOS32_MIDI_SYSEX_Cmd+0x82>
 8011c06:	d803      	bhi.n	8011c10 <MIOS32_MIDI_SYSEX_Cmd+0x4c>
 8011c08:	2901      	cmp	r1, #1
 8011c0a:	d138      	bne.n	8011c7e <MIOS32_MIDI_SYSEX_Cmd+0xba>
	      MIOS32_MIDI_SendActiveSense(port);
	      MIOS32_USB_MIDI_Periodic_mS();
	    }
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
 8011c0c:	494b      	ldr	r1, [pc, #300]	; (8011d3c <MIOS32_MIDI_SYSEX_Cmd+0x178>)
 8011c0e:	e01b      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011c10:	2903      	cmp	r1, #3
 8011c12:	d01c      	beq.n	8011c4e <MIOS32_MIDI_SYSEX_Cmd+0x8a>
 8011c14:	2904      	cmp	r1, #4
 8011c16:	d132      	bne.n	8011c7e <MIOS32_MIDI_SYSEX_Cmd+0xba>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
	  break;
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
 8011c18:	f000 fd90 	bl	801273c <MIOS32_SYS_ChipIDGet>
 8011c1c:	4948      	ldr	r1, [pc, #288]	; (8011d40 <MIOS32_MIDI_SYSEX_Cmd+0x17c>)
 8011c1e:	4602      	mov	r2, r0
 8011c20:	4668      	mov	r0, sp
 8011c22:	e023      	b.n	8011c6c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011c24:	2908      	cmp	r1, #8
 8011c26:	d026      	beq.n	8011c76 <MIOS32_MIDI_SYSEX_Cmd+0xb2>
 8011c28:	d806      	bhi.n	8011c38 <MIOS32_MIDI_SYSEX_Cmd+0x74>
 8011c2a:	2906      	cmp	r1, #6
 8011c2c:	d019      	beq.n	8011c62 <MIOS32_MIDI_SYSEX_Cmd+0x9e>
 8011c2e:	2907      	cmp	r1, #7
 8011c30:	d125      	bne.n	8011c7e <MIOS32_MIDI_SYSEX_Cmd+0xba>
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011c32:	f000 fd91 	bl	8012758 <MIOS32_SYS_RAMSizeGet>
 8011c36:	e016      	b.n	8011c66 <MIOS32_MIDI_SYSEX_Cmd+0xa2>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011c38:	2909      	cmp	r1, #9
 8011c3a:	d01e      	beq.n	8011c7a <MIOS32_MIDI_SYSEX_Cmd+0xb6>
 8011c3c:	297f      	cmp	r1, #127	; 0x7f
 8011c3e:	d11e      	bne.n	8011c7e <MIOS32_MIDI_SYSEX_Cmd+0xba>
#if MIOS32_MIDI_BSL_ENHANCEMENTS
	  // release halt state (or sending upload request) instead of reseting the core
	  BSL_SYSEX_ReleaseHaltState();
#else
	  // reset core (this will send an upload request)
	  MIOS32_SYS_Reset();
 8011c40:	f000 fd26 	bl	8012690 <MIOS32_SYS_Reset>
 8011c44:	e072      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
	  break;
        case 0x02: // Board
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_BOARD_STR);
 8011c46:	493f      	ldr	r1, [pc, #252]	; (8011d44 <MIOS32_MIDI_SYSEX_Cmd+0x180>)
 8011c48:	f7ff fe30 	bl	80118ac <MIOS32_MIDI_SYSEX_SendAckStr>
 8011c4c:	e06e      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
 8011c4e:	493e      	ldr	r1, [pc, #248]	; (8011d48 <MIOS32_MIDI_SYSEX_Cmd+0x184>)
 8011c50:	e7fa      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011c52:	4668      	mov	r0, sp
 8011c54:	f000 fd84 	bl	8012760 <MIOS32_SYS_SerialNumberGet>
 8011c58:	2800      	cmp	r0, #0
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011c5a:	4620      	mov	r0, r4
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011c5c:	da09      	bge.n	8011c72 <MIOS32_MIDI_SYSEX_Cmd+0xae>
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  else
	    MIOS32_MIDI_SYSEX_SendAckStr(port, "?");
 8011c5e:	493b      	ldr	r1, [pc, #236]	; (8011d4c <MIOS32_MIDI_SYSEX_Cmd+0x188>)
 8011c60:	e7f2      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
 8011c62:	f000 fd71 	bl	8012748 <MIOS32_SYS_FlashSizeGet>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011c66:	493a      	ldr	r1, [pc, #232]	; (8011d50 <MIOS32_MIDI_SYSEX_Cmd+0x18c>)
 8011c68:	4602      	mov	r2, r0
 8011c6a:	4668      	mov	r0, sp
 8011c6c:	f002 fd7c 	bl	8014768 <sprintf>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011c70:	4620      	mov	r0, r4
 8011c72:	4669      	mov	r1, sp
 8011c74:	e7e8      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x08: // Application Name Line #1
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE1);
 8011c76:	4937      	ldr	r1, [pc, #220]	; (8011d54 <MIOS32_MIDI_SYSEX_Cmd+0x190>)
 8011c78:	e7e6      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x09: // Application Name Line #2
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE2);
 8011c7a:	4937      	ldr	r1, [pc, #220]	; (8011d58 <MIOS32_MIDI_SYSEX_Cmd+0x194>)
 8011c7c:	e7e4      	b.n	8011c48 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  // but other core families could contain an empty stumb!
#endif
	  break;
        default: 
	  // unknown query
	  MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNKNOWN_QUERY);
 8011c7e:	4620      	mov	r0, r4
 8011c80:	210e      	movs	r1, #14
 8011c82:	220d      	movs	r2, #13
 8011c84:	e042      	b.n	8011d0c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 8011c86:	4d35      	ldr	r5, [pc, #212]	; (8011d5c <MIOS32_MIDI_SYSEX_Cmd+0x198>)
  if( cmd_state == MIOS32_MIDI_SYSEX_CMD_STATE_END )
    MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
#else
  static u8 debug_req = 0xff;

  switch( cmd_state ) {
 8011c88:	b113      	cbz	r3, 8011c90 <MIOS32_MIDI_SYSEX_Cmd+0xcc>
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d115      	bne.n	8011cba <MIOS32_MIDI_SYSEX_Cmd+0xf6>
 8011c8e:	e002      	b.n	8011c96 <MIOS32_MIDI_SYSEX_Cmd+0xd2>

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      debug_req = 0xff;
 8011c90:	21ff      	movs	r1, #255	; 0xff
 8011c92:	7029      	strb	r1, [r5, #0]
 8011c94:	e04a      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      if( debug_req == 0xff ) {
 8011c96:	782b      	ldrb	r3, [r5, #0]
 8011c98:	2bff      	cmp	r3, #255	; 0xff
 8011c9a:	d101      	bne.n	8011ca0 <MIOS32_MIDI_SYSEX_Cmd+0xdc>
	debug_req = midi_in;
 8011c9c:	7029      	strb	r1, [r5, #0]
 8011c9e:	e045      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      } else {
	switch( debug_req ) {
 8011ca0:	b11b      	cbz	r3, 8011caa <MIOS32_MIDI_SYSEX_Cmd+0xe6>
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d142      	bne.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	    if( debug_command_callback_func != NULL )
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011ca6:	4a2e      	ldr	r2, [pc, #184]	; (8011d60 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011ca8:	e000      	b.n	8011cac <MIOS32_MIDI_SYSEX_Cmd+0xe8>
      if( debug_req == 0xff ) {
	debug_req = midi_in;
      } else {
	switch( debug_req ) {
	  case 0x00: // input string
	    if( debug_command_callback_func != NULL )
 8011caa:	4a2e      	ldr	r2, [pc, #184]	; (8011d64 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011cac:	6813      	ldr	r3, [r2, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d03c      	beq.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	      filebrowser_command_callback_func(last_sysex_port, (char)midi_in);
 8011cb2:	482d      	ldr	r0, [pc, #180]	; (8011d68 <MIOS32_MIDI_SYSEX_Cmd+0x1a4>)
 8011cb4:	7800      	ldrb	r0, [r0, #0]
 8011cb6:	4798      	blx	r3
 8011cb8:	e038      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}
      }
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      if( debug_req == 0x00 ) {
 8011cba:	782a      	ldrb	r2, [r5, #0]
 8011cbc:	b9a2      	cbnz	r2, 8011ce8 <MIOS32_MIDI_SYSEX_Cmd+0x124>
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011cbe:	210f      	movs	r1, #15
 8011cc0:	f7ff fe22 	bl	8011908 <MIOS32_MIDI_SYSEX_SendAck>

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
 8011cc4:	7829      	ldrb	r1, [r5, #0]
 8011cc6:	2900      	cmp	r1, #0
 8011cc8:	d130      	bne.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8011cca:	4a26      	ldr	r2, [pc, #152]	; (8011d64 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
 8011ccc:	6810      	ldr	r0, [r2, #0]
 8011cce:	bb68      	cbnz	r0, 8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011cd0:	4d26      	ldr	r5, [pc, #152]	; (8011d6c <MIOS32_MIDI_SYSEX_Cmd+0x1a8>)
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011cd2:	4620      	mov	r0, r4
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011cd4:	782d      	ldrb	r5, [r5, #0]
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011cd6:	f7ff ff69 	bl	8011bac <MIOS32_MIDI_DebugPortSet>
	  MIOS32_MIDI_SendDebugString("[MIOS32_MIDI_SYSEX_Cmd_Debug] command handler not implemented by application\n");
 8011cda:	4825      	ldr	r0, [pc, #148]	; (8011d70 <MIOS32_MIDI_SYSEX_Cmd+0x1ac>)
 8011cdc:	f7ff feae 	bl	8011a3c <MIOS32_MIDI_SendDebugString>
	  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	f7ff ff63 	bl	8011bac <MIOS32_MIDI_DebugPortSet>
 8011ce6:	e021      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}

      } else if( debug_req == 0x01 && filebrowser_command_callback_func != NULL ) {
 8011ce8:	2a01      	cmp	r2, #1
 8011cea:	d102      	bne.n	8011cf2 <MIOS32_MIDI_SYSEX_Cmd+0x12e>
 8011cec:	481c      	ldr	r0, [pc, #112]	; (8011d60 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011cee:	6803      	ldr	r3, [r0, #0]
 8011cf0:	b9e3      	cbnz	r3, 8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	// we expect that the filebrowser handler sends back a string
      } else {
	// send disacknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	210e      	movs	r1, #14
 8011cf6:	2210      	movs	r2, #16
 8011cf8:	e008      	b.n	8011d0c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 8011cfa:	4a1e      	ldr	r2, [pc, #120]	; (8011d74 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
/////////////////////////////////////////////////////////////////////////////
// Command 0F: Ping (just send back acknowledge if no additional byte has been received)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd_Ping(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  switch( cmd_state ) {
 8011cfc:	b10b      	cbz	r3, 8011d02 <MIOS32_MIDI_SYSEX_Cmd+0x13e>
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d101      	bne.n	8011d06 <MIOS32_MIDI_SYSEX_Cmd+0x142>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      sysex_state.ping.PING_BYTE_RECEIVED = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      sysex_state.ping.PING_BYTE_RECEIVED = 1;
 8011d02:	6053      	str	r3, [r2, #4]
 8011d04:	e012      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      // TODO: send 0xf7 if merger enabled

      // send acknowledge if no additional byte has been received
      // to avoid feedback loop if two cores are directly connected
      if( !sysex_state.ping.PING_BYTE_RECEIVED )
 8011d06:	6852      	ldr	r2, [r2, #4]
 8011d08:	b982      	cbnz	r2, 8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	f7ff fdfc 	bl	8011908 <MIOS32_MIDI_SYSEX_SendAck>
 8011d10:	e00c      	b.n	8011d2c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      MIOS32_MIDI_SYSEX_Cmd_Ping(port, cmd_state, midi_in);
      break;
    default:
      // unknown command
      // TODO: send 0xf7 if merger enabled
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
 8011d12:	210e      	movs	r1, #14
 8011d14:	460a      	mov	r2, r1
 8011d16:	4620      	mov	r0, r4
 8011d18:	f7ff fdf6 	bl	8011908 <MIOS32_MIDI_SYSEX_SendAck>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d1c:	4815      	ldr	r0, [pc, #84]	; (8011d74 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
  sysex_cmd = 0;
 8011d1e:	4905      	ldr	r1, [pc, #20]	; (8011d34 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d20:	7803      	ldrb	r3, [r0, #0]
  sysex_cmd = 0;
 8011d22:	2200      	movs	r2, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d24:	f36f 0307 	bfc	r3, #0, #8
 8011d28:	7003      	strb	r3, [r0, #0]
  sysex_cmd = 0;
 8011d2a:	700a      	strb	r2, [r1, #0]
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
      MIOS32_MIDI_SYSEX_CmdFinished();      
  }

  return 0; // no error
}
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	b00b      	add	sp, #44	; 0x2c
 8011d30:	bd30      	pop	{r4, r5, pc}
 8011d32:	bf00      	nop
 8011d34:	200001b4 	.word	0x200001b4
 8011d38:	200001c1 	.word	0x200001c1
 8011d3c:	0801b88d 	.word	0x0801b88d
 8011d40:	0801b70c 	.word	0x0801b70c
 8011d44:	0801b894 	.word	0x0801b894
 8011d48:	0801b8a8 	.word	0x0801b8a8
 8011d4c:	0801b8b2 	.word	0x0801b8b2
 8011d50:	0801b8b4 	.word	0x0801b8b4
 8011d54:	0801b79c 	.word	0x0801b79c
 8011d58:	0801b7a7 	.word	0x0801b7a7
 8011d5c:	20000004 	.word	0x20000004
 8011d60:	200001bc 	.word	0x200001bc
 8011d64:	200001d0 	.word	0x200001d0
 8011d68:	200001c0 	.word	0x200001c0
 8011d6c:	20000006 	.word	0x20000006
 8011d70:	0801b8b7 	.word	0x0801b8b7
 8011d74:	200001c8 	.word	0x200001c8

08011d78 <MIOS32_MIDI_SYSEX_Parser>:
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011d78:	29f7      	cmp	r1, #247	; 0xf7

/////////////////////////////////////////////////////////////////////////////
// This function parses an incoming sysex stream for MIOS32 commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
 8011d7a:	b510      	push	{r4, lr}
 8011d7c:	460a      	mov	r2, r1
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011d7e:	d85a      	bhi.n	8011e36 <MIOS32_MIDI_SYSEX_Parser+0xbe>
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
 8011d80:	4b2e      	ldr	r3, [pc, #184]	; (8011e3c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011d82:	7819      	ldrb	r1, [r3, #0]
 8011d84:	f001 0308 	and.w	r3, r1, #8
 8011d88:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8011d8c:	b11b      	cbz	r3, 8011d96 <MIOS32_MIDI_SYSEX_Parser+0x1e>
 8011d8e:	4b2c      	ldr	r3, [pc, #176]	; (8011e40 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	4283      	cmp	r3, r0
 8011d94:	d14c      	bne.n	8011e30 <MIOS32_MIDI_SYSEX_Parser+0xb8>
  // USB upload is only allowed via USB0
  // this covers the scenario where other USB1..7 ports are used for MIDI Port forwarding, and a MIOS8 core
  // is connected to one of these ports
  // MIOS Studio reports "Detected MIOS8 and MIOS32 response - selection not supported yet!" in this case
  // By ignoring >= USB1 <= USB7 we have at least a workaround which works (for example) for MIDIbox LC
  if( port >= USB1 && port <= USB7 )
 8011d96:	f1a0 0311 	sub.w	r3, r0, #17
 8011d9a:	2b06      	cmp	r3, #6
 8011d9c:	d948      	bls.n	8011e30 <MIOS32_MIDI_SYSEX_Parser+0xb8>
    return -1;

  last_sysex_port = port;
 8011d9e:	4b28      	ldr	r3, [pc, #160]	; (8011e40 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011da0:	7018      	strb	r0, [r3, #0]

  // branch depending on state
  if( !sysex_state.general.MY_SYSEX ) {
 8011da2:	bb04      	cbnz	r4, 8011de6 <MIOS32_MIDI_SYSEX_Parser+0x6e>
    if( (sysex_state.general.CTR < sizeof(mios32_midi_sysex_header) && midi_in != mios32_midi_sysex_header[sysex_state.general.CTR]) ||
 8011da4:	4825      	ldr	r0, [pc, #148]	; (8011e3c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011da6:	7803      	ldrb	r3, [r0, #0]
 8011da8:	f003 0307 	and.w	r3, r3, #7
 8011dac:	2b04      	cmp	r3, #4
 8011dae:	d803      	bhi.n	8011db8 <MIOS32_MIDI_SYSEX_Parser+0x40>
 8011db0:	4824      	ldr	r0, [pc, #144]	; (8011e44 <MIOS32_MIDI_SYSEX_Parser+0xcc>)
 8011db2:	5cc0      	ldrb	r0, [r0, r3]
 8011db4:	4290      	cmp	r0, r2
 8011db6:	d121      	bne.n	8011dfc <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011db8:	f001 0107 	and.w	r1, r1, #7
 8011dbc:	2905      	cmp	r1, #5
 8011dbe:	d103      	bne.n	8011dc8 <MIOS32_MIDI_SYSEX_Parser+0x50>
	(sysex_state.general.CTR == sizeof(mios32_midi_sysex_header) && midi_in != sysex_device_id) ) {
 8011dc0:	4821      	ldr	r0, [pc, #132]	; (8011e48 <MIOS32_MIDI_SYSEX_Parser+0xd0>)
 8011dc2:	7801      	ldrb	r1, [r0, #0]
 8011dc4:	4291      	cmp	r1, r2
 8011dc6:	d119      	bne.n	8011dfc <MIOS32_MIDI_SYSEX_Parser+0x84>
      // incoming byte doesn't match
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      if( ++sysex_state.general.CTR > sizeof(mios32_midi_sysex_header) ) {
 8011dc8:	1c5a      	adds	r2, r3, #1
 8011dca:	4b1c      	ldr	r3, [pc, #112]	; (8011e3c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011dcc:	7819      	ldrb	r1, [r3, #0]
 8011dce:	f002 0007 	and.w	r0, r2, #7
 8011dd2:	f360 0102 	bfi	r1, r0, #0, #3
 8011dd6:	2805      	cmp	r0, #5
 8011dd8:	7019      	strb	r1, [r3, #0]
 8011dda:	d92c      	bls.n	8011e36 <MIOS32_MIDI_SYSEX_Parser+0xbe>
	// complete header received, waiting for data
	sysex_state.general.MY_SYSEX = 1;
 8011ddc:	b2ca      	uxtb	r2, r1
 8011dde:	f042 0008 	orr.w	r0, r2, #8
 8011de2:	7018      	strb	r0, [r3, #0]
 8011de4:	e027      	b.n	8011e36 <MIOS32_MIDI_SYSEX_Parser+0xbe>
      }
    }
  } else {
    // check for end of SysEx message or invalid status byte
    if( midi_in >= 0x80 ) {
 8011de6:	0613      	lsls	r3, r2, #24
 8011de8:	d511      	bpl.n	8011e0e <MIOS32_MIDI_SYSEX_Parser+0x96>
      if( midi_in == 0xf7 && sysex_state.general.CMD ) {
 8011dea:	2af7      	cmp	r2, #247	; 0xf7
 8011dec:	d106      	bne.n	8011dfc <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011dee:	f001 0110 	and.w	r1, r1, #16
 8011df2:	b2cb      	uxtb	r3, r1
 8011df4:	b113      	cbz	r3, 8011dfc <MIOS32_MIDI_SYSEX_Parser+0x84>
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
 8011df6:	2102      	movs	r1, #2
 8011df8:	f7ff fee4 	bl	8011bc4 <MIOS32_MIDI_SYSEX_Cmd>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011dfc:	4b0f      	ldr	r3, [pc, #60]	; (8011e3c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
  sysex_cmd = 0;
 8011dfe:	4a13      	ldr	r2, [pc, #76]	; (8011e4c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011e00:	7819      	ldrb	r1, [r3, #0]
  sysex_cmd = 0;
 8011e02:	2000      	movs	r0, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011e04:	f36f 0107 	bfc	r1, #0, #8
 8011e08:	7019      	strb	r1, [r3, #0]
  sysex_cmd = 0;
 8011e0a:	7010      	strb	r0, [r2, #0]
 8011e0c:	bd10      	pop	{r4, pc}
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
      }
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
 8011e0e:	f001 0410 	and.w	r4, r1, #16
 8011e12:	b2e4      	uxtb	r4, r4
 8011e14:	b944      	cbnz	r4, 8011e28 <MIOS32_MIDI_SYSEX_Parser+0xb0>
	sysex_state.general.CMD = 1;
 8011e16:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011e18:	7819      	ldrb	r1, [r3, #0]
 8011e1a:	f041 0110 	orr.w	r1, r1, #16
 8011e1e:	7019      	strb	r1, [r3, #0]
	sysex_cmd = midi_in;
 8011e20:	4b0a      	ldr	r3, [pc, #40]	; (8011e4c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
 8011e22:	4621      	mov	r1, r4
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
	sysex_state.general.CMD = 1;
	sysex_cmd = midi_in;
 8011e24:	701a      	strb	r2, [r3, #0]
 8011e26:	e000      	b.n	8011e2a <MIOS32_MIDI_SYSEX_Parser+0xb2>
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
      }
      else
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
 8011e28:	2101      	movs	r1, #1
 8011e2a:	f7ff fecb 	bl	8011bc4 <MIOS32_MIDI_SYSEX_Cmd>
 8011e2e:	e002      	b.n	8011e36 <MIOS32_MIDI_SYSEX_Parser+0xbe>
  if( midi_in >= 0xf8 )
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
    return -1;
 8011e30:	f04f 30ff 	mov.w	r0, #4294967295
 8011e34:	bd10      	pop	{r4, pc}
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
    return 0;
 8011e36:	2000      	movs	r0, #0
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
    }
  }

  return 0; // no error
}
 8011e38:	bd10      	pop	{r4, pc}
 8011e3a:	bf00      	nop
 8011e3c:	200001c8 	.word	0x200001c8
 8011e40:	200001c0 	.word	0x200001c0
 8011e44:	0801b90d 	.word	0x0801b90d
 8011e48:	200001c2 	.word	0x200001c2
 8011e4c:	200001b4 	.word	0x200001b4

08011e50 <MIOS32_MIDI_ReceivePackage>:
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	f001 030f 	and.w	r3, r1, #15
 8011e58:	4617      	mov	r7, r2

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011e5a:	f103 0208 	add.w	r2, r3, #8
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011e5e:	4688      	mov	r8, r1
 8011e60:	f3c1 2907 	ubfx	r9, r1, #8, #8
 8011e64:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8011e68:	ea4f 6a11 	mov.w	sl, r1, lsr #24

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011e6c:	f002 010f 	and.w	r1, r2, #15
 8011e70:	2906      	cmp	r1, #6
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011e72:	4606      	mov	r6, r0

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011e74:	d803      	bhi.n	8011e7e <MIOS32_MIDI_ReceivePackage+0x2e>
    if( callback_package != NULL )
 8011e76:	2f00      	cmp	r7, #0
 8011e78:	f040 8090 	bne.w	8011f9c <MIOS32_MIDI_ReceivePackage+0x14c>
 8011e7c:	e0f0      	b.n	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8011e7e:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8011e82:	d008      	beq.n	8011e96 <MIOS32_MIDI_ReceivePackage+0x46>
    ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 8011e84:	f103 000c 	add.w	r0, r3, #12
  if( package.type >= 0x8 && package.type < 0xf ) {
    if( callback_package != NULL )
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8011e88:	f000 020f 	and.w	r2, r0, #15
 8011e8c:	2a03      	cmp	r2, #3
 8011e8e:	d82c      	bhi.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
    ((package.type >= 4 && package.type <= 7) && package.evnt0 != 0xf6) ) { // no timeout on tune request
 8011e90:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 8011e94:	d029      	beq.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
 8011e96:	4a74      	ldr	r2, [pc, #464]	; (8012068 <MIOS32_MIDI_ReceivePackage+0x218>)
 8011e98:	e9d2 4500 	ldrd	r4, r5, [r2]
 8011e9c:	ea54 0105 	orrs.w	r1, r4, r5
 8011ea0:	d123      	bne.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
	switch( port & 0xf0 ) {
 8011ea2:	f006 00f0 	and.w	r0, r6, #240	; 0xf0
 8011ea6:	2830      	cmp	r0, #48	; 0x30
 8011ea8:	f04f 0100 	mov.w	r1, #0
 8011eac:	d00c      	beq.n	8011ec8 <MIOS32_MIDI_ReceivePackage+0x78>
 8011eae:	2850      	cmp	r0, #80	; 0x50
 8011eb0:	d013      	beq.n	8011eda <MIOS32_MIDI_ReceivePackage+0x8a>
 8011eb2:	2810      	cmp	r0, #16
 8011eb4:	d119      	bne.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
	case USB0://..15
	  sysex_timeout_ctr = 0;
 8011eb6:	486d      	ldr	r0, [pc, #436]	; (801206c <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011eb8:	8001      	strh	r1, [r0, #0]
	  sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 8011eba:	f006 010f 	and.w	r1, r6, #15
 8011ebe:	2001      	movs	r0, #1
 8011ec0:	fa00 f101 	lsl.w	r1, r0, r1
 8011ec4:	8011      	strh	r1, [r2, #0]
	  break;
 8011ec6:	e010      	b.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
	case UART0://..15
	  // already done in MIOS32_UART_MIDI_PackageReceive()
	  break;
	case IIC0://..15
	  sysex_timeout_ctr = 0;
 8011ec8:	4868      	ldr	r0, [pc, #416]	; (801206c <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011eca:	8001      	strh	r1, [r0, #0]
	  sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8011ecc:	f006 010f 	and.w	r1, r6, #15
 8011ed0:	2001      	movs	r0, #1
 8011ed2:	fa00 f101 	lsl.w	r1, r0, r1
 8011ed6:	8051      	strh	r1, [r2, #2]
	  break;
 8011ed8:	e007      	b.n	8011eea <MIOS32_MIDI_ReceivePackage+0x9a>
	case SPIM0://..15
	  sysex_timeout_ctr = 0;
 8011eda:	4864      	ldr	r0, [pc, #400]	; (801206c <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011edc:	8001      	strh	r1, [r0, #0]
	  sysex_timeout_ctr_flags.spi_receives = (1 << (port & 0xf));
 8011ede:	f006 010f 	and.w	r1, r6, #15
 8011ee2:	2001      	movs	r0, #1
 8011ee4:	fa00 f101 	lsl.w	r1, r0, r1
 8011ee8:	8091      	strh	r1, [r2, #4]
	}
      }
    }

    u8 filter_sysex = 0;
    switch( package.type ) {
 8011eea:	1e9a      	subs	r2, r3, #2
 8011eec:	2a0d      	cmp	r2, #13
 8011eee:	f200 80b7 	bhi.w	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
 8011ef2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011ef6:	0050      	.short	0x0050
 8011ef8:	000e0050 	.word	0x000e0050
 8011efc:	0056004a 	.word	0x0056004a
 8011f00:	00b50056 	.word	0x00b50056
 8011f04:	00b500b5 	.word	0x00b500b5
 8011f08:	00b500b5 	.word	0x00b500b5
 8011f0c:	00b500b5 	.word	0x00b500b5
 8011f10:	000e      	.short	0x000e
      break;

    case 0x4: // SysEx starts or continues (3 bytes)
    case 0xf: // Single byte is interpreted as SysEx as well (I noticed that portmidi sometimes sends single bytes!)

      if( package.evnt0 >= 0xf8 ) { // relevant for package type 0xf
 8011f12:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 8011f16:	d83e      	bhi.n	8011f96 <MIOS32_MIDI_ReceivePackage+0x146>
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
      if( package.type != 0x0f ) {
 8011f18:	f36f 1807 	bfc	r8, #4, #4
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	4649      	mov	r1, r9
      if( package.type != 0x0f ) {
 8011f20:	f008 050f 	and.w	r5, r8, #15
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 8011f24:	f7ff ff28 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>
      if( package.type != 0x0f ) {
 8011f28:	2d0f      	cmp	r5, #15
 8011f2a:	d007      	beq.n	8011f3c <MIOS32_MIDI_ReceivePackage+0xec>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt1); // -> forward to MIOS32 SysEx Parser
 8011f2c:	4659      	mov	r1, fp
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7ff ff22 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt2); // -> forward to MIOS32 SysEx Parser
 8011f34:	4630      	mov	r0, r6
 8011f36:	4651      	mov	r1, sl
 8011f38:	f7ff ff1e 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>
      }

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011f3c:	4b4c      	ldr	r3, [pc, #304]	; (8012070 <MIOS32_MIDI_ReceivePackage+0x220>)
 8011f3e:	7818      	ldrb	r0, [r3, #0]
 8011f40:	f000 0108 	and.w	r1, r0, #8
 8011f44:	b2ca      	uxtb	r2, r1
 8011f46:	2a00      	cmp	r2, #0
 8011f48:	f040 808a 	bne.w	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
	if( sysex_callback_func != NULL ) {
 8011f4c:	4c49      	ldr	r4, [pc, #292]	; (8012074 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011f4e:	6823      	ldr	r3, [r4, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f000 8083 	beq.w	801205c <MIOS32_MIDI_ReceivePackage+0x20c>
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 8011f56:	4649      	mov	r1, r9
 8011f58:	4630      	mov	r0, r6
 8011f5a:	4798      	blx	r3
	  if( package.type != 0x0f ) {
 8011f5c:	2d0f      	cmp	r5, #15
      }

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 8011f5e:	4681      	mov	r9, r0
 8011f60:	b2c1      	uxtb	r1, r0
	  if( package.type != 0x0f ) {
 8011f62:	d00d      	beq.n	8011f80 <MIOS32_MIDI_ReceivePackage+0x130>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011f64:	6825      	ldr	r5, [r4, #0]
 8011f66:	4659      	mov	r1, fp
 8011f68:	4630      	mov	r0, r6
 8011f6a:	47a8      	blx	r5
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011f6c:	4651      	mov	r1, sl
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011f6e:	4605      	mov	r5, r0
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011f70:	6822      	ldr	r2, [r4, #0]
 8011f72:	4630      	mov	r0, r6
 8011f74:	4790      	blx	r2
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011f76:	4328      	orrs	r0, r5
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011f78:	ea40 0909 	orr.w	r9, r0, r9
 8011f7c:	fa5f f189 	uxtb.w	r1, r9
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 8011f80:	2f00      	cmp	r7, #0
 8011f82:	d06d      	beq.n	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
 8011f84:	2900      	cmp	r1, #0
 8011f86:	d16b      	bne.n	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
 8011f88:	e060      	b.n	801204c <MIOS32_MIDI_ReceivePackage+0x1fc>
      }
#endif
      break;

    case 0x5:   // Single-byte System Common Message or SysEx ends with following single byte. 
      if( (package.evnt0 >= 0xf8) || (package.evnt0 == 0xf6) ) {
 8011f8a:	f1b9 0ff7 	cmp.w	r9, #247	; 0xf7
 8011f8e:	d802      	bhi.n	8011f96 <MIOS32_MIDI_ReceivePackage+0x146>
 8011f90:	f1b9 0ff6 	cmp.w	r9, #246	; 0xf6
 8011f94:	d105      	bne.n	8011fa2 <MIOS32_MIDI_ReceivePackage+0x152>
	if( callback_package != NULL )
 8011f96:	2f00      	cmp	r7, #0
 8011f98:	d062      	beq.n	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
	  callback_package(port, package); // -> forwarded as event
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	f028 01f0 	bic.w	r1, r8, #240	; 0xf0
 8011fa0:	e056      	b.n	8012050 <MIOS32_MIDI_ReceivePackage+0x200>
      }
      // no >= 0xf8 or == 0xf6 event: continue!

    case 0x6:   // SysEx ends with following two bytes.
    case 0x7: { // SysEx ends with following three bytes.
      u8 num_bytes = package.type - 0x5 + 1;
 8011fa2:	1f1c      	subs	r4, r3, #4
      u8 current_byte = 0;

      if( num_bytes >= 1 ) {
 8011fa4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8011fa8:	d054      	beq.n	8012054 <MIOS32_MIDI_ReceivePackage+0x204>
	current_byte = package.evnt0;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011faa:	4630      	mov	r0, r6
 8011fac:	4649      	mov	r1, r9
 8011fae:	f7ff fee3 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011fb2:	4b2f      	ldr	r3, [pc, #188]	; (8012070 <MIOS32_MIDI_ReceivePackage+0x220>)
 8011fb4:	781d      	ldrb	r5, [r3, #0]
 8011fb6:	f005 0208 	and.w	r2, r5, #8
 8011fba:	b2d0      	uxtb	r0, r2
 8011fbc:	b938      	cbnz	r0, 8011fce <MIOS32_MIDI_ReceivePackage+0x17e>
	  if( sysex_callback_func != NULL )
 8011fbe:	492d      	ldr	r1, [pc, #180]	; (8012074 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011fc0:	680b      	ldr	r3, [r1, #0]
 8011fc2:	b133      	cbz	r3, 8011fd2 <MIOS32_MIDI_ReceivePackage+0x182>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	4649      	mov	r1, r9
 8011fc8:	4798      	blx	r3
 8011fca:	b2c5      	uxtb	r5, r0
 8011fcc:	e002      	b.n	8011fd4 <MIOS32_MIDI_ReceivePackage+0x184>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8011fce:	2500      	movs	r5, #0
 8011fd0:	e000      	b.n	8011fd4 <MIOS32_MIDI_ReceivePackage+0x184>
 8011fd2:	461d      	mov	r5, r3
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8011fd4:	2c01      	cmp	r4, #1
 8011fd6:	d03f      	beq.n	8012058 <MIOS32_MIDI_ReceivePackage+0x208>
	current_byte = package.evnt1;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011fd8:	4659      	mov	r1, fp
 8011fda:	4630      	mov	r0, r6
 8011fdc:	f7ff fecc 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011fe0:	4a23      	ldr	r2, [pc, #140]	; (8012070 <MIOS32_MIDI_ReceivePackage+0x220>)
 8011fe2:	7810      	ldrb	r0, [r2, #0]
 8011fe4:	f000 0108 	and.w	r1, r0, #8
 8011fe8:	b2cb      	uxtb	r3, r1
 8011fea:	b93b      	cbnz	r3, 8011ffc <MIOS32_MIDI_ReceivePackage+0x1ac>
	  if( sysex_callback_func != NULL )
 8011fec:	4a21      	ldr	r2, [pc, #132]	; (8012074 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011fee:	6813      	ldr	r3, [r2, #0]
 8011ff0:	b123      	cbz	r3, 8011ffc <MIOS32_MIDI_ReceivePackage+0x1ac>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	4659      	mov	r1, fp
 8011ff6:	4798      	blx	r3
 8011ff8:	4328      	orrs	r0, r5
 8011ffa:	b2c5      	uxtb	r5, r0
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8011ffc:	2c02      	cmp	r4, #2
 8011ffe:	d012      	beq.n	8012026 <MIOS32_MIDI_ReceivePackage+0x1d6>
	current_byte = package.evnt2;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8012000:	4651      	mov	r1, sl
 8012002:	4630      	mov	r0, r6
 8012004:	f7ff feb8 	bl	8011d78 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8012008:	4819      	ldr	r0, [pc, #100]	; (8012070 <MIOS32_MIDI_ReceivePackage+0x220>)
 801200a:	7801      	ldrb	r1, [r0, #0]
 801200c:	f001 0208 	and.w	r2, r1, #8
 8012010:	b2d3      	uxtb	r3, r2
 8012012:	b94b      	cbnz	r3, 8012028 <MIOS32_MIDI_ReceivePackage+0x1d8>
	  if( sysex_callback_func != NULL )
 8012014:	4817      	ldr	r0, [pc, #92]	; (8012074 <MIOS32_MIDI_ReceivePackage+0x224>)
 8012016:	6802      	ldr	r2, [r0, #0]
 8012018:	b132      	cbz	r2, 8012028 <MIOS32_MIDI_ReceivePackage+0x1d8>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 801201a:	4630      	mov	r0, r6
 801201c:	4651      	mov	r1, sl
 801201e:	4790      	blx	r2
 8012020:	4328      	orrs	r0, r5
 8012022:	b2c5      	uxtb	r5, r0
 8012024:	e000      	b.n	8012028 <MIOS32_MIDI_ReceivePackage+0x1d8>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8012026:	46da      	mov	sl, fp
	}
#endif
      }

      // reset timeout protection if required
      if( current_byte == 0xf7 )
 8012028:	f1ba 0ff7 	cmp.w	sl, #247	; 0xf7
 801202c:	d104      	bne.n	8012038 <MIOS32_MIDI_ReceivePackage+0x1e8>
	sysex_timeout_ctr_flags.ALL = 0;
 801202e:	4b0e      	ldr	r3, [pc, #56]	; (8012068 <MIOS32_MIDI_ReceivePackage+0x218>)
 8012030:	2000      	movs	r0, #0
 8012032:	2100      	movs	r1, #0
 8012034:	e9c3 0100 	strd	r0, r1, [r3]

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8012038:	490d      	ldr	r1, [pc, #52]	; (8012070 <MIOS32_MIDI_ReceivePackage+0x220>)
 801203a:	7808      	ldrb	r0, [r1, #0]
 801203c:	f000 0208 	and.w	r2, r0, #8
 8012040:	b2d3      	uxtb	r3, r2
 8012042:	b96b      	cbnz	r3, 8012060 <MIOS32_MIDI_ReceivePackage+0x210>
	// forward as package if not filtered
	if( callback_package != NULL && !filter_sysex )
 8012044:	b167      	cbz	r7, 8012060 <MIOS32_MIDI_ReceivePackage+0x210>
 8012046:	b95d      	cbnz	r5, 8012060 <MIOS32_MIDI_ReceivePackage+0x210>
	  callback_package(port, package);
 8012048:	f365 1807 	bfi	r8, r5, #4, #4
 801204c:	4630      	mov	r0, r6
 801204e:	4641      	mov	r1, r8
 8012050:	47b8      	blx	r7
 8012052:	e005      	b.n	8012060 <MIOS32_MIDI_ReceivePackage+0x210>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8012054:	4625      	mov	r5, r4
 8012056:	e7ef      	b.n	8012038 <MIOS32_MIDI_ReceivePackage+0x1e8>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8012058:	46ca      	mov	sl, r9
 801205a:	e7e5      	b.n	8012028 <MIOS32_MIDI_ReceivePackage+0x1d8>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 801205c:	2f00      	cmp	r7, #0
 801205e:	d1f5      	bne.n	801204c <MIOS32_MIDI_ReceivePackage+0x1fc>
    } break;
    }	      
  }

  return 0; // no error
}
 8012060:	2000      	movs	r0, #0
 8012062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012066:	bf00      	nop
 8012068:	200001d8 	.word	0x200001d8
 801206c:	200001c4 	.word	0x200001c4
 8012070:	200001c8 	.word	0x200001c8
 8012074:	200001e0 	.word	0x200001e0

08012078 <MIOS32_MIDI_Receive_Handler>:
//! which can be installed via MIOS32_MIDI_SysExCallback_Init()
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Receive_Handler(void *_callback_package)
{
 8012078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207c:	4606      	mov	r6, r0
 801207e:	b08a      	sub	sp, #40	; 0x28
  // handle all USB MIDI packages
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_USB_MIDI_PackageReceive(&package)) >= 0 ) {
 8012080:	a801      	add	r0, sp, #4
 8012082:	f001 fe85 	bl	8013d90 <MIOS32_USB_MIDI_PackageReceive>
 8012086:	2800      	cmp	r0, #0
 8012088:	db07      	blt.n	801209a <MIOS32_MIDI_Receive_Handler+0x22>
      MIOS32_MIDI_ReceivePackage(USB0 + package.cable, package, _callback_package);
 801208a:	9901      	ldr	r1, [sp, #4]
 801208c:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8012090:	3010      	adds	r0, #16
 8012092:	4632      	mov	r2, r6
 8012094:	f7ff fedc 	bl	8011e50 <MIOS32_MIDI_ReceivePackage>
 8012098:	e7f2      	b.n	8012080 <MIOS32_MIDI_Receive_Handler+0x8>
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 801209a:	4d41      	ldr	r5, [pc, #260]	; (80121a0 <MIOS32_MIDI_Receive_Handler+0x128>)
 801209c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801209e:	ac04      	add	r4, sp, #16
 80120a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120a2:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 80120a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 80120aa:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 80120ae:	b34b      	cbz	r3, 8012104 <MIOS32_MIDI_Receive_Handler+0x8c>
 80120b0:	2400      	movs	r4, #0
 80120b2:	4625      	mov	r5, r4
 80120b4:	4627      	mov	r7, r4
      int intf = 0;
      do {
	mios32_midi_package_t package;

	// last table entry?
	if( !midi_intf_table[intf].port ) {
 80120b6:	a80a      	add	r0, sp, #40	; 0x28
 80120b8:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 80120bc:	f811 2c18 	ldrb.w	r2, [r1, #-24]
 80120c0:	b912      	cbnz	r2, 80120c8 <MIOS32_MIDI_Receive_Handler+0x50>
	  if( !packages_forwarded_this_round )
 80120c2:	b1fd      	cbz	r5, 8012104 <MIOS32_MIDI_Receive_Handler+0x8c>
	    break; // no new package

	  intf = 0; // at least one package: restart
 80120c4:	4614      	mov	r4, r2
	  packages_forwarded_this_round = 0;
 80120c6:	4615      	mov	r5, r2
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 80120c8:	ab0a      	add	r3, sp, #40	; 0x28
 80120ca:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 80120ce:	a902      	add	r1, sp, #8
	  intf = 0; // at least one package: restart
	  packages_forwarded_this_round = 0;
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 80120d0:	f810 8c18 	ldrb.w	r8, [r0, #-24]
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 80120d4:	f850 2c14 	ldr.w	r2, [r0, #-20]
 80120d8:	f008 000f 	and.w	r0, r8, #15
 80120dc:	4790      	blx	r2

	if( status == -10 ) { // receive timeout?
 80120de:	f110 0f0a 	cmn.w	r0, #10
 80120e2:	d103      	bne.n	80120ec <MIOS32_MIDI_Receive_Handler+0x74>
	  MIOS32_MIDI_TimeOut(port);
 80120e4:	4640      	mov	r0, r8
 80120e6:	f7ff fced 	bl	8011ac4 <MIOS32_MIDI_TimeOut>
 80120ea:	e008      	b.n	80120fe <MIOS32_MIDI_Receive_Handler+0x86>
	} else if( status >= 0 ) { // message received?
 80120ec:	2800      	cmp	r0, #0
 80120ee:	db06      	blt.n	80120fe <MIOS32_MIDI_Receive_Handler+0x86>
	  ++packages_forwarded;
	  ++packages_forwarded_this_round;
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 80120f0:	4640      	mov	r0, r8
 80120f2:	9902      	ldr	r1, [sp, #8]
 80120f4:	4632      	mov	r2, r6
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);

	if( status == -10 ) { // receive timeout?
	  MIOS32_MIDI_TimeOut(port);
	} else if( status >= 0 ) { // message received?
	  ++packages_forwarded;
 80120f6:	3701      	adds	r7, #1
	  ++packages_forwarded_this_round;
 80120f8:	3501      	adds	r5, #1
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 80120fa:	f7ff fea9 	bl	8011e50 <MIOS32_MIDI_ReceivePackage>
	}

	++intf;
 80120fe:	3401      	adds	r4, #1
      } while( packages_forwarded < 10 );
 8012100:	2f09      	cmp	r7, #9
 8012102:	ddd8      	ble.n	80120b6 <MIOS32_MIDI_Receive_Handler+0x3e>
  // handle all SPI MIDI packages
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_SPI_MIDI_PackageReceive(&package)) >= 0 ) {
 8012104:	a803      	add	r0, sp, #12
 8012106:	f000 fa99 	bl	801263c <MIOS32_SPI_MIDI_PackageReceive>
 801210a:	2800      	cmp	r0, #0
 801210c:	db07      	blt.n	801211e <MIOS32_MIDI_Receive_Handler+0xa6>
      MIOS32_MIDI_ReceivePackage(SPIM0 + package.cable, package, _callback_package);
 801210e:	9903      	ldr	r1, [sp, #12]
 8012110:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8012114:	3050      	adds	r0, #80	; 0x50
 8012116:	4632      	mov	r2, r6
 8012118:	f7ff fe9a 	bl	8011e50 <MIOS32_MIDI_ReceivePackage>
 801211c:	e7f2      	b.n	8012104 <MIOS32_MIDI_Receive_Handler+0x8c>
  }
#endif
  

  // SysEx timeout detected by this handler?
  if( sysex_timeout_ctr_flags.ALL && sysex_timeout_ctr > 1000 ) {
 801211e:	4921      	ldr	r1, [pc, #132]	; (80121a4 <MIOS32_MIDI_Receive_Handler+0x12c>)
 8012120:	e9d1 2300 	ldrd	r2, r3, [r1]
 8012124:	ea52 0003 	orrs.w	r0, r2, r3
 8012128:	d035      	beq.n	8012196 <MIOS32_MIDI_Receive_Handler+0x11e>
 801212a:	4b1f      	ldr	r3, [pc, #124]	; (80121a8 <MIOS32_MIDI_Receive_Handler+0x130>)
 801212c:	8818      	ldrh	r0, [r3, #0]
 801212e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012132:	d930      	bls.n	8012196 <MIOS32_MIDI_Receive_Handler+0x11e>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
 8012134:	880a      	ldrh	r2, [r1, #0]
 8012136:	b162      	cbz	r2, 8012152 <MIOS32_MIDI_Receive_Handler+0xda>
 8012138:	2100      	movs	r1, #0
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
 801213a:	fa42 f301 	asr.w	r3, r2, r1
 801213e:	f013 0001 	ands.w	r0, r3, #1
 8012142:	d103      	bne.n	801214c <MIOS32_MIDI_Receive_Handler+0xd4>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8012144:	3101      	adds	r1, #1
 8012146:	2910      	cmp	r1, #16
 8012148:	d1f7      	bne.n	801213a <MIOS32_MIDI_Receive_Handler+0xc2>
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 801214a:	4601      	mov	r1, r0
      timeout_port = USB0 + i;
 801214c:	3110      	adds	r1, #16
 801214e:	b2c8      	uxtb	r0, r1
 8012150:	e01a      	b.n	8012188 <MIOS32_MIDI_Receive_Handler+0x110>
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
 8012152:	884b      	ldrh	r3, [r1, #2]
 8012154:	b15b      	cbz	r3, 801216e <MIOS32_MIDI_Receive_Handler+0xf6>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
 8012156:	fa43 f002 	asr.w	r0, r3, r2
 801215a:	f010 0101 	ands.w	r1, r0, #1
 801215e:	d103      	bne.n	8012168 <MIOS32_MIDI_Receive_Handler+0xf0>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = USB0 + i;
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8012160:	3201      	adds	r2, #1
 8012162:	2a10      	cmp	r2, #16
 8012164:	d1f7      	bne.n	8012156 <MIOS32_MIDI_Receive_Handler+0xde>
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8012166:	460a      	mov	r2, r1
      timeout_port = IIC0 + i;
 8012168:	3230      	adds	r2, #48	; 0x30
 801216a:	b2d0      	uxtb	r0, r2
 801216c:	e00c      	b.n	8012188 <MIOS32_MIDI_Receive_Handler+0x110>
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
 801216e:	8888      	ldrh	r0, [r1, #4]
 8012170:	b150      	cbz	r0, 8012188 <MIOS32_MIDI_Receive_Handler+0x110>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
 8012172:	fa40 f103 	asr.w	r1, r0, r3
 8012176:	f011 0201 	ands.w	r2, r1, #1
 801217a:	d103      	bne.n	8012184 <MIOS32_MIDI_Receive_Handler+0x10c>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = IIC0 + i;
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 801217c:	3301      	adds	r3, #1
 801217e:	2b10      	cmp	r3, #16
 8012180:	d1f7      	bne.n	8012172 <MIOS32_MIDI_Receive_Handler+0xfa>
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8012182:	4613      	mov	r3, r2
      timeout_port = SPIM0 + i;
 8012184:	3350      	adds	r3, #80	; 0x50
 8012186:	b2d8      	uxtb	r0, r3
    }

    MIOS32_MIDI_TimeOut(timeout_port);
 8012188:	f7ff fc9c 	bl	8011ac4 <MIOS32_MIDI_TimeOut>
    sysex_timeout_ctr_flags.ALL = 0;
 801218c:	4805      	ldr	r0, [pc, #20]	; (80121a4 <MIOS32_MIDI_Receive_Handler+0x12c>)
 801218e:	2200      	movs	r2, #0
 8012190:	2300      	movs	r3, #0
 8012192:	e9c0 2300 	strd	r2, r3, [r0]
  }

  return 0;
}
 8012196:	2000      	movs	r0, #0
 8012198:	b00a      	add	sp, #40	; 0x28
 801219a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801219e:	bf00      	nop
 80121a0:	0801b7bc 	.word	0x0801b7bc
 80121a4:	200001d8 	.word	0x200001d8
 80121a8:	200001c4 	.word	0x200001c4

080121ac <MIOS32_OSC_Init>:
{
  if( mode > 0 )
    return -1; // only mode 0 supported yet

  return 0; // no error
}
 80121ac:	2800      	cmp	r0, #0
 80121ae:	bf14      	ite	ne
 80121b0:	f04f 30ff 	movne.w	r0, #4294967295
 80121b4:	2000      	moveq	r0, #0
 80121b6:	4770      	bx	lr

080121b8 <MIOS32_COM_Init>:
s32 MIOS32_COM_Init(u32 mode)
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 80121b8:	b938      	cbnz	r0, 80121ca <MIOS32_COM_Init+0x12>
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 80121ba:	4b05      	ldr	r3, [pc, #20]	; (80121d0 <MIOS32_COM_Init+0x18>)

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 80121bc:	4a05      	ldr	r2, [pc, #20]	; (80121d4 <MIOS32_COM_Init+0x1c>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 80121be:	6018      	str	r0, [r3, #0]

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
  debug_port = MIOS32_COM_DEBUG_PORT;
 80121c0:	4b05      	ldr	r3, [pc, #20]	; (80121d8 <MIOS32_COM_Init+0x20>)

  // disable callback by default
  receive_callback_func = NULL;

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 80121c2:	2110      	movs	r1, #16
 80121c4:	7011      	strb	r1, [r2, #0]
  debug_port = MIOS32_COM_DEBUG_PORT;
 80121c6:	7019      	strb	r1, [r3, #0]
#if MIOS32_UART0_ASSIGNMENT == 2 || MIOS32_UART1_ASSIGNMENT == 2 || MIOS32_UART2_ASSIGNMENT == 2 || MIOS32_UART3_ASSIGNMENT == 2
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
 80121c8:	4770      	bx	lr
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80121ca:	f04f 30ff 	mov.w	r0, #4294967295
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
}
 80121ce:	4770      	bx	lr
 80121d0:	200001e8 	.word	0x200001e8
 80121d4:	20000007 	.word	0x20000007
 80121d8:	20000008 	.word	0x20000008

080121dc <MIOS32_COM_SendBuffer>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendBuffer(mios32_com_port_t port, u8 *buffer, u16 len)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 80121dc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 80121e0:	d104      	bne.n	80121ec <MIOS32_COM_SendBuffer+0x10>
    port = (port == COM_DEBUG) ? debug_port : default_port;
 80121e2:	2801      	cmp	r0, #1
 80121e4:	bf0c      	ite	eq
 80121e6:	4b06      	ldreq	r3, [pc, #24]	; (8012200 <MIOS32_COM_SendBuffer+0x24>)
 80121e8:	4b06      	ldrne	r3, [pc, #24]	; (8012204 <MIOS32_COM_SendBuffer+0x28>)
 80121ea:	7818      	ldrb	r0, [r3, #0]
  }

  // branch depending on selected port
  switch( port >> 4 ) {
 80121ec:	0903      	lsrs	r3, r0, #4
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d103      	bne.n	80121fa <MIOS32_COM_SendBuffer+0x1e>
      return -1; // USB has been disabled
#endif

    case 2:
#if !defined(MIOS32_DONT_USE_UART)
      return MIOS32_UART_TxBufferPutMore(port & 0xf, buffer, len);
 80121f2:	f000 000f 	and.w	r0, r0, #15
 80121f6:	f002 b80b 	b.w	8014210 <MIOS32_UART_TxBufferPutMore>
      
    default:
      // invalid port
      return -1;
  }
}
 80121fa:	f04f 30ff 	mov.w	r0, #4294967295
 80121fe:	4770      	bx	lr
 8012200:	20000008 	.word	0x20000008
 8012204:	20000007 	.word	0x20000007

08012208 <MIOS32_COM_SendChar>:
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 8012208:	b507      	push	{r0, r1, r2, lr}
 801220a:	ab02      	add	r3, sp, #8
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 801220c:	2201      	movs	r2, #1
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 801220e:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 8012212:	4619      	mov	r1, r3
 8012214:	f7ff ffe2 	bl	80121dc <MIOS32_COM_SendBuffer>
}
 8012218:	bd0e      	pop	{r1, r2, r3, pc}
	...

0801221c <MIOS32_COM_Receive_Handler>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
 801221c:	4b28      	ldr	r3, [pc, #160]	; (80122c0 <MIOS32_COM_Receive_Handler+0xa4>)
 801221e:	6818      	ldr	r0, [r3, #0]
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
 8012220:	b570      	push	{r4, r5, r6, lr}
  // no callback -> no polling
  if( receive_callback_func == NULL )
 8012222:	2800      	cmp	r0, #0
 8012224:	d045      	beq.n	80122b2 <MIOS32_COM_Receive_Handler+0x96>
 8012226:	2400      	movs	r4, #0
 8012228:	4625      	mov	r5, r4
 801222a:	4620      	mov	r0, r4
    // TODO: maybe a list based approach would be better
    // it would allow to add/remove interfaces dynamically
    // this would also allow to give certain ports a higher priority (to add them multiple times to the list)
    // it would also improve this spagetthi code ;)
    s32 status = -1;
    switch( intf++ ) {
 801222c:	1c46      	adds	r6, r0, #1
 801222e:	b2f6      	uxtb	r6, r6
 8012230:	2804      	cmp	r0, #4
 8012232:	d82b      	bhi.n	801228c <MIOS32_COM_Receive_Handler+0x70>
 8012234:	e8df f000 	tbb	[pc, r0]
 8012238:	160c0339 	.word	0x160c0339
 801223c:	20          	.byte	0x20
 801223d:	00          	.byte	0x00
      case 0: status = MIOS32_USB_COM_RxBufferGet(0); port = USB0; break;
#else
      case 0: status = -1; break;
#endif
#if !defined(MIOS32_DONT_USE_UART)
      case 1: if( MIOS32_UART_IsAssignedToMIDI(0) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(0); port = UART0; } break;
 801223e:	2000      	movs	r0, #0
 8012240:	f001 fdf4 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 8012244:	bb88      	cbnz	r0, 80122aa <MIOS32_COM_Receive_Handler+0x8e>
 8012246:	f001 ff15 	bl	8014074 <MIOS32_UART_RxBufferGet>
 801224a:	4601      	mov	r1, r0
 801224c:	2020      	movs	r0, #32
 801224e:	e021      	b.n	8012294 <MIOS32_COM_Receive_Handler+0x78>
      case 2: if( MIOS32_UART_IsAssignedToMIDI(1) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(1); port = UART1; } break;
 8012250:	2001      	movs	r0, #1
 8012252:	f001 fdeb 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 8012256:	bb40      	cbnz	r0, 80122aa <MIOS32_COM_Receive_Handler+0x8e>
 8012258:	2001      	movs	r0, #1
 801225a:	f001 ff0b 	bl	8014074 <MIOS32_UART_RxBufferGet>
 801225e:	4601      	mov	r1, r0
 8012260:	2021      	movs	r0, #33	; 0x21
 8012262:	e017      	b.n	8012294 <MIOS32_COM_Receive_Handler+0x78>
      case 3: if( MIOS32_UART_IsAssignedToMIDI(2) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(2); port = UART2; } break;
 8012264:	2002      	movs	r0, #2
 8012266:	f001 fde1 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 801226a:	b9f0      	cbnz	r0, 80122aa <MIOS32_COM_Receive_Handler+0x8e>
 801226c:	2002      	movs	r0, #2
 801226e:	f001 ff01 	bl	8014074 <MIOS32_UART_RxBufferGet>
 8012272:	4601      	mov	r1, r0
 8012274:	2022      	movs	r0, #34	; 0x22
 8012276:	e00d      	b.n	8012294 <MIOS32_COM_Receive_Handler+0x78>
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
 8012278:	2003      	movs	r0, #3
 801227a:	f001 fdd7 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 801227e:	b9a0      	cbnz	r0, 80122aa <MIOS32_COM_Receive_Handler+0x8e>
 8012280:	2003      	movs	r0, #3
 8012282:	f001 fef7 	bl	8014074 <MIOS32_UART_RxBufferGet>
 8012286:	4601      	mov	r1, r0
 8012288:	2023      	movs	r0, #35	; 0x23
 801228a:	e003      	b.n	8012294 <MIOS32_COM_Receive_Handler+0x78>
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
 801228c:	b17c      	cbz	r4, 80122ae <MIOS32_COM_Receive_Handler+0x92>
 801228e:	2d3f      	cmp	r5, #63	; 0x3f
 8012290:	d912      	bls.n	80122b8 <MIOS32_COM_Receive_Handler+0x9c>
 8012292:	e00c      	b.n	80122ae <MIOS32_COM_Receive_Handler+0x92>
	}
	status = -1; // empty round - no message
    }

    // message received?
    if( status >= 0 ) {
 8012294:	2900      	cmp	r1, #0
 8012296:	db08      	blt.n	80122aa <MIOS32_COM_Receive_Handler+0x8e>
      // notify that a package has been forwarded
      ++bytes_forwarded;
      ++total_bytes_forwarded;

      // call function
      if( receive_callback_func != NULL )
 8012298:	4a09      	ldr	r2, [pc, #36]	; (80122c0 <MIOS32_COM_Receive_Handler+0xa4>)
 801229a:	6813      	ldr	r3, [r2, #0]
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 801229c:	3401      	adds	r4, #1
      ++total_bytes_forwarded;
 801229e:	3501      	adds	r5, #1
    }

    // message received?
    if( status >= 0 ) {
      // notify that a package has been forwarded
      ++bytes_forwarded;
 80122a0:	b2e4      	uxtb	r4, r4
      ++total_bytes_forwarded;
 80122a2:	b2ed      	uxtb	r5, r5

      // call function
      if( receive_callback_func != NULL )
 80122a4:	b10b      	cbz	r3, 80122aa <MIOS32_COM_Receive_Handler+0x8e>
	receive_callback_func(port, (u8)status);
 80122a6:	b2c9      	uxtb	r1, r1
 80122a8:	4798      	blx	r3
    }
  } while( again );
 80122aa:	4630      	mov	r0, r6
 80122ac:	e7be      	b.n	801222c <MIOS32_COM_Receive_Handler+0x10>

  return 0;
 80122ae:	2000      	movs	r0, #0
 80122b0:	bd70      	pop	{r4, r5, r6, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  // no callback -> no polling
  if( receive_callback_func == NULL )
    return -1;
 80122b2:	f04f 30ff 	mov.w	r0, #4294967295
 80122b6:	bd70      	pop	{r4, r5, r6, pc}
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
	  bytes_forwarded = 0; // for checking, if bytes still have been forwarded in next round
 80122b8:	2400      	movs	r4, #0
      case 4: if( MIOS32_UART_IsAssignedToMIDI(3) ) { status = -1; } else { status = MIOS32_UART_RxBufferGet(3); port = UART3; } break;
#endif
      default:
	// allow 64 forwards maximum to yield some CPU time for other tasks
	if( bytes_forwarded && total_bytes_forwarded < 64 ) {
	  intf = 0; // restart with USB
 80122ba:	4626      	mov	r6, r4
 80122bc:	e7f5      	b.n	80122aa <MIOS32_COM_Receive_Handler+0x8e>
 80122be:	bf00      	nop
 80122c0:	200001e8 	.word	0x200001e8

080122c4 <MIOS32_UART_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_CheckAvailable(u8 uart_port)
{
 80122c4:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  return MIOS32_UART_IsAssignedToMIDI(uart_port) >= 1; // UART assigned to MIDI?
 80122c6:	f001 fdb1 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
#endif
}
 80122ca:	2800      	cmp	r0, #0
 80122cc:	bfd4      	ite	le
 80122ce:	2000      	movle	r0, #0
 80122d0:	2001      	movgt	r0, #1
 80122d2:	bd08      	pop	{r3, pc}

080122d4 <MIOS32_UART_MIDI_RS_Reset>:
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 80122d4:	2801      	cmp	r0, #1
//! \return -1 if port not available
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
 80122d6:	b538      	push	{r3, r4, r5, lr}
 80122d8:	4604      	mov	r4, r0
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 80122da:	d80c      	bhi.n	80122f6 <MIOS32_UART_MIDI_RS_Reset+0x22>
    return -1; // port not available

  MIOS32_IRQ_Disable();
 80122dc:	f000 fb30 	bl	8012940 <MIOS32_IRQ_Disable>
  rs_last[uart_port] = 0xff;
 80122e0:	4b06      	ldr	r3, [pc, #24]	; (80122fc <MIOS32_UART_MIDI_RS_Reset+0x28>)
  rs_expire_ctr[uart_port] = 0;
 80122e2:	4807      	ldr	r0, [pc, #28]	; (8012300 <MIOS32_UART_MIDI_RS_Reset+0x2c>)
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 80122e4:	22ff      	movs	r2, #255	; 0xff
  rs_expire_ctr[uart_port] = 0;
 80122e6:	2500      	movs	r5, #0
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 80122e8:	551a      	strb	r2, [r3, r4]
  rs_expire_ctr[uart_port] = 0;
 80122ea:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
  MIOS32_IRQ_Enable();
 80122ee:	f000 fb3b 	bl	8012968 <MIOS32_IRQ_Enable>

  return 0;
 80122f2:	4628      	mov	r0, r5
 80122f4:	bd38      	pop	{r3, r4, r5, pc}
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available
 80122f6:	f04f 30ff 	mov.w	r0, #4294967295
  rs_expire_ctr[uart_port] = 0;
  MIOS32_IRQ_Enable();

  return 0;
#endif
}
 80122fa:	bd38      	pop	{r3, r4, r5, pc}
 80122fc:	200001ec 	.word	0x200001ec
 8012300:	2000020a 	.word	0x2000020a

08012304 <MIOS32_UART_MIDI_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Init(u32 mode)
{
 8012304:	b510      	push	{r4, lr}
#else
  int i;


  // currently only mode 0 supported
  if( mode != 0 )
 8012306:	4604      	mov	r4, r0
 8012308:	b110      	cbz	r0, 8012310 <MIOS32_UART_MIDI_Init+0xc>
    return -1; // unsupported mode
 801230a:	f04f 30ff 	mov.w	r0, #4294967295
 801230e:	bd10      	pop	{r4, pc}
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012310:	4b0d      	ldr	r3, [pc, #52]	; (8012348 <MIOS32_UART_MIDI_Init+0x44>)
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8012312:	490e      	ldr	r1, [pc, #56]	; (801234c <MIOS32_UART_MIDI_Init+0x48>)
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012314:	6018      	str	r0, [r3, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8012316:	22ff      	movs	r2, #255	; 0xff
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
  midix->running_status = 0x00;
 8012318:	7118      	strb	r0, [r3, #4]
  midix->expected_bytes = 0x00;
 801231a:	7158      	strb	r0, [r3, #5]
  midix->wait_bytes = 0x00;
 801231c:	7198      	strb	r0, [r3, #6]
  midix->sysex_ctr = 0x00;
 801231e:	71d8      	strb	r0, [r3, #7]
  midix->timeout_ctr = 0;
 8012320:	8118      	strh	r0, [r3, #8]
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012322:	60d8      	str	r0, [r3, #12]
  midix->running_status = 0x00;
 8012324:	7418      	strb	r0, [r3, #16]
  midix->expected_bytes = 0x00;
 8012326:	7458      	strb	r0, [r3, #17]
  midix->wait_bytes = 0x00;
 8012328:	7498      	strb	r0, [r3, #18]
  midix->sysex_ctr = 0x00;
 801232a:	74d8      	strb	r0, [r3, #19]
  midix->timeout_ctr = 0;
 801232c:	8298      	strh	r0, [r3, #20]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 801232e:	700a      	strb	r2, [r1, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RS_Reset(i);
 8012330:	f7ff ffd0 	bl	80122d4 <MIOS32_UART_MIDI_RS_Reset>
 8012334:	2001      	movs	r0, #1
 8012336:	f7ff ffcd 	bl	80122d4 <MIOS32_UART_MIDI_RS_Reset>

  // if any MIDI assignment:
#if MIOS32_UART0_ASSIGNMENT == 1 || MIOS32_UART1_ASSIGNMENT == 1 || MIOS32_UART2_ASSIGNMENT == 1 || MIOS32_UART3_ASSIGNMENT == 1
  // initialize U(S)ART interface
  if( MIOS32_UART_Init(0) < 0 )
 801233a:	4620      	mov	r0, r4
 801233c:	f001 fe20 	bl	8013f80 <MIOS32_UART_Init>
 8012340:	2800      	cmp	r0, #0
 8012342:	dbe2      	blt.n	801230a <MIOS32_UART_MIDI_Init+0x6>
    return -1; // initialisation of U(S)ART Interface failed
#endif

  return 0; // no error
 8012344:	4620      	mov	r0, r4
#endif
}
 8012346:	bd10      	pop	{r4, pc}
 8012348:	200001f0 	.word	0x200001f0
 801234c:	20000208 	.word	0x20000208

08012350 <MIOS32_UART_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Periodic_mS(void)
{
 8012350:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
 8012352:	f000 faf5 	bl	8012940 <MIOS32_IRQ_Disable>
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 8012356:	4a10      	ldr	r2, [pc, #64]	; (8012398 <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 8012358:	8813      	ldrh	r3, [r2, #0]
 801235a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801235e:	428b      	cmp	r3, r1
 8012360:	4608      	mov	r0, r1
 8012362:	d001      	beq.n	8012368 <MIOS32_UART_MIDI_Periodic_mS+0x18>
      ++rs_expire_ctr[uart_port];
 8012364:	3301      	adds	r3, #1
 8012366:	8013      	strh	r3, [r2, #0]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 8012368:	4b0c      	ldr	r3, [pc, #48]	; (801239c <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 801236a:	8919      	ldrh	r1, [r3, #8]
 801236c:	4281      	cmp	r1, r0
 801236e:	d001      	beq.n	8012374 <MIOS32_UART_MIDI_Periodic_mS+0x24>
      ++midi_rec[uart_port].timeout_ctr;
 8012370:	1c48      	adds	r0, r1, #1
 8012372:	8118      	strh	r0, [r3, #8]
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 8012374:	8852      	ldrh	r2, [r2, #2]
 8012376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801237a:	428a      	cmp	r2, r1
 801237c:	d002      	beq.n	8012384 <MIOS32_UART_MIDI_Periodic_mS+0x34>
      ++rs_expire_ctr[uart_port];
 801237e:	4806      	ldr	r0, [pc, #24]	; (8012398 <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 8012380:	3201      	adds	r2, #1
 8012382:	8042      	strh	r2, [r0, #2]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 8012384:	8a9b      	ldrh	r3, [r3, #20]
 8012386:	428b      	cmp	r3, r1
 8012388:	d002      	beq.n	8012390 <MIOS32_UART_MIDI_Periodic_mS+0x40>
      ++midi_rec[uart_port].timeout_ctr;
 801238a:	4a04      	ldr	r2, [pc, #16]	; (801239c <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 801238c:	1c59      	adds	r1, r3, #1
 801238e:	8291      	strh	r1, [r2, #20]
  }
  MIOS32_IRQ_Enable();
 8012390:	f000 faea 	bl	8012968 <MIOS32_IRQ_Enable>
  // (atomic operation not required in MIOS32_UART_MIDI_PackageSend_NonBlocking() due to single-byte accesses)
#endif

  return 0; // no error
}
 8012394:	2000      	movs	r0, #0
 8012396:	bd08      	pop	{r3, pc}
 8012398:	2000020a 	.word	0x2000020a
 801239c:	200001f0 	.word	0x200001f0

080123a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking>:
//! \return -2: UART_MIDI buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend_NonBlocking(u8 uart_port, mios32_midi_package_t package)
{
 80123a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80123a4:	f3c1 2607 	ubfx	r6, r1, #8, #8
 80123a8:	4605      	mov	r5, r0
 80123aa:	f001 070f 	and.w	r7, r1, #15
 80123ae:	fa5f f886 	uxtb.w	r8, r6
 80123b2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80123b6:	f3c1 6907 	ubfx	r9, r1, #24, #8
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 80123ba:	f7ff ff83 	bl	80122c4 <MIOS32_UART_MIDI_CheckAvailable>
 80123be:	2800      	cmp	r0, #0
 80123c0:	d040      	beq.n	8012444 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
 80123c2:	4b23      	ldr	r3, [pc, #140]	; (8012450 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb0>)
 80123c4:	5ddc      	ldrb	r4, [r3, r7]
  if( len ) {
 80123c6:	2c00      	cmp	r4, #0
 80123c8:	d03f      	beq.n	801244a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xaa>
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80123ca:	4822      	ldr	r0, [pc, #136]	; (8012454 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb4>)
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80123cc:	f88d 6004 	strb.w	r6, [sp, #4]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80123d0:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80123d4:	f88d a005 	strb.w	sl, [sp, #5]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80123d8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 80123dc:	f88d 9006 	strb.w	r9, [sp, #6]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 80123e0:	d903      	bls.n	80123ea <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x4a>
      // the current RS is expired each second to ensure that a status byte will be sent
      // if the MIDI cable is (re)connected during runtime
      MIOS32_UART_MIDI_RS_Reset(uart_port);
 80123e2:	4628      	mov	r0, r5
 80123e4:	f7ff ff76 	bl	80122d4 <MIOS32_UART_MIDI_RS_Reset>
 80123e8:	e01b      	b.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
#if 0
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
 80123ea:	491b      	ldr	r1, [pc, #108]	; (8012458 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb8>)
 80123ec:	780b      	ldrb	r3, [r1, #0]
 80123ee:	fa43 f305 	asr.w	r3, r3, r5
 80123f2:	07da      	lsls	r2, r3, #31
 80123f4:	d515      	bpl.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 80123f6:	2f07      	cmp	r7, #7
 80123f8:	dd13      	ble.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 80123fa:	2f0f      	cmp	r7, #15
 80123fc:	d011      	beq.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
 80123fe:	2c01      	cmp	r4, #1
 8012400:	d90e      	bls.n	8012420 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
 8012402:	4a16      	ldr	r2, [pc, #88]	; (801245c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)
 8012404:	5d51      	ldrb	r1, [r2, r5]
 8012406:	4541      	cmp	r1, r8
 8012408:	d106      	bne.n	8012418 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x78>
	  buffer[0] = package.evnt1;
	  buffer[1] = package.evnt2;
	  --len;
 801240a:	3c01      	subs	r4, #1
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
	  buffer[0] = package.evnt1;
 801240c:	f88d a004 	strb.w	sl, [sp, #4]
	  buffer[1] = package.evnt2;
 8012410:	f88d 9005 	strb.w	r9, [sp, #5]
	  --len;
 8012414:	b2e4      	uxtb	r4, r4
 8012416:	e004      	b.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
	  // for optional monitoring of the optimisation
	  MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS optimized (%02x) %02x %02x\n", uart_port, package.evnt0, package.evnt1, package.evnt2);
#endif
	} else {
	  // new running status
	  rs_expire_ctr[uart_port] = 0;
 8012418:	2300      	movs	r3, #0
 801241a:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
 801241e:	e000      	b.n	8012422 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x82>
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8012420:	2401      	movs	r4, #1
      }
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
 8012422:	f1b8 0ff7 	cmp.w	r8, #247	; 0xf7
      rs_last[uart_port] = package.evnt0;
 8012426:	bf98      	it	ls
 8012428:	480c      	ldrls	r0, [pc, #48]	; (801245c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xbc>)


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 801242a:	a901      	add	r1, sp, #4
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;
 801242c:	bf98      	it	ls
 801242e:	5546      	strbls	r6, [r0, r5]


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8012430:	4622      	mov	r2, r4
 8012432:	4628      	mov	r0, r5
 8012434:	f001 feec 	bl	8014210 <MIOS32_UART_TxBufferPutMore>
 8012438:	3002      	adds	r0, #2
 801243a:	2802      	cmp	r0, #2
 801243c:	d802      	bhi.n	8012444 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
#endif
}
 801243e:	4a08      	ldr	r2, [pc, #32]	; (8012460 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xc0>)
 8012440:	5610      	ldrsb	r0, [r2, r0]
 8012442:	e003      	b.n	801244c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 8012444:	f04f 30ff 	mov.w	r0, #4294967295
 8012448:	e000      	b.n	801244c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>
      case -2: return -2; // buffer full, request retry
      default: return -1; // UART error
    }

  } else {
    return 0; // no bytes to send -> no error
 801244a:	4620      	mov	r0, r4
  }
#endif
}
 801244c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8012450:	0801b7e4 	.word	0x0801b7e4
 8012454:	2000020a 	.word	0x2000020a
 8012458:	20000208 	.word	0x20000208
 801245c:	200001ec 	.word	0x200001ec
 8012460:	0801b912 	.word	0x0801b912

08012464 <MIOS32_UART_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: UART_MIDI device not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend(u8 uart_port, mios32_midi_package_t package)
{
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4605      	mov	r5, r0
 8012468:	460c      	mov	r4, r1
  s32 error;

  while( (error=MIOS32_UART_MIDI_PackageSend_NonBlocking(uart_port, package)) == -2);
 801246a:	4621      	mov	r1, r4
 801246c:	4628      	mov	r0, r5
 801246e:	f7ff ff97 	bl	80123a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking>
 8012472:	1c81      	adds	r1, r0, #2
 8012474:	d0f9      	beq.n	801246a <MIOS32_UART_MIDI_PackageSend+0x6>

  return error;
}
 8012476:	bd38      	pop	{r3, r4, r5, pc}

08012478 <MIOS32_UART_MIDI_PackageReceive>:
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8012478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801247c:	4680      	mov	r8, r0
 801247e:	460f      	mov	r7, r1
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
 8012480:	f7ff ff20 	bl	80122c4 <MIOS32_UART_MIDI_CheckAvailable>
 8012484:	2800      	cmp	r0, #0
 8012486:	f000 80c5 	beq.w	8012614 <MIOS32_UART_MIDI_PackageReceive+0x19c>
    return -1;

  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 801248a:	4d65      	ldr	r5, [pc, #404]	; (8012620 <MIOS32_UART_MIDI_PackageReceive+0x1a8>)
 801248c:	260c      	movs	r6, #12
 801248e:	fb06 f608 	mul.w	r6, r6, r8
 8012492:	19ac      	adds	r4, r5, r6
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8012494:	4640      	mov	r0, r8
 8012496:	f001 fded 	bl	8014074 <MIOS32_UART_RxBufferGet>
 801249a:	2800      	cmp	r0, #0
 801249c:	f2c0 80a1 	blt.w	80125e2 <MIOS32_UART_MIDI_PackageReceive+0x16a>
    u8 byte = (u8)status;

    if( byte & 0x80 ) { // new MIDI status
 80124a0:	0602      	lsls	r2, r0, #24
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
    u8 byte = (u8)status;
 80124a2:	b2c3      	uxtb	r3, r0

    if( byte & 0x80 ) { // new MIDI status
 80124a4:	d552      	bpl.n	801254c <MIOS32_UART_MIDI_PackageReceive+0xd4>
      if( byte >= 0xf8 ) { // events >= 0xf8 don't change the running status and can just be forwarded
 80124a6:	2bf7      	cmp	r3, #247	; 0xf7
 80124a8:	d908      	bls.n	80124bc <MIOS32_UART_MIDI_PackageReceive+0x44>
	// Realtime messages don't change the running status and can be sent immediately
	// They also don't touch the timeout counter!
	package->cin = 0xf; // F: single byte
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	f041 020f 	orr.w	r2, r1, #15
 80124b0:	603a      	str	r2, [r7, #0]
	package->evnt0 = byte;
 80124b2:	707b      	strb	r3, [r7, #1]
	package->evnt1 = 0x00;
 80124b4:	2300      	movs	r3, #0
 80124b6:	70bb      	strb	r3, [r7, #2]
	package->evnt2 = 0x00;
 80124b8:	70fb      	strb	r3, [r7, #3]
 80124ba:	e0af      	b.n	801261c <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	package_complete = 1;
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 80124bc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80124c0:	4958      	ldr	r1, [pc, #352]	; (8012624 <MIOS32_UART_MIDI_PackageReceive+0x1ac>)
	package->evnt0 = byte;
	package->evnt1 = 0x00;
	package->evnt2 = 0x00;
	package_complete = 1;
      } else {
	midix->running_status = byte;
 80124c2:	7123      	strb	r3, [r4, #4]
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 80124c4:	5c89      	ldrb	r1, [r1, r2]
 80124c6:	7161      	strb	r1, [r4, #5]

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
 80124c8:	b109      	cbz	r1, 80124ce <MIOS32_UART_MIDI_PackageReceive+0x56>
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 80124ca:	2100      	movs	r1, #0
 80124cc:	e037      	b.n	801253e <MIOS32_UART_MIDI_PackageReceive+0xc6>
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 80124ce:	f000 000f 	and.w	r0, r0, #15
 80124d2:	4a55      	ldr	r2, [pc, #340]	; (8012628 <MIOS32_UART_MIDI_PackageReceive+0x1b0>)
 80124d4:	5c12      	ldrb	r2, [r2, r0]

	  if( byte == 0xf0 ) {
 80124d6:	2bf0      	cmp	r3, #240	; 0xf0
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 80124d8:	7162      	strb	r2, [r4, #5]

	  if( byte == 0xf0 ) {
 80124da:	d103      	bne.n	80124e4 <MIOS32_UART_MIDI_PackageReceive+0x6c>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
 80124dc:	2201      	movs	r2, #1

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];

	  if( byte == 0xf0 ) {
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
 80124de:	7063      	strb	r3, [r4, #1]
	    midix->sysex_ctr = 0x01;
 80124e0:	71e2      	strb	r2, [r4, #7]
 80124e2:	e7f2      	b.n	80124ca <MIOS32_UART_MIDI_PackageReceive+0x52>
	  } else if( byte == 0xf7 ) {
 80124e4:	2bf7      	cmp	r3, #247	; 0xf7
 80124e6:	d11d      	bne.n	8012524 <MIOS32_UART_MIDI_PackageReceive+0xac>
	    switch( midix->sysex_ctr ) {
 80124e8:	79e2      	ldrb	r2, [r4, #7]
 80124ea:	7820      	ldrb	r0, [r4, #0]
 80124ec:	b142      	cbz	r2, 8012500 <MIOS32_UART_MIDI_PackageReceive+0x88>
 80124ee:	2a01      	cmp	r2, #1
 80124f0:	d10e      	bne.n	8012510 <MIOS32_UART_MIDI_PackageReceive+0x98>
		midix->package.evnt0 = 0xf7;
		midix->package.evnt1 = 0x00;
		midix->package.evnt2 = 0x00;
		break;
	      case 1:
		midix->package.cin = 6; // 6: SysEx ends with two bytes
 80124f2:	2206      	movs	r2, #6
 80124f4:	f362 0003 	bfi	r0, r2, #0, #4
 80124f8:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
 80124fa:	70a3      	strb	r3, [r4, #2]
		midix->package.evnt2 = 0x00;
 80124fc:	70e1      	strb	r1, [r4, #3]
		break;
 80124fe:	e00c      	b.n	801251a <MIOS32_UART_MIDI_PackageReceive+0xa2>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
	  } else if( byte == 0xf7 ) {
	    switch( midix->sysex_ctr ) {
 	      case 0:
		midix->package.cin = 5; // 5: SysEx ends with single byte
 8012500:	2105      	movs	r1, #5
 8012502:	f361 0003 	bfi	r0, r1, #0, #4
 8012506:	7020      	strb	r0, [r4, #0]
		midix->package.evnt0 = 0xf7;
 8012508:	7063      	strb	r3, [r4, #1]
		midix->package.evnt1 = 0x00;
 801250a:	70a2      	strb	r2, [r4, #2]
		midix->package.evnt2 = 0x00;
 801250c:	70e2      	strb	r2, [r4, #3]
		break;
 801250e:	e004      	b.n	801251a <MIOS32_UART_MIDI_PackageReceive+0xa2>
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
		midix->package.evnt2 = 0x00;
		break;
	      default:
		midix->package.cin = 7; // 7: SysEx ends with three bytes
 8012510:	2107      	movs	r1, #7
 8012512:	f361 0003 	bfi	r0, r1, #0, #4
 8012516:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
 8012518:	70e3      	strb	r3, [r4, #3]
		break;
	    }
	    *package = midix->package;
 801251a:	6823      	ldr	r3, [r4, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 801251c:	2000      	movs	r0, #0
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
		break;
	    }
	    *package = midix->package;
 801251e:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8012520:	71e0      	strb	r0, [r4, #7]
 8012522:	e00b      	b.n	801253c <MIOS32_UART_MIDI_PackageReceive+0xc4>
	  } else if( !midix->expected_bytes ) {
 8012524:	2a00      	cmp	r2, #0
 8012526:	d1d0      	bne.n	80124ca <MIOS32_UART_MIDI_PackageReceive+0x52>
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8012528:	7821      	ldrb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
 801252a:	7063      	strb	r3, [r4, #1]
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
	  } else if( !midix->expected_bytes ) {
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 801252c:	2005      	movs	r0, #5
 801252e:	f360 0103 	bfi	r1, r0, #0, #4
 8012532:	7021      	strb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
	    midix->package.evnt1 = 0x00;
 8012534:	70a2      	strb	r2, [r4, #2]
	    midix->package.evnt2 = 0x00;
 8012536:	70e2      	strb	r2, [r4, #3]
	    *package = midix->package;
 8012538:	6823      	ldr	r3, [r4, #0]
 801253a:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
 801253c:	2101      	movs	r1, #1
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 801253e:	7963      	ldrb	r3, [r4, #5]
	midix->timeout_ctr = 0; // reset timeout counter
 8012540:	2000      	movs	r0, #0
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 8012542:	71a3      	strb	r3, [r4, #6]
	midix->timeout_ctr = 0; // reset timeout counter
 8012544:	8120      	strh	r0, [r4, #8]
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8012546:	2900      	cmp	r1, #0
 8012548:	d0a4      	beq.n	8012494 <MIOS32_UART_MIDI_PackageReceive+0x1c>
 801254a:	e067      	b.n	801261c <MIOS32_UART_MIDI_PackageReceive+0x1a4>

	midix->wait_bytes = midix->expected_bytes;
	midix->timeout_ctr = 0; // reset timeout counter
      }
    } else {
      if( midix->running_status == 0xf0 ) {
 801254c:	7922      	ldrb	r2, [r4, #4]
 801254e:	2af0      	cmp	r2, #240	; 0xf0
 8012550:	d117      	bne.n	8012582 <MIOS32_UART_MIDI_PackageReceive+0x10a>
	switch( ++midix->sysex_ctr ) {
 8012552:	79e2      	ldrb	r2, [r4, #7]
 8012554:	1c51      	adds	r1, r2, #1
 8012556:	b2c8      	uxtb	r0, r1
 8012558:	2801      	cmp	r0, #1
 801255a:	71e0      	strb	r0, [r4, #7]
 801255c:	d003      	beq.n	8012566 <MIOS32_UART_MIDI_PackageReceive+0xee>
 801255e:	2802      	cmp	r0, #2
 8012560:	d103      	bne.n	801256a <MIOS32_UART_MIDI_PackageReceive+0xf2>
  	  case 1:
	    midix->package.evnt0 = byte; 
	    break;
	  case 2: 
	    midix->package.evnt1 = byte; 
 8012562:	70a3      	strb	r3, [r4, #2]
	    break;
 8012564:	e796      	b.n	8012494 <MIOS32_UART_MIDI_PackageReceive+0x1c>
      }
    } else {
      if( midix->running_status == 0xf0 ) {
	switch( ++midix->sysex_ctr ) {
  	  case 1:
	    midix->package.evnt0 = byte; 
 8012566:	7063      	strb	r3, [r4, #1]
	    break;
 8012568:	e794      	b.n	8012494 <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  case 2: 
	    midix->package.evnt1 = byte; 
	    break;
	  default: // 3
	    midix->package.evnt2 = byte;
 801256a:	70e3      	strb	r3, [r4, #3]

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
 801256c:	5dab      	ldrb	r3, [r5, r6]
 801256e:	2204      	movs	r2, #4
 8012570:	f362 0303 	bfi	r3, r2, #0, #4
 8012574:	55ab      	strb	r3, [r5, r6]
	    *package = midix->package;
 8012576:	59a9      	ldr	r1, [r5, r6]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8012578:	2000      	movs	r0, #0
	  default: // 3
	    midix->package.evnt2 = byte;

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
	    *package = midix->package;
 801257a:	6039      	str	r1, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 801257c:	71e0      	strb	r0, [r4, #7]
	    midix->timeout_ctr = 0; // reset timeout counter
 801257e:	8120      	strh	r0, [r4, #8]
 8012580:	e04c      	b.n	801261c <MIOS32_UART_MIDI_PackageReceive+0x1a4>
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
 8012582:	79a0      	ldrb	r0, [r4, #6]
 8012584:	b920      	cbnz	r0, 8012590 <MIOS32_UART_MIDI_PackageReceive+0x118>
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8012586:	7962      	ldrb	r2, [r4, #5]
	  midix->timeout_ctr = 0; // reset timeout counter
 8012588:	8120      	strh	r0, [r4, #8]
	    midix->timeout_ctr = 0; // reset timeout counter
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 801258a:	1e51      	subs	r1, r2, #1
 801258c:	71a1      	strb	r1, [r4, #6]
 801258e:	e001      	b.n	8012594 <MIOS32_UART_MIDI_PackageReceive+0x11c>
	  midix->timeout_ctr = 0; // reset timeout counter
	} else {
	  --midix->wait_bytes;
 8012590:	1e41      	subs	r1, r0, #1
 8012592:	71a1      	strb	r1, [r4, #6]
	}

	if( midix->expected_bytes == 1 ) {
 8012594:	7960      	ldrb	r0, [r4, #5]
 8012596:	2801      	cmp	r0, #1
 8012598:	d102      	bne.n	80125a0 <MIOS32_UART_MIDI_PackageReceive+0x128>
	  midix->package.evnt1 = byte;
 801259a:	70a3      	strb	r3, [r4, #2]
	  midix->package.evnt2 = 0x00;
 801259c:	2300      	movs	r3, #0
 801259e:	e003      	b.n	80125a8 <MIOS32_UART_MIDI_PackageReceive+0x130>
	} else {
	  if( midix->wait_bytes )
 80125a0:	79a2      	ldrb	r2, [r4, #6]
 80125a2:	b10a      	cbz	r2, 80125a8 <MIOS32_UART_MIDI_PackageReceive+0x130>
	    midix->package.evnt1 = byte;
 80125a4:	70a3      	strb	r3, [r4, #2]
 80125a6:	e000      	b.n	80125aa <MIOS32_UART_MIDI_PackageReceive+0x132>
	  else
	    midix->package.evnt2 = byte;
 80125a8:	70e3      	strb	r3, [r4, #3]
	}
	
	if( !midix->wait_bytes ) {
 80125aa:	79a3      	ldrb	r3, [r4, #6]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f47f af71 	bne.w	8012494 <MIOS32_UART_MIDI_PackageReceive+0x1c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
 80125b2:	7920      	ldrb	r0, [r4, #4]
 80125b4:	5daa      	ldrb	r2, [r5, r6]
 80125b6:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 80125ba:	29f0      	cmp	r1, #240	; 0xf0
 80125bc:	d001      	beq.n	80125c2 <MIOS32_UART_MIDI_PackageReceive+0x14a>
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
 80125be:	0901      	lsrs	r1, r0, #4
 80125c0:	e008      	b.n	80125d4 <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
 80125c2:	7963      	ldrb	r3, [r4, #5]
 80125c4:	b11b      	cbz	r3, 80125ce <MIOS32_UART_MIDI_PackageReceive+0x156>
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d103      	bne.n	80125d2 <MIOS32_UART_MIDI_PackageReceive+0x15a>
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
 80125ca:	2102      	movs	r1, #2
 80125cc:	e002      	b.n	80125d4 <MIOS32_UART_MIDI_PackageReceive+0x15c>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
 80125ce:	2105      	movs	r1, #5
 80125d0:	e000      	b.n	80125d4 <MIOS32_UART_MIDI_PackageReceive+0x15c>
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
		break;
  	      default: 
		midix->package.cin = 3; // 3: SysEx common with three bytes
 80125d2:	2103      	movs	r1, #3
 80125d4:	f361 0203 	bfi	r2, r1, #0, #4
 80125d8:	55aa      	strb	r2, [r5, r6]
		break;
	    }
	  }

	  midix->package.evnt0 = midix->running_status;
 80125da:	7060      	strb	r0, [r4, #1]
	  // midix->package.evnt1 = // already stored
	  // midix->package.evnt2 = // already stored
	  *package = midix->package;
 80125dc:	59a8      	ldr	r0, [r5, r6]
 80125de:	6038      	str	r0, [r7, #0]
 80125e0:	e01c      	b.n	801261c <MIOS32_UART_MIDI_PackageReceive+0x1a4>
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 80125e2:	2000      	movs	r0, #0
      }
    }
  }

  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
 80125e4:	79a1      	ldrb	r1, [r4, #6]
 80125e6:	b171      	cbz	r1, 8012606 <MIOS32_UART_MIDI_PackageReceive+0x18e>
 80125e8:	8922      	ldrh	r2, [r4, #8]
 80125ea:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80125ee:	d90a      	bls.n	8012606 <MIOS32_UART_MIDI_PackageReceive+0x18e>
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 80125f0:	2300      	movs	r3, #0
 80125f2:	51ab      	str	r3, [r5, r6]
  midix->running_status = 0x00;
 80125f4:	7123      	strb	r3, [r4, #4]
  midix->expected_bytes = 0x00;
 80125f6:	7163      	strb	r3, [r4, #5]
  midix->wait_bytes = 0x00;
 80125f8:	71a3      	strb	r3, [r4, #6]
  midix->sysex_ctr = 0x00;
 80125fa:	71e3      	strb	r3, [r4, #7]
  midix->timeout_ctr = 0;
 80125fc:	8123      	strh	r3, [r4, #8]
  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
    // stop waiting
    MIOS32_UART_MIDI_RecordReset(uart_port);
    // notify that incomplete package has been received
    return -10;
 80125fe:	f06f 0009 	mvn.w	r0, #9
 8012602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
 8012606:	2800      	cmp	r0, #0
 8012608:	bf0c      	ite	eq
 801260a:	f04f 30ff 	moveq.w	r0, #4294967295
 801260e:	2000      	movne	r0, #0
 8012610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 8012614:	f04f 30ff 	mov.w	r0, #4294967295
 8012618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 801261c:	2001      	movs	r0, #1
 801261e:	e7e1      	b.n	80125e4 <MIOS32_UART_MIDI_PackageReceive+0x16c>
 8012620:	200001f0 	.word	0x200001f0
 8012624:	0801b905 	.word	0x0801b905
 8012628:	0801b7d4 	.word	0x0801b7d4

0801262c <MIOS32_SPI_MIDI_Init>:
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[0]);
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[1]);

  return status;
#endif
}
 801262c:	f04f 30ff 	mov.w	r0, #4294967295
 8012630:	4770      	bx	lr

08012632 <MIOS32_SPI_MIDI_Periodic_mS>:
  MIOS32_SPI_MIDI_MUTEX_GIVE;
#endif

  return 0; // no error
#endif
}
 8012632:	2000      	movs	r0, #0
 8012634:	4770      	bx	lr

08012636 <MIOS32_SPI_MIDI_PackageSend>:
  if( error >= 0 ) // no error: reset timeout counter
    timeout_ctr = 0;

  return error;
#endif
}
 8012636:	f04f 30ff 	mov.w	r0, #4294967295
 801263a:	4770      	bx	lr

0801263c <MIOS32_SPI_MIDI_PackageReceive>:
  --rx_ringbuffer_size;
  MIOS32_IRQ_Enable();

  return rx_ringbuffer_size;
#endif
}
 801263c:	f04f 30ff 	mov.w	r0, #4294967295
 8012640:	4770      	bx	lr

08012642 <MIOS32_IIC_MIDI_Init>:
  // TODO: send optimisation flag to IIC_MIDI device once it has been scanned!
#endif

  return 0; // no error
#endif
}
 8012642:	f04f 30ff 	mov.w	r0, #4294967295
 8012646:	4770      	bx	lr

08012648 <MIOS32_IIC_MIDI_Periodic_mS>:
s32 MIOS32_IIC_MIDI_Periodic_mS(void)
{
  // currently only a dummy - RS optimisation handled by IIC_MIDI device

  return 0;
}
 8012648:	2000      	movs	r0, #0
 801264a:	4770      	bx	lr

0801264c <MIOS32_IIC_MIDI_PackageSend>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IIC_MIDI_PackageSend(u8 iic_port, mios32_midi_package_t package)
{
  return _MIOS32_IIC_MIDI_PackageSend(iic_port, package, 0); // blocking mode
}
 801264c:	f04f 30ff 	mov.w	r0, #4294967295
 8012650:	4770      	bx	lr

08012652 <MIOS32_IIC_BS_Init>:
  if( MIOS32_IIC_BS_ScanBankSticks() < 0 )
    return -2; // we don't expect that any other task accesses the IIC port yet!

  return 0; // no error
#endif
}
 8012652:	f04f 30ff 	mov.w	r0, #4294967295
 8012656:	4770      	bx	lr

08012658 <MIOS32_MF_Init>:
    mf_state[i].config.cfg.pwm_duty_cycle_up = 1;
  }

  return 0;
#endif
}
 8012658:	f04f 30ff 	mov.w	r0, #4294967295
 801265c:	4770      	bx	lr
	...

08012660 <MIOS32_TIMESTAMP_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8012660:	b910      	cbnz	r0, 8012668 <MIOS32_TIMESTAMP_Init+0x8>
    return -1; // unsupported mode

  timestamp = 0;
 8012662:	4b03      	ldr	r3, [pc, #12]	; (8012670 <MIOS32_TIMESTAMP_Init+0x10>)
 8012664:	6018      	str	r0, [r3, #0]

  return 0;
 8012666:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012668:	f04f 30ff 	mov.w	r0, #4294967295

  timestamp = 0;

  return 0;
}
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop
 8012670:	20000210 	.word	0x20000210

08012674 <MIOS32_TIMESTAMP_Inc>:
//!
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Inc(void)
{
  ++timestamp;
 8012674:	4b02      	ldr	r3, [pc, #8]	; (8012680 <MIOS32_TIMESTAMP_Inc+0xc>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	1c50      	adds	r0, r2, #1
 801267a:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 801267c:	2000      	movs	r0, #0
 801267e:	4770      	bx	lr
 8012680:	20000210 	.word	0x20000210

08012684 <MIOS32_TIMESTAMP_Get>:
//! \return the current timestamp
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Get(void)
{
  return timestamp;
}
 8012684:	4b01      	ldr	r3, [pc, #4]	; (801268c <MIOS32_TIMESTAMP_Get+0x8>)
 8012686:	6818      	ldr	r0, [r3, #0]
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	20000210 	.word	0x20000210

08012690 <MIOS32_SYS_Reset>:
//!   <LI>reset STM32
//! </UL>
//! \return < 0 if reset failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Reset(void)
{
 8012690:	b510      	push	{r4, lr}
  // disable all RTOS tasks
#ifndef MIOS32_DONT_USE_FREERTOS
  portENTER_CRITICAL(); // port specific FreeRTOS function to disable tasks (nested)
 8012692:	f7fe fd65 	bl	8011160 <vPortEnterCritical>

  // print reboot message if LCD enabled
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 8012696:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801269a:	f7ff f807 	bl	80116ac <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 801269e:	2000      	movs	r0, #0
 80126a0:	f7ff f806 	bl	80116b0 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80126a4:	2000      	movs	r0, #0
 80126a6:	f7fe ff17 	bl	80114d8 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80126aa:	f7fe ff65 	bl	8011578 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80126ae:	2000      	movs	r0, #0
 80126b0:	4601      	mov	r1, r0
 80126b2:	f7fe ff17 	bl	80114e4 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Bootloader Mode "); // 16 chars
 80126b6:	481e      	ldr	r0, [pc, #120]	; (8012730 <MIOS32_SYS_Reset+0xa0>)
 80126b8:	f7fe ffbc 	bl	8011634 <MIOS32_LCD_PrintString>
#endif

  // disable all interrupts
  MIOS32_IRQ_Disable();
 80126bc:	f000 f940 	bl	8012940 <MIOS32_IRQ_Disable>

#if !defined(MIOS32_DONT_USE_BOARD_LED)
  // turn off all board LEDs
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);
 80126c0:	f04f 30ff 	mov.w	r0, #4294967295
 80126c4:	2100      	movs	r1, #0
 80126c6:	f000 fddd 	bl	8013284 <MIOS32_BOARD_LED_Set>
 80126ca:	2432      	movs	r4, #50	; 0x32

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
      MIOS32_DELAY_Wait_uS(1000);
 80126cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126d0:	f000 fe56 	bl	8013380 <MIOS32_DELAY_Wait_uS>
#endif

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
 80126d4:	3c01      	subs	r4, #1
 80126d6:	d1f9      	bne.n	80126cc <MIOS32_SYS_Reset+0x3c>
      MIOS32_DELAY_Wait_uS(1000);
  }

  // reset peripherals
  RCC_AHB1PeriphResetCmd(0xfffffffe, ENABLE); // don't reset GPIOA due to USB pins
 80126d8:	f06f 0001 	mvn.w	r0, #1
 80126dc:	2101      	movs	r1, #1
 80126de:	f002 fa23 	bl	8014b28 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffff7f, ENABLE); // don't reset OTG_FS, so that the connectuion can survive
 80126e2:	f06f 0080 	mvn.w	r0, #128	; 0x80
 80126e6:	2101      	movs	r1, #1
 80126e8:	f002 fa2a 	bl	8014b40 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, ENABLE);
 80126ec:	f04f 30ff 	mov.w	r0, #4294967295
 80126f0:	2101      	movs	r1, #1
 80126f2:	f002 fa31 	bl	8014b58 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, ENABLE);
 80126f6:	f04f 30ff 	mov.w	r0, #4294967295
 80126fa:	2101      	movs	r1, #1
 80126fc:	f002 fa38 	bl	8014b70 <RCC_APB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(0xffffffff, DISABLE);
 8012700:	f04f 30ff 	mov.w	r0, #4294967295
 8012704:	4621      	mov	r1, r4
 8012706:	f002 fa0f 	bl	8014b28 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffffff, DISABLE);
 801270a:	f04f 30ff 	mov.w	r0, #4294967295
 801270e:	4621      	mov	r1, r4
 8012710:	f002 fa16 	bl	8014b40 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, DISABLE);
 8012714:	f04f 30ff 	mov.w	r0, #4294967295
 8012718:	4621      	mov	r1, r4
 801271a:	f002 fa1d 	bl	8014b58 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, DISABLE);
 801271e:	f04f 30ff 	mov.w	r0, #4294967295
 8012722:	4621      	mov	r1, r4
 8012724:	f002 fa24 	bl	8014b70 <RCC_APB2PeriphResetCmd>
  // not available in v3.0.0 library anymore? - copy from v2.0.1
  SCB->AIRCR = NVIC_AIRCR_VECTKEY | (1 << NVIC_VECTRESET);
#endif
#if 1
  // and this is the code for v3.3.0
  SCB->AIRCR = (0x5fa << SCB_AIRCR_VECTKEY_Pos) | (1 << SCB_AIRCR_VECTRESET_Pos);
 8012728:	4a02      	ldr	r2, [pc, #8]	; (8012734 <MIOS32_SYS_Reset+0xa4>)
 801272a:	4b03      	ldr	r3, [pc, #12]	; (8012738 <MIOS32_SYS_Reset+0xa8>)
 801272c:	60da      	str	r2, [r3, #12]
 801272e:	e7fe      	b.n	801272e <MIOS32_SYS_Reset+0x9e>
 8012730:	0801b915 	.word	0x0801b915
 8012734:	05fa0001 	.word	0x05fa0001
 8012738:	e000ed00 	.word	0xe000ed00

0801273c <MIOS32_SYS_ChipIDGet>:
//! \return the chip ID
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_ChipIDGet(void)
{
  // stored in DBGMCU_IDCODE register
  return MEM32(0xe0042000);
 801273c:	4b01      	ldr	r3, [pc, #4]	; (8012744 <MIOS32_SYS_ChipIDGet+0x8>)
 801273e:	6818      	ldr	r0, [r3, #0]
}
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	e0042000 	.word	0xe0042000

08012748 <MIOS32_SYS_FlashSizeGet>:
//! \return the Flash size in bytes
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_FlashSizeGet(void)
{
  // stored in the so called "electronic signature"
  return (u32)MEM16(0x1fff7a22) * 0x400;
 8012748:	4b02      	ldr	r3, [pc, #8]	; (8012754 <MIOS32_SYS_FlashSizeGet+0xc>)
 801274a:	8818      	ldrh	r0, [r3, #0]
 801274c:	b281      	uxth	r1, r0
}
 801274e:	0288      	lsls	r0, r1, #10
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	1fff7a22 	.word	0x1fff7a22

08012758 <MIOS32_SYS_RAMSizeGet>:
#if (defined(MIOS32_PROCESSOR_STM32F407VG) || defined(MIOS32_PROCESSOR_STM32F407VE))
  return 192*1024; // unfortunately not stored in signature...
#else
# error "Please define RAM size here"
#endif
}
 8012758:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 801275c:	4770      	bx	lr
	...

08012760 <MIOS32_SYS_SerialNumberGet>:
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 8012760:	2300      	movs	r3, #0
    u8 b = MEM8(0x1fff7a10 + (i/2));
 8012762:	4a0b      	ldr	r2, [pc, #44]	; (8012790 <MIOS32_SYS_SerialNumberGet+0x30>)
 8012764:	1059      	asrs	r1, r3, #1
 8012766:	1889      	adds	r1, r1, r2
 8012768:	780a      	ldrb	r2, [r1, #0]
    if( !(i & 1) )
 801276a:	07d9      	lsls	r1, r3, #31
      b >>= 4;
 801276c:	bf58      	it	pl
 801276e:	0912      	lsrpl	r2, r2, #4
    b &= 0x0f;
 8012770:	f002 020f 	and.w	r2, r2, #15

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
 8012774:	2a09      	cmp	r2, #9
 8012776:	bf94      	ite	ls
 8012778:	2130      	movls	r1, #48	; 0x30
 801277a:	2137      	movhi	r1, #55	; 0x37
 801277c:	188a      	adds	r2, r1, r2
 801277e:	54c2      	strb	r2, [r0, r3]
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 8012780:	3301      	adds	r3, #1
 8012782:	2b18      	cmp	r3, #24
 8012784:	d1ed      	bne.n	8012762 <MIOS32_SYS_SerialNumberGet+0x2>
      b >>= 4;
    b &= 0x0f;

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
  }
  str[i] = 0;
 8012786:	2100      	movs	r1, #0
 8012788:	7601      	strb	r1, [r0, #24]

  return 0; // no error
}
 801278a:	4608      	mov	r0, r1
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	1fff7a10 	.word	0x1fff7a10

08012794 <MIOS32_SYS_TimeSet>:
//! Note that this format isn't completely compatible to the NTP timestamp format,
//! as the fraction has only mS accuracy
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_TimeSet(mios32_sys_time_t t)
{
 8012794:	b510      	push	{r4, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	4604      	mov	r4, r0
 801279a:	e88d 0003 	stmia.w	sp, {r0, r1}
  // taken from STM32 example "RTC/Calendar"
  // adapted to clock RTC via HSE  oscillator

  // Enable PWR and BKP clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 801279e:	2101      	movs	r1, #1
 80127a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80127a4:	f002 f9a8 	bl	8014af8 <RCC_APB1PeriphClockCmd>

  // Allow access to BKP Domain
  PWR_BackupAccessCmd(ENABLE);
 80127a8:	2001      	movs	r0, #1
 80127aa:	f002 f91d 	bl	80149e8 <PWR_BackupAccessCmd>

  // Select HSE (divided by 16) as RTC Clock Source
#if EXT_CRYSTAL_FRQ != 8000000
# error "Please configure alternative clock divider here"
#endif
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(8 MHz / 16) = 2 uS
 80127ae:	4817      	ldr	r0, [pc, #92]	; (801280c <MIOS32_SYS_TimeSet+0x78>)
 80127b0:	f002 f96c 	bl	8014a8c <RCC_RTCCLKConfig>

  // Enable RTC Clock
  RCC_RTCCLKCmd(ENABLE);
 80127b4:	2001      	movs	r0, #1
 80127b6:	f002 f981 	bl	8014abc <RCC_RTCCLKCmd>

  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);
 80127ba:	a803      	add	r0, sp, #12
 80127bc:	f002 f9f0 	bl	8014ba0 <RTC_StructInit>

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 80127c0:	2063      	movs	r0, #99	; 0x63
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 80127c2:	f241 3187 	movw	r1, #4999	; 0x1387
  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 80127c6:	9004      	str	r0, [sp, #16]
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
  RTC_Init(&RTC_InitStruct);
 80127c8:	a803      	add	r0, sp, #12
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 80127ca:	9105      	str	r1, [sp, #20]
  RTC_Init(&RTC_InitStruct);
 80127cc:	f002 fa16 	bl	8014bfc <RTC_Init>

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
 80127d0:	a802      	add	r0, sp, #8
 80127d2:	f002 fa9f 	bl	8014d14 <RTC_TimeStructInit>
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80127d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80127da:	fbb4 f3f2 	udiv	r3, r4, r2
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80127de:	213c      	movs	r1, #60	; 0x3c
 80127e0:	fb02 4013 	mls	r0, r2, r3, r4
  RTC_Init(&RTC_InitStruct);

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80127e4:	f88d 3008 	strb.w	r3, [sp, #8]
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80127e8:	fbb4 f3f1 	udiv	r3, r4, r1

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80127ec:	fbb0 f2f1 	udiv	r2, r0, r1
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80127f0:	fb01 4413 	mls	r4, r1, r3, r4
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 80127f4:	2000      	movs	r0, #0
 80127f6:	a902      	add	r1, sp, #8

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80127f8:	f88d 2009 	strb.w	r2, [sp, #9]
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80127fc:	f88d 400a 	strb.w	r4, [sp, #10]
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8012800:	f002 fa42 	bl	8014c88 <RTC_SetTime>
  // (fraction not taken into account here)

  return 0; // no error
}
 8012804:	2000      	movs	r0, #0
 8012806:	b006      	add	sp, #24
 8012808:	bd10      	pop	{r4, pc}
 801280a:	bf00      	nop
 801280c:	00100300 	.word	0x00100300

08012810 <MIOS32_SYS_Init>:
//! </UL>
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
 8012810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012812:	4604      	mov	r4, r0
 8012814:	2800      	cmp	r0, #0
 8012816:	f040 8083 	bne.w	8012920 <MIOS32_SYS_Init+0x110>
    return -1; // unsupported mode

  // Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOE and AFIO clocks
  RCC_AHB1PeriphClockCmd(
 801281a:	201f      	movs	r0, #31
 801281c:	2101      	movs	r1, #1
 801281e:	f002 f953 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012822:	4b41      	ldr	r3, [pc, #260]	; (8012928 <MIOS32_SYS_Init+0x118>)
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
 8012824:	9400      	str	r4, [sp, #0]
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012826:	689a      	ldr	r2, [r3, #8]
 8012828:	f002 000c 	and.w	r0, r2, #12
 801282c:	2808      	cmp	r0, #8
 801282e:	d102      	bne.n	8012836 <MIOS32_SYS_Init+0x26>
    HSEStatus = SUCCESS;
 8012830:	2001      	movs	r0, #1
 8012832:	9000      	str	r0, [sp, #0]
 8012834:	e05d      	b.n	80128f2 <MIOS32_SYS_Init+0xe2>
  } else {
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8012836:	6819      	ldr	r1, [r3, #0]
 8012838:	f041 0201 	orr.w	r2, r1, #1
 801283c:	601a      	str	r2, [r3, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 801283e:	609c      	str	r4, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012840:	6818      	ldr	r0, [r3, #0]
 8012842:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012846:	4839      	ldr	r0, [pc, #228]	; (801292c <MIOS32_SYS_Init+0x11c>)

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012848:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 801284c:	601a      	str	r2, [r3, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 801284e:	6058      	str	r0, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012850:	6819      	ldr	r1, [r3, #0]
 8012852:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8012856:	601a      	str	r2, [r3, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8012858:	60dc      	str	r4, [r3, #12]
       AHB/APBx prescalers and Flash settings ----------------------------------*/

    /******************************************************************************/
    /*            PLL (clocked by HSE) used as System clock source                */
    /******************************************************************************/
    __IO uint32_t StartUpCounter = 0;
 801285a:	9401      	str	r4, [sp, #4]
  
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801285c:	6818      	ldr	r0, [r3, #0]
 801285e:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8012862:	6019      	str	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8012864:	4b30      	ldr	r3, [pc, #192]	; (8012928 <MIOS32_SYS_Init+0x118>)
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 801286c:	9000      	str	r0, [sp, #0]
      StartUpCounter++;
 801286e:	9901      	ldr	r1, [sp, #4]
 8012870:	1c4a      	adds	r2, r1, #1
 8012872:	9201      	str	r2, [sp, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8012874:	9800      	ldr	r0, [sp, #0]
 8012876:	b918      	cbnz	r0, 8012880 <MIOS32_SYS_Init+0x70>
 8012878:	9901      	ldr	r1, [sp, #4]
 801287a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801287e:	d1f1      	bne.n	8012864 <MIOS32_SYS_Init+0x54>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
      HSEStatus = (uint32_t)0x01;
 8012886:	bf18      	it	ne
 8012888:	2201      	movne	r2, #1
    } else {
      HSEStatus = (uint32_t)0x00;
 801288a:	9200      	str	r2, [sp, #0]
    }

    if (HSEStatus == (uint32_t)0x01) {
 801288c:	9800      	ldr	r0, [sp, #0]
 801288e:	2801      	cmp	r0, #1
 8012890:	d12f      	bne.n	80128f2 <MIOS32_SYS_Init+0xe2>
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012892:	4b25      	ldr	r3, [pc, #148]	; (8012928 <MIOS32_SYS_Init+0x118>)
      PWR->CR |= PWR_CR_VOS;
 8012894:	4826      	ldr	r0, [pc, #152]	; (8012930 <MIOS32_SYS_Init+0x120>)
      HSEStatus = (uint32_t)0x00;
    }

    if (HSEStatus == (uint32_t)0x01) {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012896:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012898:	f041 5280 	orr.w	r2, r1, #268435456	; 0x10000000
 801289c:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 801289e:	6801      	ldr	r1, [r0, #0]
 80128a0:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 80128a4:	6002      	str	r2, [r0, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80128a6:	6898      	ldr	r0, [r3, #8]
 80128a8:	6098      	str	r0, [r3, #8]
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80128aa:	6899      	ldr	r1, [r3, #8]
 80128ac:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 80128b0:	609a      	str	r2, [r3, #8]
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80128b2:	6898      	ldr	r0, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80128b4:	4a1f      	ldr	r2, [pc, #124]	; (8012934 <MIOS32_SYS_Init+0x124>)
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80128b6:	f440 51a0 	orr.w	r1, r0, #5120	; 0x1400
 80128ba:	6099      	str	r1, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80128bc:	605a      	str	r2, [r3, #4]
	             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 80128be:	6818      	ldr	r0, [r3, #0]
 80128c0:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 80128c4:	6019      	str	r1, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80128c6:	6818      	ldr	r0, [r3, #0]
 80128c8:	4a17      	ldr	r2, [pc, #92]	; (8012928 <MIOS32_SYS_Init+0x118>)
 80128ca:	0180      	lsls	r0, r0, #6
 80128cc:	d5fb      	bpl.n	80128c6 <MIOS32_SYS_Init+0xb6>
   
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80128ce:	4b1a      	ldr	r3, [pc, #104]	; (8012938 <MIOS32_SYS_Init+0x128>)
 80128d0:	f240 6105 	movw	r1, #1541	; 0x605
 80128d4:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80128d6:	6890      	ldr	r0, [r2, #8]
 80128d8:	f020 0103 	bic.w	r1, r0, #3
 80128dc:	6091      	str	r1, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 80128de:	6893      	ldr	r3, [r2, #8]
 80128e0:	f043 0002 	orr.w	r0, r3, #2
 80128e4:	6090      	str	r0, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80128e6:	4a10      	ldr	r2, [pc, #64]	; (8012928 <MIOS32_SYS_Init+0x118>)
 80128e8:	6891      	ldr	r1, [r2, #8]
 80128ea:	f001 030c 	and.w	r3, r1, #12
 80128ee:	2b08      	cmp	r3, #8
 80128f0:	d1f9      	bne.n	80128e6 <MIOS32_SYS_Init+0xd6>
         configuration. User can add here some code to deal with this error */
    }
  }

  // Set the Vector Table base address as specified in .ld file (-> mios32_sys_isr_vector)
  NVIC_SetVectorTable((u32)&mios32_sys_isr_vector, 0x0);
 80128f2:	2100      	movs	r1, #0
 80128f4:	4811      	ldr	r0, [pc, #68]	; (801293c <MIOS32_SYS_Init+0x12c>)
 80128f6:	f001 ff59 	bl	80147ac <NVIC_SetVectorTable>
  NVIC_PriorityGroupConfig(MIOS32_IRQ_PRIGROUP);
 80128fa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80128fe:	f001 ff4b 	bl	8014798 <NVIC_PriorityGroupConfig>

#ifndef MIOS32_SYS_DONT_INIT_RTC
  // initialize system clock
  mios32_sys_time_t t = { .seconds=0, .fraction_ms=0 };
 8012902:	2200      	movs	r2, #0
 8012904:	9202      	str	r2, [sp, #8]
 8012906:	9203      	str	r2, [sp, #12]
  MIOS32_SYS_TimeSet(t);
 8012908:	a904      	add	r1, sp, #16
 801290a:	e911 0003 	ldmdb	r1, {r0, r1}
 801290e:	f7ff ff41 	bl	8012794 <MIOS32_SYS_TimeSet>
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
 8012912:	9b00      	ldr	r3, [sp, #0]
 8012914:	2b01      	cmp	r3, #1
 8012916:	bf14      	ite	ne
 8012918:	f04f 30ff 	movne.w	r0, #4294967295
 801291c:	2000      	moveq	r0, #0
 801291e:	e001      	b.n	8012924 <MIOS32_SYS_Init+0x114>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012920:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SYS_TimeSet(t);
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
}
 8012924:	b004      	add	sp, #16
 8012926:	bd10      	pop	{r4, pc}
 8012928:	40023800 	.word	0x40023800
 801292c:	24003010 	.word	0x24003010
 8012930:	40007000 	.word	0x40007000
 8012934:	07405408 	.word	0x07405408
 8012938:	40023c00 	.word	0x40023c00
 801293c:	08004000 	.word	0x08004000

08012940 <MIOS32_IRQ_Disable>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Disable(void)
{
  // get current priority if nested level == 0
  if( !nested_ctr ) {
 8012940:	4b07      	ldr	r3, [pc, #28]	; (8012960 <MIOS32_IRQ_Disable+0x20>)
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	b91a      	cbnz	r2, 801294e <MIOS32_IRQ_Disable+0xe>
    __asm volatile (			   \
 8012946:	f3ef 8110 	mrs	r1, PRIMASK
 801294a:	4806      	ldr	r0, [pc, #24]	; (8012964 <MIOS32_IRQ_Disable+0x24>)
 801294c:	6001      	str	r1, [r0, #0]
		    : "=r" (prev_primask)  \
		    );
  }

  // disable interrupts
  __asm volatile ( \
 801294e:	f04f 0001 	mov.w	r0, #1
 8012952:	f380 8810 	msr	PRIMASK, r0
		  "	mov r0, #1     \n" \
		  "	msr primask, r0\n" \
		  :::"r0"	 \
		  );

  ++nested_ctr;
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	1c51      	adds	r1, r2, #1
 801295a:	6019      	str	r1, [r3, #0]

  return 0; // no error
}
 801295c:	2000      	movs	r0, #0
 801295e:	4770      	bx	lr
 8012960:	20000218 	.word	0x20000218
 8012964:	20000214 	.word	0x20000214

08012968 <MIOS32_IRQ_Enable>:
//! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
 8012968:	4a07      	ldr	r2, [pc, #28]	; (8012988 <MIOS32_IRQ_Enable+0x20>)
 801296a:	6813      	ldr	r3, [r2, #0]
 801296c:	b13b      	cbz	r3, 801297e <MIOS32_IRQ_Enable+0x16>
    return -1; // nesting error

  // decrease nesting level
  --nested_ctr;
 801296e:	1e58      	subs	r0, r3, #1
 8012970:	6010      	str	r0, [r2, #0]

  // set back previous priority once nested level reached 0 again
  if( nested_ctr == 0 ) {
 8012972:	b938      	cbnz	r0, 8012984 <MIOS32_IRQ_Enable+0x1c>
    __asm volatile ( \
 8012974:	4905      	ldr	r1, [pc, #20]	; (801298c <MIOS32_IRQ_Enable+0x24>)
 8012976:	680a      	ldr	r2, [r1, #0]
 8012978:	f382 8810 	msr	PRIMASK, r2
 801297c:	e002      	b.n	8012984 <MIOS32_IRQ_Enable+0x1c>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
    return -1; // nesting error
 801297e:	f04f 30ff 	mov.w	r0, #4294967295
 8012982:	4770      	bx	lr
		    "	msr primask, %0\n" \
		    :: "r" (prev_primask)  \
		    );
  }

  return 0; // no error
 8012984:	2000      	movs	r0, #0
}
 8012986:	4770      	bx	lr
 8012988:	20000218 	.word	0x20000218
 801298c:	20000214 	.word	0x20000214

08012990 <MIOS32_IRQ_Install>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
 8012990:	290f      	cmp	r1, #15
 8012992:	d81c      	bhi.n	80129ce <MIOS32_IRQ_Install+0x3e>
    return -1; // invalid priority

  u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 8012994:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <MIOS32_IRQ_Install+0x44>)
 8012996:	68da      	ldr	r2, [r3, #12]
 8012998:	43d3      	mvns	r3, r2
 801299a:	f3c3 2202 	ubfx	r2, r3, #8, #3
  u32 tmppre = (4 - tmppriority);
 801299e:	f1c2 0304 	rsb	r3, r2, #4
  tmppriority = priority << tmppre;
 80129a2:	fa01 f103 	lsl.w	r1, r1, r3
  tmppriority = tmppriority << 4;
 80129a6:	0109      	lsls	r1, r1, #4
  NVIC->IP[IRQn] = tmppriority;
 80129a8:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80129ac:	b2ca      	uxtb	r2, r1
 80129ae:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80129b2:	2301      	movs	r3, #1
 80129b4:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 80129b8:	b242      	sxtb	r2, r0
 80129ba:	f000 001f 	and.w	r0, r0, #31
 80129be:	0951      	lsrs	r1, r2, #5
 80129c0:	fa03 f200 	lsl.w	r2, r3, r0
 80129c4:	4804      	ldr	r0, [pc, #16]	; (80129d8 <MIOS32_IRQ_Install+0x48>)
 80129c6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
 80129ca:	2000      	movs	r0, #0
 80129cc:	4770      	bx	lr
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
    return -1; // invalid priority
 80129ce:	f04f 30ff 	mov.w	r0, #4294967295
  NVIC->IP[IRQn] = tmppriority;

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
}
 80129d2:	4770      	bx	lr
 80129d4:	e000ed00 	.word	0xe000ed00
 80129d8:	e000e100 	.word	0xe000e100

080129dc <MIOS32_SPI_IO_Init>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported pin driver mode
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_IO_Init(u8 spi, mios32_spi_pin_driver_t spi_pin_driver)
{
 80129dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129de:	4605      	mov	r5, r0
 80129e0:	460c      	mov	r4, r1
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 80129e2:	4668      	mov	r0, sp
 80129e4:	f001 ffbb 	bl	801495e <GPIO_StructInit>

  // select pin driver and output mode
  u8 slave = 0;
  switch( spi_pin_driver ) {
 80129e8:	2c07      	cmp	r4, #7
 80129ea:	f200 811c 	bhi.w	8012c26 <MIOS32_SPI_IO_Init+0x24a>
 80129ee:	e8df f004 	tbb	[pc, r4]
 80129f2:	080a      	.short	0x080a
 80129f4:	120c0406 	.word	0x120c0406
 80129f8:	1a15      	.short	0x1a15
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // select pin driver and output mode
  u8 slave = 0;
 80129fa:	2400      	movs	r4, #0
 80129fc:	e014      	b.n	8012a28 <MIOS32_SPI_IO_Init+0x4c>
 80129fe:	2400      	movs	r4, #0
 8012a00:	e00d      	b.n	8012a1e <MIOS32_SPI_IO_Init+0x42>
 8012a02:	2400      	movs	r4, #0
 8012a04:	e008      	b.n	8012a18 <MIOS32_SPI_IO_Init+0x3c>
 8012a06:	2400      	movs	r4, #0
 8012a08:	e000      	b.n	8012a0c <MIOS32_SPI_IO_Init+0x30>
  switch( spi_pin_driver ) {
    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG:
      slave = 1;
 8012a0a:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012a0c:	2102      	movs	r1, #2
 8012a0e:	f88d 1005 	strb.w	r1, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012a12:	2000      	movs	r0, #0
 8012a14:	e00c      	b.n	8012a30 <MIOS32_SPI_IO_Init+0x54>
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG_OD:
      slave = 1;
 8012a16:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012a18:	2302      	movs	r3, #2
 8012a1a:	e006      	b.n	8012a2a <MIOS32_SPI_IO_Init+0x4e>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK:
      slave = 1;
 8012a1c:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012a1e:	2000      	movs	r0, #0
 8012a20:	f88d 0005 	strb.w	r0, [sp, #5]
 8012a24:	e004      	b.n	8012a30 <MIOS32_SPI_IO_Init+0x54>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
 8012a26:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f88d 3005 	strb.w	r3, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012a2e:	2001      	movs	r0, #1

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012a30:	2d01      	cmp	r5, #1

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012a32:	f88d 0006 	strb.w	r0, [sp, #6]

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012a36:	d03f      	beq.n	8012ab8 <MIOS32_SPI_IO_Init+0xdc>
 8012a38:	d303      	bcc.n	8012a42 <MIOS32_SPI_IO_Init+0x66>
 8012a3a:	2d02      	cmp	r5, #2
 8012a3c:	f040 80f0 	bne.w	8012c20 <MIOS32_SPI_IO_Init+0x244>
 8012a40:	e093      	b.n	8012b6a <MIOS32_SPI_IO_Init+0x18e>
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      MIOS32_SPI0_RCLK1_AF;
      MIOS32_SPI0_RCLK2_AF;
      MIOS32_SPI0_SCLK_AF;
 8012a42:	2105      	movs	r1, #5
 8012a44:	460a      	mov	r2, r1
 8012a46:	4879      	ldr	r0, [pc, #484]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012a48:	f001 ff96 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI0_MISO_AF;
 8012a4c:	4877      	ldr	r0, [pc, #476]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012a4e:	2106      	movs	r1, #6
 8012a50:	2205      	movs	r2, #5
 8012a52:	f001 ff91 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI0_MOSI_AF;
 8012a56:	4875      	ldr	r0, [pc, #468]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012a58:	2107      	movs	r1, #7
 8012a5a:	2205      	movs	r2, #5
 8012a5c:	f001 ff8c 	bl	8014978 <GPIO_PinAFConfig>

      if( slave ) {
 8012a60:	2c00      	cmp	r4, #0
 8012a62:	f040 80e0 	bne.w	8012c26 <MIOS32_SPI_IO_Init+0x24a>
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012a66:	ad02      	add	r5, sp, #8
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012a68:	2702      	movs	r7, #2
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012a6a:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012a6c:	486f      	ldr	r0, [pc, #444]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012a6e:	f845 6d08 	str.w	r6, [r5, #-8]!
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012a72:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012a74:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012a78:	f001 ff24 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012a7c:	2180      	movs	r1, #128	; 0x80
 8012a7e:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012a80:	486a      	ldr	r0, [pc, #424]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012a82:	4669      	mov	r1, sp
 8012a84:	f001 ff1e 	bl	80148c4 <GPIO_Init>
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012a88:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012a8a:	2204      	movs	r2, #4
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012a8c:	4868      	ldr	r0, [pc, #416]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012a8e:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012a90:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012a92:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012a96:	f001 ff15 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012a9e:	4865      	ldr	r0, [pc, #404]	; (8012c34 <MIOS32_SPI_IO_Init+0x258>)
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012aa0:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012aa2:	4669      	mov	r1, sp
 8012aa4:	f001 ff0e 	bl	80148c4 <GPIO_Init>
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8012aa8:	2040      	movs	r0, #64	; 0x40
 8012aaa:	9000      	str	r0, [sp, #0]
#else
# warning "Please doublecheck if RE3 has to be set to 1 to disable MEMs"
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012aac:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012ab0:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
 8012ab4:	485d      	ldr	r0, [pc, #372]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012ab6:	e090      	b.n	8012bda <MIOS32_SPI_IO_Init+0x1fe>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      MIOS32_SPI1_RCLK1_AF;
 8012ab8:	485d      	ldr	r0, [pc, #372]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012aba:	210c      	movs	r1, #12
 8012abc:	2205      	movs	r2, #5
 8012abe:	f001 ff5b 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
 8012ac2:	485b      	ldr	r0, [pc, #364]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012ac4:	210d      	movs	r1, #13
 8012ac6:	2205      	movs	r2, #5
 8012ac8:	f001 ff56 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI1_MISO_AF;
 8012acc:	4858      	ldr	r0, [pc, #352]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012ace:	210e      	movs	r1, #14
 8012ad0:	2205      	movs	r2, #5
 8012ad2:	f001 ff51 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI1_MOSI_AF;
 8012ad6:	4856      	ldr	r0, [pc, #344]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012ad8:	210f      	movs	r1, #15
 8012ada:	2205      	movs	r2, #5
 8012adc:	f001 ff4c 	bl	8014978 <GPIO_PinAFConfig>
 8012ae0:	2602      	movs	r6, #2
 8012ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
 8012ae6:	9100      	str	r1, [sp, #0]
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012ae8:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012aec:	4850      	ldr	r0, [pc, #320]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012aee:	4669      	mov	r1, sp
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
 8012af0:	b1dc      	cbz	r4, 8012b2a <MIOS32_SPI_IO_Init+0x14e>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012af2:	f001 fee7 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012afa:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012afc:	484c      	ldr	r0, [pc, #304]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012afe:	4669      	mov	r1, sp
 8012b00:	f001 fee0 	bl	80148c4 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b08:	4849      	ldr	r0, [pc, #292]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012b0a:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b0c:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012b0e:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b12:	f001 fed7 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012b1a:	4846      	ldr	r0, [pc, #280]	; (8012c34 <MIOS32_SPI_IO_Init+0x258>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012b1c:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012b1e:	4669      	mov	r1, sp
 8012b20:	f001 fed0 	bl	80148c4 <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012b24:	f88d 6004 	strb.w	r6, [sp, #4]
 8012b28:	e01c      	b.n	8012b64 <MIOS32_SPI_IO_Init+0x188>
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012b2a:	f001 fecb 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012b2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012b32:	483f      	ldr	r0, [pc, #252]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012b34:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012b36:	4669      	mov	r1, sp
 8012b38:	f001 fec4 	bl	80148c4 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b40:	483b      	ldr	r0, [pc, #236]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012b42:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b44:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012b46:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012b4a:	f001 febb 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012b4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b52:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012b54:	4669      	mov	r1, sp
 8012b56:	4837      	ldr	r0, [pc, #220]	; (8012c34 <MIOS32_SPI_IO_Init+0x258>)
 8012b58:	f001 feb4 	bl	80148c4 <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012b5c:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012b60:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
 8012b64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012b68:	e035      	b.n	8012bd6 <MIOS32_SPI_IO_Init+0x1fa>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      MIOS32_SPI2_RCLK1_AF;
 8012b6a:	4830      	ldr	r0, [pc, #192]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
 8012b6c:	210f      	movs	r1, #15
 8012b6e:	2206      	movs	r2, #6
 8012b70:	f001 ff02 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
 8012b74:	482e      	ldr	r0, [pc, #184]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012b76:	2103      	movs	r1, #3
 8012b78:	2206      	movs	r2, #6
 8012b7a:	f001 fefd 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI2_MISO_AF;
 8012b7e:	482c      	ldr	r0, [pc, #176]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012b80:	2104      	movs	r1, #4
 8012b82:	2206      	movs	r2, #6
 8012b84:	f001 fef8 	bl	8014978 <GPIO_PinAFConfig>
      MIOS32_SPI2_MOSI_AF;
 8012b88:	4829      	ldr	r0, [pc, #164]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012b8a:	2105      	movs	r1, #5
 8012b8c:	2206      	movs	r2, #6
 8012b8e:	f001 fef3 	bl	8014978 <GPIO_PinAFConfig>
 8012b92:	2208      	movs	r2, #8

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012b94:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
 8012b98:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012b9a:	4825      	ldr	r0, [pc, #148]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012b9c:	4669      	mov	r1, sp
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
      MIOS32_SPI2_MISO_AF;
      MIOS32_SPI2_MOSI_AF;

      if( slave ) {
 8012b9e:	b30c      	cbz	r4, 8012be4 <MIOS32_SPI_IO_Init+0x208>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012ba0:	f001 fe90 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012ba4:	2120      	movs	r1, #32
 8012ba6:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012ba8:	4821      	ldr	r0, [pc, #132]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012baa:	4669      	mov	r1, sp
 8012bac:	f001 fe8a 	bl	80148c4 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012bb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012bb4:	481d      	ldr	r0, [pc, #116]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012bb6:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012bb8:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012bba:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012bbe:	f001 fe81 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012bc6:	481a      	ldr	r0, [pc, #104]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012bc8:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012bca:	4669      	mov	r1, sp
 8012bcc:	f001 fe7a 	bl	80148c4 <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012bd0:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MISO_PIN;
 8012bd4:	2010      	movs	r0, #16
 8012bd6:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
 8012bd8:	4815      	ldr	r0, [pc, #84]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012bda:	4669      	mov	r1, sp
 8012bdc:	f001 fe72 	bl	80148c4 <GPIO_Init>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8012be0:	2000      	movs	r0, #0
 8012be2:	e022      	b.n	8012c2a <MIOS32_SPI_IO_Init+0x24e>
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012be4:	f001 fe6e 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012be8:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012bea:	4811      	ldr	r0, [pc, #68]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012bec:	9600      	str	r6, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012bee:	4669      	mov	r1, sp
 8012bf0:	f001 fe68 	bl	80148c4 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012bf4:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012bfa:	480c      	ldr	r0, [pc, #48]	; (8012c2c <MIOS32_SPI_IO_Init+0x250>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012bfc:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012bfe:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012c00:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012c04:	f001 fe5e 	bl	80148c4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012c08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012c0c:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012c0e:	4669      	mov	r1, sp
 8012c10:	4807      	ldr	r0, [pc, #28]	; (8012c30 <MIOS32_SPI_IO_Init+0x254>)
 8012c12:	f001 fe57 	bl	80148c4 <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012c16:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012c1a:	f88d 6007 	strb.w	r6, [sp, #7]
 8012c1e:	e7d9      	b.n	8012bd4 <MIOS32_SPI_IO_Init+0x1f8>

      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012c20:	f06f 0001 	mvn.w	r0, #1
 8012c24:	e001      	b.n	8012c2a <MIOS32_SPI_IO_Init+0x24e>
      MIOS32_SPI0_MISO_AF;
      MIOS32_SPI0_MOSI_AF;

      if( slave ) {
#if 1
	return -3; // slave mode not supported for this pin
 8012c26:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c2c:	40020000 	.word	0x40020000
 8012c30:	40020400 	.word	0x40020400
 8012c34:	40020c00 	.word	0x40020c00

08012c38 <MIOS32_SPI_TransferByte>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferByte(u8 spi, u8 b)
{
  SPI_TypeDef *spi_ptr;

  switch( spi ) {
 8012c38:	2801      	cmp	r0, #1
 8012c3a:	d006      	beq.n	8012c4a <MIOS32_SPI_TransferByte+0x12>
 8012c3c:	d303      	bcc.n	8012c46 <MIOS32_SPI_TransferByte+0xe>
 8012c3e:	2802      	cmp	r0, #2
 8012c40:	d116      	bne.n	8012c70 <MIOS32_SPI_TransferByte+0x38>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8012c42:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <MIOS32_SPI_TransferByte+0x40>)
      break;
 8012c44:	e002      	b.n	8012c4c <MIOS32_SPI_TransferByte+0x14>
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8012c46:	4b0d      	ldr	r3, [pc, #52]	; (8012c7c <MIOS32_SPI_TransferByte+0x44>)
 8012c48:	e000      	b.n	8012c4c <MIOS32_SPI_TransferByte+0x14>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8012c4a:	4b0d      	ldr	r3, [pc, #52]	; (8012c80 <MIOS32_SPI_TransferByte+0x48>)
    default:
      return -2; // unsupported SPI port
  }

  // send byte
  spi_ptr->DR = b;
 8012c4c:	8199      	strh	r1, [r3, #12]

  // TK update: the dummy read above becomes obsolete since we are checking for SPI Master mode now
  // which requires a read operation as well

  // wait until SPI transfer finished
  if( spi_ptr->CR1 & SPI_Mode_Master ) {
 8012c4e:	881a      	ldrh	r2, [r3, #0]
 8012c50:	f402 7082 	and.w	r0, r2, #260	; 0x104
 8012c54:	b130      	cbz	r0, 8012c64 <MIOS32_SPI_TransferByte+0x2c>
    while( spi_ptr->SR & SPI_I2S_FLAG_BSY );
 8012c56:	891a      	ldrh	r2, [r3, #8]
 8012c58:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8012c5c:	b281      	uxth	r1, r0
 8012c5e:	2900      	cmp	r1, #0
 8012c60:	d1f9      	bne.n	8012c56 <MIOS32_SPI_TransferByte+0x1e>
 8012c62:	e002      	b.n	8012c6a <MIOS32_SPI_TransferByte+0x32>
  } else {
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
 8012c64:	8919      	ldrh	r1, [r3, #8]
 8012c66:	07ca      	lsls	r2, r1, #31
 8012c68:	d5fc      	bpl.n	8012c64 <MIOS32_SPI_TransferByte+0x2c>
  }

  // return received byte
  return spi_ptr->DR;
 8012c6a:	899b      	ldrh	r3, [r3, #12]
 8012c6c:	b298      	uxth	r0, r3
 8012c6e:	4770      	bx	lr
      spi_ptr = MIOS32_SPI2_PTR;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012c70:	f06f 0001 	mvn.w	r0, #1
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
  }

  // return received byte
  return spi_ptr->DR;
}
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	40003c00 	.word	0x40003c00
 8012c7c:	40013000 	.word	0x40013000
 8012c80:	40003800 	.word	0x40003800

08012c84 <MIOS32_SPI_TransferModeInit>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if invalid spi_prescaler selected
//! \return -4 if invalid spi_mode selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
 8012c84:	b570      	push	{r4, r5, r6, lr}
 8012c86:	b086      	sub	sp, #24
 8012c88:	4604      	mov	r4, r0
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
 8012c8a:	f44f 7082 	mov.w	r0, #260	; 0x104
 8012c8e:	f8ad 0006 	strh.w	r0, [sp, #6]
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012c92:	f44f 7000 	mov.w	r0, #512	; 0x200
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012c96:	2300      	movs	r3, #0
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012c98:	f8ad 000e 	strh.w	r0, [sp, #14]
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012c9c:	2007      	movs	r0, #7
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012c9e:	f8ad 3004 	strh.w	r3, [sp, #4]
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
 8012ca2:	f8ad 3008 	strh.w	r3, [sp, #8]
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
 8012ca6:	f8ad 3012 	strh.w	r3, [sp, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012caa:	f8ad 0014 	strh.w	r0, [sp, #20]

  switch( spi_mode ) {
 8012cae:	2907      	cmp	r1, #7
 8012cb0:	d860      	bhi.n	8012d74 <MIOS32_SPI_TransferModeInit+0xf0>
 8012cb2:	e8df f001 	tbb	[pc, r1]
 8012cb6:	1e08      	.short	0x1e08
 8012cb8:	0b041d14 	.word	0x0b041d14
 8012cbc:	1910      	.short	0x1910
    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012cbe:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012cc2:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK0_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8012cc6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012cca:	e015      	b.n	8012cf8 <MIOS32_SPI_TransferModeInit+0x74>
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012ccc:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012cd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012cd4:	e00d      	b.n	8012cf2 <MIOS32_SPI_TransferModeInit+0x6e>
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012cda:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012cde:	2302      	movs	r3, #2
 8012ce0:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	e007      	b.n	8012cf8 <MIOS32_SPI_TransferModeInit+0x74>
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012ce8:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012cec:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012cf6:	2301      	movs	r3, #1
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012cf8:	2a07      	cmp	r2, #7
    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012cfa:	f8ad 300c 	strh.w	r3, [sp, #12]
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012cfe:	d83f      	bhi.n	8012d80 <MIOS32_SPI_TransferModeInit+0xfc>
    return -3; // invalid prescaler selected

  switch( spi ) {
 8012d00:	2c01      	cmp	r4, #1
 8012d02:	d01d      	beq.n	8012d40 <MIOS32_SPI_TransferModeInit+0xbc>
 8012d04:	d303      	bcc.n	8012d0e <MIOS32_SPI_TransferModeInit+0x8a>
 8012d06:	2c02      	cmp	r4, #2
 8012d08:	d137      	bne.n	8012d7a <MIOS32_SPI_TransferModeInit+0xf6>

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012d0a:	4d1f      	ldr	r5, [pc, #124]	; (8012d88 <MIOS32_SPI_TransferModeInit+0x104>)
 8012d0c:	e019      	b.n	8012d42 <MIOS32_SPI_TransferModeInit+0xbe>
  switch( spi ) {
    case 0: {
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
 8012d0e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8012d12:	2900      	cmp	r1, #0
 8012d14:	d034      	beq.n	8012d80 <MIOS32_SPI_TransferModeInit+0xfc>
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012d16:	4c1d      	ldr	r4, [pc, #116]	; (8012d8c <MIOS32_SPI_TransferModeInit+0x108>)
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8012d18:	00d2      	lsls	r2, r2, #3
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	a901      	add	r1, sp, #4
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012d1e:	8825      	ldrh	r5, [r4, #0]
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8012d20:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8012d24:	f001 fffc 	bl	8014d20 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012d28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012d2c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8012d30:	b2ad      	uxth	r5, r5
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012d32:	d11d      	bne.n	8012d70 <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI0_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8012d34:	8823      	ldrh	r3, [r4, #0]
 8012d36:	405d      	eors	r5, r3
 8012d38:	07a8      	lsls	r0, r5, #30
 8012d3a:	d019      	beq.n	8012d70 <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	e014      	b.n	8012d6a <MIOS32_SPI_TransferModeInit+0xe6>

    case 1: {
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI1_PTR->CR1;
 8012d40:	4d13      	ldr	r5, [pc, #76]	; (8012d90 <MIOS32_SPI_TransferModeInit+0x10c>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8012d42:	1e51      	subs	r1, r2, #1
 8012d44:	00ca      	lsls	r2, r1, #3
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8012d46:	4628      	mov	r0, r5
 8012d48:	a901      	add	r1, sp, #4

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012d4a:	882e      	ldrh	r6, [r5, #0]

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8012d4c:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8012d50:	f001 ffe6 	bl	8014d20 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012d54:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012d58:	f5b0 7f82 	cmp.w	r0, #260	; 0x104

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8012d5c:	b2b6      	uxth	r6, r6

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8012d5e:	d107      	bne.n	8012d70 <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI2_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8012d60:	882b      	ldrh	r3, [r5, #0]
 8012d62:	405e      	eors	r6, r3
 8012d64:	07b1      	lsls	r1, r6, #30
 8012d66:	d003      	beq.n	8012d70 <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8012d68:	4620      	mov	r0, r4
 8012d6a:	21ff      	movs	r1, #255	; 0xff
 8012d6c:	f7ff ff64 	bl	8012c38 <MIOS32_SPI_TransferByte>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8012d70:	2000      	movs	r0, #0
 8012d72:	e007      	b.n	8012d84 <MIOS32_SPI_TransferModeInit+0x100>
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;
    default:
      return -4; // invalid SPI clock/phase mode
 8012d74:	f06f 0003 	mvn.w	r0, #3
 8012d78:	e004      	b.n	8012d84 <MIOS32_SPI_TransferModeInit+0x100>
      }
#endif
    } break;

    default:
      return -2; // unsupported SPI port
 8012d7a:	f06f 0001 	mvn.w	r0, #1
 8012d7e:	e001      	b.n	8012d84 <MIOS32_SPI_TransferModeInit+0x100>
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
    return -3; // invalid prescaler selected
 8012d80:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012d84:	b006      	add	sp, #24
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
 8012d88:	40003c00 	.word	0x40003c00
 8012d8c:	40013000 	.word	0x40013000
 8012d90:	40003800 	.word	0x40003800

08012d94 <MIOS32_SPI_Init>:
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8012d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012d98:	4604      	mov	r4, r0
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8012d9a:	b090      	sub	sp, #64	; 0x40
  // currently only mode 0 supported
  if( mode != 0 )
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	f040 80ff 	bne.w	8012fa0 <MIOS32_SPI_Init+0x20c>
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8012da2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8012fe0 <MIOS32_SPI_Init+0x24c>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8012da6:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8012fe4 <MIOS32_SPI_Init+0x250>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8012daa:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8012fe8 <MIOS32_SPI_Init+0x254>
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8012dae:	a801      	add	r0, sp, #4
 8012db0:	f001 fd30 	bl	8014814 <DMA_StructInit>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8012db4:	2304      	movs	r3, #4
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8012db6:	f44f 6000 	mov.w	r0, #2048	; 0x800
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 8012dba:	f8c9 4000 	str.w	r4, [r9]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012dbe:	2102      	movs	r1, #2
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 8012dc0:	f8a8 3018 	strh.w	r3, [r8, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 8012dc4:	f8aa 0018 	strh.w	r0, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f7ff fe07 	bl	80129dc <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012dce:	2101      	movs	r1, #1
 8012dd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012dd4:	f001 fe9c 	bl	8014b10 <RCC_APB2PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8012dd8:	2101      	movs	r1, #1
 8012dda:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8012dde:	f001 fe73 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8012de2:	2101      	movs	r1, #1
 8012de4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8012de8:	f001 fe6e 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
 8012dec:	486f      	ldr	r0, [pc, #444]	; (8012fac <MIOS32_SPI_Init+0x218>)
 8012dee:	4621      	mov	r1, r4
 8012df0:	f001 fd21 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 8012df4:	496e      	ldr	r1, [pc, #440]	; (8012fb0 <MIOS32_SPI_Init+0x21c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8012df6:	486d      	ldr	r0, [pc, #436]	; (8012fac <MIOS32_SPI_Init+0x218>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 8012df8:	9102      	str	r1, [sp, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012dfa:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8012dfe:	f04f 66c0 	mov.w	r6, #100663296	; 0x6000000
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8012e02:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8012e06:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8012e08:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012e0a:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8012e0c:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012e0e:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8012e10:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012e12:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8012e14:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8012e16:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8012e18:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8012e1a:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8012e1c:	f001 fcd0 	bl	80147c0 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
 8012e20:	4864      	ldr	r0, [pc, #400]	; (8012fb4 <MIOS32_SPI_Init+0x220>)
 8012e22:	4621      	mov	r1, r4
 8012e24:	f001 fd07 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
 8012e28:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8012e2a:	4862      	ldr	r0, [pc, #392]	; (8012fb4 <MIOS32_SPI_Init+0x220>)

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012e2c:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8012e2e:	2640      	movs	r6, #64	; 0x40
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8012e30:	a901      	add	r1, sp, #4
  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012e32:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8012e34:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012e36:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8012e38:	f001 fcc2 	bl	80147c0 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI0_PTR, ENABLE);
 8012e3c:	2101      	movs	r1, #1
 8012e3e:	485e      	ldr	r0, [pc, #376]	; (8012fb8 <MIOS32_SPI_Init+0x224>)
 8012e40:	f001 ffff 	bl	8014e42 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI0_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8012e44:	2201      	movs	r2, #1
 8012e46:	2103      	movs	r1, #3
 8012e48:	485b      	ldr	r0, [pc, #364]	; (8012fb8 <MIOS32_SPI_Init+0x224>)
 8012e4a:	f002 f812 	bl	8014e72 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI0_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8012e4e:	2105      	movs	r1, #5
 8012e50:	203a      	movs	r0, #58	; 0x3a
 8012e52:	f7ff fd9d 	bl	8012990 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(0, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8012e56:	2103      	movs	r1, #3
 8012e58:	2206      	movs	r2, #6
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7ff ff12 	bl	8012c84 <MIOS32_SPI_TransferModeInit>
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8012e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // SPI1
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI1

  // disable callback function
  spi_callback[1] = NULL;
 8012e64:	f8c9 4004 	str.w	r4, [r9, #4]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012e68:	2102      	movs	r1, #2
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8012e6a:	f8a8 2018 	strh.w	r2, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012e6e:	2001      	movs	r0, #1
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK2_PORT, MIOS32_SPI1_RCLK2_PIN, pin_value); break;
 8012e70:	f8aa 5018 	strh.w	r5, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012e74:	f7ff fdb2 	bl	80129dc <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8012e78:	2101      	movs	r1, #1
 8012e7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012e7e:	f001 fe3b 	bl	8014af8 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8012e82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8012e86:	2101      	movs	r1, #1
 8012e88:	f001 fe1e 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8012e8c:	2101      	movs	r1, #1
 8012e8e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8012e92:	f001 fe19 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
 8012e96:	4849      	ldr	r0, [pc, #292]	; (8012fbc <MIOS32_SPI_Init+0x228>)
 8012e98:	4621      	mov	r1, r4
 8012e9a:	f001 fccc 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 8012e9e:	4b48      	ldr	r3, [pc, #288]	; (8012fc0 <MIOS32_SPI_Init+0x22c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8012ea0:	4846      	ldr	r0, [pc, #280]	; (8012fbc <MIOS32_SPI_Init+0x228>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 8012ea2:	9302      	str	r3, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8012ea4:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
 8012ea6:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012ea8:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8012eaa:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012eac:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8012eae:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012eb0:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8012eb2:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8012eb4:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8012eb6:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8012eb8:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8012eba:	f001 fc81 	bl	80147c0 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
 8012ebe:	4841      	ldr	r0, [pc, #260]	; (8012fc4 <MIOS32_SPI_Init+0x230>)
 8012ec0:	4621      	mov	r1, r4
 8012ec2:	f001 fcb8 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8012ec6:	483f      	ldr	r0, [pc, #252]	; (8012fc4 <MIOS32_SPI_Init+0x230>)
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
 8012ec8:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8012eca:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012ecc:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012ece:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8012ed0:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012ed2:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 8012ed4:	f001 fc74 	bl	80147c0 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI1_PTR, ENABLE);
 8012ed8:	2101      	movs	r1, #1
 8012eda:	483b      	ldr	r0, [pc, #236]	; (8012fc8 <MIOS32_SPI_Init+0x234>)
 8012edc:	f001 ffb1 	bl	8014e42 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI1_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	2103      	movs	r1, #3
 8012ee4:	4838      	ldr	r0, [pc, #224]	; (8012fc8 <MIOS32_SPI_Init+0x234>)
 8012ee6:	f001 ffc4 	bl	8014e72 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI1_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8012eea:	2105      	movs	r1, #5
 8012eec:	200e      	movs	r0, #14
 8012eee:	f7ff fd4f 	bl	8012990 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(1, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8012ef2:	2206      	movs	r2, #6
 8012ef4:	2103      	movs	r1, #3
 8012ef6:	2001      	movs	r0, #1
 8012ef8:	f7ff fec4 	bl	8012c84 <MIOS32_SPI_TransferModeInit>
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8012efc:	4833      	ldr	r0, [pc, #204]	; (8012fcc <MIOS32_SPI_Init+0x238>)
  // SPI2
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI2

  // disable callback function
  spi_callback[2] = NULL;
 8012efe:	f8c9 4008 	str.w	r4, [r9, #8]
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8012f02:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8012f06:	f8a0 9018 	strh.w	r9, [r0, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012f0e:	2002      	movs	r0, #2
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012f10:	f8a8 1018 	strh.w	r1, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8012f14:	4601      	mov	r1, r0
 8012f16:	f7ff fd61 	bl	80129dc <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8012f1a:	2101      	movs	r1, #1
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	f001 fdeb 	bl	8014af8 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8012f22:	2101      	movs	r1, #1
 8012f24:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8012f28:	f001 fdce 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8012f32:	f001 fdc9 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
 8012f36:	4826      	ldr	r0, [pc, #152]	; (8012fd0 <MIOS32_SPI_Init+0x23c>)
 8012f38:	4621      	mov	r1, r4
 8012f3a:	f001 fc7c 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8012f3e:	4a25      	ldr	r2, [pc, #148]	; (8012fd4 <MIOS32_SPI_Init+0x240>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8012f40:	4823      	ldr	r0, [pc, #140]	; (8012fd0 <MIOS32_SPI_Init+0x23c>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8012f42:	9202      	str	r2, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8012f44:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
 8012f46:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012f48:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8012f4a:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012f4c:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8012f4e:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012f50:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8012f52:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8012f54:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8012f56:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8012f58:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8012f5a:	f001 fc31 	bl	80147c0 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
 8012f5e:	481e      	ldr	r0, [pc, #120]	; (8012fd8 <MIOS32_SPI_Init+0x244>)
 8012f60:	4621      	mov	r1, r4
 8012f62:	f001 fc68 	bl	8014836 <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8012f66:	481c      	ldr	r0, [pc, #112]	; (8012fd8 <MIOS32_SPI_Init+0x244>)
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
 8012f68:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8012f6a:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8012f6c:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8012f6e:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8012f70:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8012f72:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8012f74:	f001 fc24 	bl	80147c0 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI2_PTR, ENABLE);
 8012f78:	2101      	movs	r1, #1
 8012f7a:	4818      	ldr	r0, [pc, #96]	; (8012fdc <MIOS32_SPI_Init+0x248>)
 8012f7c:	f001 ff61 	bl	8014e42 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI2_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8012f80:	2103      	movs	r1, #3
 8012f82:	4816      	ldr	r0, [pc, #88]	; (8012fdc <MIOS32_SPI_Init+0x248>)
 8012f84:	2201      	movs	r2, #1
 8012f86:	f001 ff74 	bl	8014e72 <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI2_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8012f8a:	2105      	movs	r1, #5
 8012f8c:	200d      	movs	r0, #13
 8012f8e:	f7ff fcff 	bl	8012990 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8012f92:	2002      	movs	r0, #2
 8012f94:	2103      	movs	r1, #3
 8012f96:	2206      	movs	r2, #6
 8012f98:	f7ff fe74 	bl	8012c84 <MIOS32_SPI_TransferModeInit>
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	e001      	b.n	8012fa4 <MIOS32_SPI_Init+0x210>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012fa0:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
}
 8012fa4:	b010      	add	sp, #64	; 0x40
 8012fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012faa:	bf00      	nop
 8012fac:	40026440 	.word	0x40026440
 8012fb0:	4001300c 	.word	0x4001300c
 8012fb4:	40026458 	.word	0x40026458
 8012fb8:	40013000 	.word	0x40013000
 8012fbc:	40026058 	.word	0x40026058
 8012fc0:	4000380c 	.word	0x4000380c
 8012fc4:	40026070 	.word	0x40026070
 8012fc8:	40003800 	.word	0x40003800
 8012fcc:	40020000 	.word	0x40020000
 8012fd0:	40026040 	.word	0x40026040
 8012fd4:	40003c0c 	.word	0x40003c0c
 8012fd8:	40026088 	.word	0x40026088
 8012fdc:	40003c00 	.word	0x40003c00
 8012fe0:	2000021c 	.word	0x2000021c
 8012fe4:	40020400 	.word	0x40020400
 8012fe8:	40020c00 	.word	0x40020c00

08012fec <DMA2_Stream2_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Called when callback function has been defined and SPI transfer has finished
/////////////////////////////////////////////////////////////////////////////
MIOS32_SPI0_DMA_IRQHANDLER_FUNC
{
 8012fec:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI0_DMA_RX_PTR, MIOS32_SPI0_DMA_RX_IRQ_FLAGS);
 8012fee:	4804      	ldr	r0, [pc, #16]	; (8013000 <DMA2_Stream2_IRQHandler+0x14>)
 8012ff0:	4904      	ldr	r1, [pc, #16]	; (8013004 <DMA2_Stream2_IRQHandler+0x18>)
 8012ff2:	f001 fc29 	bl	8014848 <DMA_ClearFlag>

  if( spi_callback[0] != NULL )
 8012ff6:	4b04      	ldr	r3, [pc, #16]	; (8013008 <DMA2_Stream2_IRQHandler+0x1c>)
 8012ff8:	6818      	ldr	r0, [r3, #0]
 8012ffa:	b100      	cbz	r0, 8012ffe <DMA2_Stream2_IRQHandler+0x12>
    spi_callback[0]();
 8012ffc:	4780      	blx	r0
 8012ffe:	bd08      	pop	{r3, pc}
 8013000:	40026440 	.word	0x40026440
 8013004:	10390000 	.word	0x10390000
 8013008:	2000021c 	.word	0x2000021c

0801300c <DMA1_Stream3_IRQHandler>:
}

MIOS32_SPI1_DMA_IRQHANDLER_FUNC
{
 801300c:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI1_DMA_RX_PTR, MIOS32_SPI1_DMA_RX_IRQ_FLAGS);
 801300e:	4805      	ldr	r0, [pc, #20]	; (8013024 <DMA1_Stream3_IRQHandler+0x18>)
 8013010:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
 8013014:	f001 fc18 	bl	8014848 <DMA_ClearFlag>

  if( spi_callback[1] != NULL )
 8013018:	4b03      	ldr	r3, [pc, #12]	; (8013028 <DMA1_Stream3_IRQHandler+0x1c>)
 801301a:	6858      	ldr	r0, [r3, #4]
 801301c:	b100      	cbz	r0, 8013020 <DMA1_Stream3_IRQHandler+0x14>
    spi_callback[1]();
 801301e:	4780      	blx	r0
 8013020:	bd08      	pop	{r3, pc}
 8013022:	bf00      	nop
 8013024:	40026058 	.word	0x40026058
 8013028:	2000021c 	.word	0x2000021c

0801302c <DMA1_Stream2_IRQHandler>:
}

MIOS32_SPI2_DMA_IRQHANDLER_FUNC
{
 801302c:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI2_DMA_RX_PTR, MIOS32_SPI2_DMA_RX_IRQ_FLAGS);
 801302e:	4804      	ldr	r0, [pc, #16]	; (8013040 <DMA1_Stream2_IRQHandler+0x14>)
 8013030:	4904      	ldr	r1, [pc, #16]	; (8013044 <DMA1_Stream2_IRQHandler+0x18>)
 8013032:	f001 fc09 	bl	8014848 <DMA_ClearFlag>

  if( spi_callback[2] != NULL )
 8013036:	4b04      	ldr	r3, [pc, #16]	; (8013048 <DMA1_Stream2_IRQHandler+0x1c>)
 8013038:	6898      	ldr	r0, [r3, #8]
 801303a:	b100      	cbz	r0, 801303e <DMA1_Stream2_IRQHandler+0x12>
    spi_callback[2]();
 801303c:	4780      	blx	r0
 801303e:	bd08      	pop	{r3, pc}
 8013040:	40026040 	.word	0x40026040
 8013044:	10390000 	.word	0x10390000
 8013048:	2000021c 	.word	0x2000021c

0801304c <MIOS32_I2S_Init>:
//! Initializes I2S interface
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Init(u32 mode)
{
 801304c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 801304e:	4604      	mov	r4, r0
//! Initializes I2S interface
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Init(u32 mode)
{
 8013050:	b097      	sub	sp, #92	; 0x5c
  // currently only mode 0 supported
  if( mode != 0 )
 8013052:	2800      	cmp	r0, #0
 8013054:	f040 8091 	bne.w	801317a <MIOS32_I2S_Init+0x12e>
    return -1; // unsupported mode

  // configure I2S pins
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013058:	a801      	add	r0, sp, #4
 801305a:	f001 fc80 	bl	801495e <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801305e:	2502      	movs	r5, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_WS_PIN;
 8013060:	2610      	movs	r6, #16
  GPIO_Init(MIOS32_I2S_WS_PORT, &GPIO_InitStructure);
 8013062:	4848      	ldr	r0, [pc, #288]	; (8013184 <MIOS32_I2S_Init+0x138>)
    return -1; // unsupported mode

  // configure I2S pins
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8013064:	f88d 5009 	strb.w	r5, [sp, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_WS_PIN;
  GPIO_Init(MIOS32_I2S_WS_PORT, &GPIO_InitStructure);
 8013068:	a901      	add	r1, sp, #4

  // configure I2S pins
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801306a:	f88d 5008 	strb.w	r5, [sp, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801306e:	f88d 400a 	strb.w	r4, [sp, #10]

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_WS_PIN;
 8013072:	9601      	str	r6, [sp, #4]
  GPIO_Init(MIOS32_I2S_WS_PORT, &GPIO_InitStructure);
 8013074:	f001 fc26 	bl	80148c4 <GPIO_Init>
  GPIO_PinAFConfig(MIOS32_I2S_WS_PORT, MIOS32_I2S_WS_PINSRC, GPIO_AF_SPI3);
 8013078:	2206      	movs	r2, #6
 801307a:	2104      	movs	r1, #4
 801307c:	4841      	ldr	r0, [pc, #260]	; (8013184 <MIOS32_I2S_Init+0x138>)
 801307e:	f001 fc7b 	bl	8014978 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_CK_PIN;
 8013082:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_Init(MIOS32_I2S_CK_PORT, &GPIO_InitStructure);
 8013086:	4840      	ldr	r0, [pc, #256]	; (8013188 <MIOS32_I2S_Init+0x13c>)

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_WS_PIN;
  GPIO_Init(MIOS32_I2S_WS_PORT, &GPIO_InitStructure);
  GPIO_PinAFConfig(MIOS32_I2S_WS_PORT, MIOS32_I2S_WS_PINSRC, GPIO_AF_SPI3);

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_CK_PIN;
 8013088:	9701      	str	r7, [sp, #4]
  GPIO_Init(MIOS32_I2S_CK_PORT, &GPIO_InitStructure);
 801308a:	a901      	add	r1, sp, #4
 801308c:	f001 fc1a 	bl	80148c4 <GPIO_Init>
  GPIO_PinAFConfig(MIOS32_I2S_CK_PORT, MIOS32_I2S_CK_PINSRC, GPIO_AF_SPI3);
 8013090:	2206      	movs	r2, #6
 8013092:	210a      	movs	r1, #10
 8013094:	483c      	ldr	r0, [pc, #240]	; (8013188 <MIOS32_I2S_Init+0x13c>)
 8013096:	f001 fc6f 	bl	8014978 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_SD_PIN;
 801309a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init(MIOS32_I2S_SD_PORT, &GPIO_InitStructure);
 801309e:	483a      	ldr	r0, [pc, #232]	; (8013188 <MIOS32_I2S_Init+0x13c>)

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_CK_PIN;
  GPIO_Init(MIOS32_I2S_CK_PORT, &GPIO_InitStructure);
  GPIO_PinAFConfig(MIOS32_I2S_CK_PORT, MIOS32_I2S_CK_PINSRC, GPIO_AF_SPI3);

  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_SD_PIN;
 80130a0:	9301      	str	r3, [sp, #4]
  GPIO_Init(MIOS32_I2S_SD_PORT, &GPIO_InitStructure);
 80130a2:	a901      	add	r1, sp, #4
 80130a4:	f001 fc0e 	bl	80148c4 <GPIO_Init>
  GPIO_PinAFConfig(MIOS32_I2S_SD_PORT, MIOS32_I2S_SD_PINSRC, GPIO_AF_SPI3);
 80130a8:	2206      	movs	r2, #6
 80130aa:	210c      	movs	r1, #12
 80130ac:	4836      	ldr	r0, [pc, #216]	; (8013188 <MIOS32_I2S_Init+0x13c>)
 80130ae:	f001 fc63 	bl	8014978 <GPIO_PinAFConfig>

#if MIOS32_I2S_MCLK_ENABLE
  GPIO_InitStructure.GPIO_Pin = MIOS32_I2S_MCLK_PIN;
 80130b2:	2080      	movs	r0, #128	; 0x80
 80130b4:	9001      	str	r0, [sp, #4]
  GPIO_Init(MIOS32_I2S_MCLK_PORT, &GPIO_InitStructure);
 80130b6:	a901      	add	r1, sp, #4
 80130b8:	4833      	ldr	r0, [pc, #204]	; (8013188 <MIOS32_I2S_Init+0x13c>)
 80130ba:	f001 fc03 	bl	80148c4 <GPIO_Init>
  GPIO_PinAFConfig(MIOS32_I2S_MCLK_PORT, MIOS32_I2S_MCLK_PINSRC, GPIO_AF_SPI3);
 80130be:	2206      	movs	r2, #6
 80130c0:	2107      	movs	r1, #7
 80130c2:	4831      	ldr	r0, [pc, #196]	; (8013188 <MIOS32_I2S_Init+0x13c>)
 80130c4:	f001 fc58 	bl	8014978 <GPIO_PinAFConfig>
  GPIO_ResetBits(CODEC_RESET_PORT, CODEC_RESET_PIN); // activate reset
#endif


  // I2S initialisation
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 80130c8:	2101      	movs	r1, #1
 80130ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80130ce:	f001 fd13 	bl	8014af8 <RCC_APB1PeriphClockCmd>
  RCC_PLLI2SCmd(ENABLE); // new for STM32F4: enable I2S PLL
 80130d2:	2001      	movs	r0, #1
 80130d4:	f001 fc8e 	bl	80149f4 <RCC_PLLI2SCmd>
  I2S_InitTypeDef I2S_InitStructure;
  I2S_StructInit(&I2S_InitStructure);
 80130d8:	a803      	add	r0, sp, #12
 80130da:	f001 fea9 	bl	8014e30 <I2S_StructInit>
  I2S_InitStructure.I2S_Standard = MIOS32_I2S_STANDARD;
  I2S_InitStructure.I2S_DataFormat = MIOS32_I2S_DATA_FORMAT;
  I2S_InitStructure.I2S_MCLKOutput = MIOS32_I2S_MCLK_ENABLE ? I2S_MCLKOutput_Enable : I2S_MCLKOutput_Disable;
 80130de:	f44f 7100 	mov.w	r1, #512	; 0x200
  I2S_InitStructure.I2S_AudioFreq  = (u16)(MIOS32_I2S_AUDIO_FREQ);
 80130e2:	f648 1254 	movw	r2, #35156	; 0x8954
  RCC_PLLI2SCmd(ENABLE); // new for STM32F4: enable I2S PLL
  I2S_InitTypeDef I2S_InitStructure;
  I2S_StructInit(&I2S_InitStructure);
  I2S_InitStructure.I2S_Standard = MIOS32_I2S_STANDARD;
  I2S_InitStructure.I2S_DataFormat = MIOS32_I2S_DATA_FORMAT;
  I2S_InitStructure.I2S_MCLKOutput = MIOS32_I2S_MCLK_ENABLE ? I2S_MCLKOutput_Enable : I2S_MCLKOutput_Disable;
 80130e6:	f8ad 1012 	strh.w	r1, [sp, #18]
  I2S_InitStructure.I2S_AudioFreq  = (u16)(MIOS32_I2S_AUDIO_FREQ);
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low; // configuration required as well?
  I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 80130ea:	f8ad 100c 	strh.w	r1, [sp, #12]
  I2S_Init(SPI3, &I2S_InitStructure);
 80130ee:	4827      	ldr	r0, [pc, #156]	; (801318c <MIOS32_I2S_Init+0x140>)
  I2S_InitTypeDef I2S_InitStructure;
  I2S_StructInit(&I2S_InitStructure);
  I2S_InitStructure.I2S_Standard = MIOS32_I2S_STANDARD;
  I2S_InitStructure.I2S_DataFormat = MIOS32_I2S_DATA_FORMAT;
  I2S_InitStructure.I2S_MCLKOutput = MIOS32_I2S_MCLK_ENABLE ? I2S_MCLKOutput_Enable : I2S_MCLKOutput_Disable;
  I2S_InitStructure.I2S_AudioFreq  = (u16)(MIOS32_I2S_AUDIO_FREQ);
 80130f0:	9205      	str	r2, [sp, #20]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low; // configuration required as well?
  I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
  I2S_Init(SPI3, &I2S_InitStructure);
 80130f2:	a903      	add	r1, sp, #12
  // I2S initialisation
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  RCC_PLLI2SCmd(ENABLE); // new for STM32F4: enable I2S PLL
  I2S_InitTypeDef I2S_InitStructure;
  I2S_StructInit(&I2S_InitStructure);
  I2S_InitStructure.I2S_Standard = MIOS32_I2S_STANDARD;
 80130f4:	f8ad 400e 	strh.w	r4, [sp, #14]
  I2S_InitStructure.I2S_DataFormat = MIOS32_I2S_DATA_FORMAT;
 80130f8:	f8ad 4010 	strh.w	r4, [sp, #16]
  I2S_InitStructure.I2S_MCLKOutput = MIOS32_I2S_MCLK_ENABLE ? I2S_MCLKOutput_Enable : I2S_MCLKOutput_Disable;
  I2S_InitStructure.I2S_AudioFreq  = (u16)(MIOS32_I2S_AUDIO_FREQ);
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low; // configuration required as well?
 80130fc:	f8ad 4018 	strh.w	r4, [sp, #24]
  I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
  I2S_Init(SPI3, &I2S_InitStructure);
 8013100:	f001 fe2e 	bl	8014d60 <I2S_Init>
  I2S_Cmd(SPI3, ENABLE);
 8013104:	2101      	movs	r1, #1
 8013106:	4821      	ldr	r0, [pc, #132]	; (801318c <MIOS32_I2S_Init+0x140>)
 8013108:	f001 fea7 	bl	8014e5a <I2S_Cmd>

  // DMA Configuration for SPI Tx Event
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 801310c:	2101      	movs	r1, #1
 801310e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013112:	f001 fcd9 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>

  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 8013116:	a807      	add	r0, sp, #28
 8013118:	f001 fb7c 	bl	8014814 <DMA_StructInit>

  DMA_Cmd(DMA1_Stream5, DISABLE);
 801311c:	481c      	ldr	r0, [pc, #112]	; (8013190 <MIOS32_I2S_Init+0x144>)
 801311e:	4621      	mov	r1, r4
 8013120:	f001 fb89 	bl	8014836 <DMA_Cmd>
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);
 8013124:	481a      	ldr	r0, [pc, #104]	; (8013190 <MIOS32_I2S_Init+0x144>)
 8013126:	491b      	ldr	r1, [pc, #108]	; (8013194 <MIOS32_I2S_Init+0x148>)
 8013128:	f001 fb8e 	bl	8014848 <DMA_ClearFlag>
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI3->DR;
  //  DMA_InitStructure.DMA_MemoryBaseAddr = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801312c:	2040      	movs	r0, #64	; 0x40
  DMA_StructInit(&DMA_InitStructure);

  DMA_Cmd(DMA1_Stream5, DISABLE);
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI3->DR;
 801312e:	4b1a      	ldr	r3, [pc, #104]	; (8013198 <MIOS32_I2S_Init+0x14c>)
  //  DMA_InitStructure.DMA_MemoryBaseAddr = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8013130:	900a      	str	r0, [sp, #40]	; 0x28
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8013132:	f44f 6100 	mov.w	r1, #2048	; 0x800
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013136:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 801313a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  DMA_StructInit(&DMA_InitStructure);

  DMA_Cmd(DMA1_Stream5, DISABLE);
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI3->DR;
 801313e:	9308      	str	r3, [sp, #32]
  //  DMA_InitStructure.DMA_MemoryBaseAddr = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8013140:	910e      	str	r1, [sp, #56]	; 0x38
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8013142:	f44f 7380 	mov.w	r3, #256	; 0x100
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013146:	9011      	str	r0, [sp, #68]	; 0x44
  DMA_Init(DMA1_Stream5, &DMA_InitStructure);
 8013148:	a907      	add	r1, sp, #28
 801314a:	4811      	ldr	r0, [pc, #68]	; (8013190 <MIOS32_I2S_Init+0x144>)
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 801314c:	9310      	str	r3, [sp, #64]	; 0x40
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 801314e:	920f      	str	r2, [sp, #60]	; 0x3c
  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);

  DMA_Cmd(DMA1_Stream5, DISABLE);
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8013150:	9407      	str	r4, [sp, #28]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI3->DR;
  //  DMA_InitStructure.DMA_MemoryBaseAddr = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  //  DMA_InitStructure.DMA_BufferSize = ...; // configured in MIOS32_I2S_Start()
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8013152:	940c      	str	r4, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8013154:	970d      	str	r7, [sp, #52]	; 0x34
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(DMA1_Stream5, &DMA_InitStructure);
 8013156:	f001 fb33 	bl	80147c0 <DMA_Init>
  // DMA_Cmd(DMA1_Stream5, ENABLE); // done on MIOS32_I2S_Start()

  // trigger interrupt when transfer half complete/complete
  DMA_ITConfig(DMA1_Stream5, DMA_IT_HT | DMA_IT_TC, ENABLE);
 801315a:	480d      	ldr	r0, [pc, #52]	; (8013190 <MIOS32_I2S_Init+0x144>)
 801315c:	2118      	movs	r1, #24
 801315e:	2201      	movs	r2, #1
 8013160:	f001 fb8a 	bl	8014878 <DMA_ITConfig>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(SPI3, SPI_I2S_DMAReq_Tx, ENABLE);
 8013164:	4809      	ldr	r0, [pc, #36]	; (801318c <MIOS32_I2S_Init+0x140>)
 8013166:	4629      	mov	r1, r5
 8013168:	2201      	movs	r2, #1
 801316a:	f001 fe82 	bl	8014e72 <SPI_I2S_DMACmd>

  // Configure and enable DMA interrupt
  MIOS32_IRQ_Install(DMA1_Stream5_IRQn, MIOS32_IRQ_I2S_DMA_PRIORITY);
 801316e:	4630      	mov	r0, r6
 8013170:	2105      	movs	r1, #5
 8013172:	f7ff fc0d 	bl	8012990 <MIOS32_IRQ_Install>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);

  codec_init();
#endif

  return 0; // no error
 8013176:	4620      	mov	r0, r4
 8013178:	e001      	b.n	801317e <MIOS32_I2S_Init+0x132>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 801317a:	f04f 30ff 	mov.w	r0, #4294967295

  codec_init();
#endif

  return 0; // no error
}
 801317e:	b017      	add	sp, #92	; 0x5c
 8013180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013182:	bf00      	nop
 8013184:	40020000 	.word	0x40020000
 8013188:	40020800 	.word	0x40020800
 801318c:	40003c00 	.word	0x40003c00
 8013190:	40026088 	.word	0x40026088
 8013194:	20000e40 	.word	0x20000e40
 8013198:	40003c0c 	.word	0x40003c0c

0801319c <MIOS32_I2S_Start>:
//!      range of the sample buffer has been transfered, so that it
//!      can be updated
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Start(u32 *buffer, u16 len, void *_callback)
{
 801319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // reload DMA source address and counter
  DMA_Cmd(DMA1_Stream5, DISABLE);
 801319e:	4c0b      	ldr	r4, [pc, #44]	; (80131cc <MIOS32_I2S_Start+0x30>)
//!      range of the sample buffer has been transfered, so that it
//!      can be updated
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Start(u32 *buffer, u16 len, void *_callback)
{
 80131a0:	4605      	mov	r5, r0
 80131a2:	460e      	mov	r6, r1
  // reload DMA source address and counter
  DMA_Cmd(DMA1_Stream5, DISABLE);
 80131a4:	4620      	mov	r0, r4
 80131a6:	2100      	movs	r1, #0
//!      range of the sample buffer has been transfered, so that it
//!      can be updated
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_I2S_Start(u32 *buffer, u16 len, void *_callback)
{
 80131a8:	4617      	mov	r7, r2
  // reload DMA source address and counter
  DMA_Cmd(DMA1_Stream5, DISABLE);
 80131aa:	f001 fb44 	bl	8014836 <DMA_Cmd>

  // ensure that IRQ flag is cleared (so that DMA IRQ isn't invoked by accident while this function is called)
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);
 80131ae:	4620      	mov	r0, r4
 80131b0:	4907      	ldr	r1, [pc, #28]	; (80131d0 <MIOS32_I2S_Start+0x34>)
 80131b2:	f001 fb49 	bl	8014848 <DMA_ClearFlag>

  // take over new callback function
  buffer_reload_callback = _callback;
 80131b6:	4b07      	ldr	r3, [pc, #28]	; (80131d4 <MIOS32_I2S_Start+0x38>)

  // take over new buffer pointer/length
  DMA1_Stream5->M0AR = (u32)buffer;
  DMA1_Stream5->NDTR = 2 * len;
 80131b8:	0076      	lsls	r6, r6, #1

  // ensure that IRQ flag is cleared (so that DMA IRQ isn't invoked by accident while this function is called)
  DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_TEIF5 | DMA_FLAG_HTIF5 | DMA_FLAG_FEIF5);

  // take over new callback function
  buffer_reload_callback = _callback;
 80131ba:	601f      	str	r7, [r3, #0]

  // take over new buffer pointer/length
  DMA1_Stream5->M0AR = (u32)buffer;
  DMA1_Stream5->NDTR = 2 * len;
  DMA_Cmd(DMA1_Stream5, ENABLE);
 80131bc:	4620      	mov	r0, r4

  // take over new callback function
  buffer_reload_callback = _callback;

  // take over new buffer pointer/length
  DMA1_Stream5->M0AR = (u32)buffer;
 80131be:	60e5      	str	r5, [r4, #12]
  DMA1_Stream5->NDTR = 2 * len;
  DMA_Cmd(DMA1_Stream5, ENABLE);
 80131c0:	2101      	movs	r1, #1
  // take over new callback function
  buffer_reload_callback = _callback;

  // take over new buffer pointer/length
  DMA1_Stream5->M0AR = (u32)buffer;
  DMA1_Stream5->NDTR = 2 * len;
 80131c2:	6066      	str	r6, [r4, #4]
  DMA_Cmd(DMA1_Stream5, ENABLE);
 80131c4:	f001 fb37 	bl	8014836 <DMA_Cmd>

  return 0; // no error
}
 80131c8:	2000      	movs	r0, #0
 80131ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131cc:	40026088 	.word	0x40026088
 80131d0:	20000e40 	.word	0x20000e40
 80131d4:	20000228 	.word	0x20000228

080131d8 <DMA1_Stream5_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
//! DMA1 Channel interrupt is triggered on HT and TC interrupts
//! \note shouldn't be called directly from application
/////////////////////////////////////////////////////////////////////////////
void DMA1_Stream5_IRQHandler(void)
{
 80131d8:	b510      	push	{r4, lr}
  // execute callback function depending on pending flag(s)

  if( DMA1->HISR & DMA_FLAG_HTIF5 ) {
 80131da:	4c0b      	ldr	r4, [pc, #44]	; (8013208 <DMA1_Stream5_IRQHandler+0x30>)
 80131dc:	4b0b      	ldr	r3, [pc, #44]	; (801320c <DMA1_Stream5_IRQHandler+0x34>)
 80131de:	6862      	ldr	r2, [r4, #4]
 80131e0:	4013      	ands	r3, r2
 80131e2:	b12b      	cbz	r3, 80131f0 <DMA1_Stream5_IRQHandler+0x18>
    DMA1->HIFCR = DMA_FLAG_HTIF5;
 80131e4:	4809      	ldr	r0, [pc, #36]	; (801320c <DMA1_Stream5_IRQHandler+0x34>)
    // state 0: lower sample buffer range has been transfered and can be updated
    buffer_reload_callback(0);
 80131e6:	490a      	ldr	r1, [pc, #40]	; (8013210 <DMA1_Stream5_IRQHandler+0x38>)
void DMA1_Stream5_IRQHandler(void)
{
  // execute callback function depending on pending flag(s)

  if( DMA1->HISR & DMA_FLAG_HTIF5 ) {
    DMA1->HIFCR = DMA_FLAG_HTIF5;
 80131e8:	60e0      	str	r0, [r4, #12]
    // state 0: lower sample buffer range has been transfered and can be updated
    buffer_reload_callback(0);
 80131ea:	680a      	ldr	r2, [r1, #0]
 80131ec:	2000      	movs	r0, #0
 80131ee:	4790      	blx	r2
  }

  if( DMA1->HISR & DMA_FLAG_TCIF5 ) {
 80131f0:	6860      	ldr	r0, [r4, #4]
 80131f2:	4b08      	ldr	r3, [pc, #32]	; (8013214 <DMA1_Stream5_IRQHandler+0x3c>)
 80131f4:	4003      	ands	r3, r0
 80131f6:	b133      	cbz	r3, 8013206 <DMA1_Stream5_IRQHandler+0x2e>
    DMA1->HIFCR = DMA_FLAG_TCIF5;
    // state 1: upper sample buffer range has been transfered and can be updated
    buffer_reload_callback(1);
 80131f8:	4805      	ldr	r0, [pc, #20]	; (8013210 <DMA1_Stream5_IRQHandler+0x38>)
    // state 0: lower sample buffer range has been transfered and can be updated
    buffer_reload_callback(0);
  }

  if( DMA1->HISR & DMA_FLAG_TCIF5 ) {
    DMA1->HIFCR = DMA_FLAG_TCIF5;
 80131fa:	4906      	ldr	r1, [pc, #24]	; (8013214 <DMA1_Stream5_IRQHandler+0x3c>)
 80131fc:	4a02      	ldr	r2, [pc, #8]	; (8013208 <DMA1_Stream5_IRQHandler+0x30>)
    // state 1: upper sample buffer range has been transfered and can be updated
    buffer_reload_callback(1);
 80131fe:	6803      	ldr	r3, [r0, #0]
    // state 0: lower sample buffer range has been transfered and can be updated
    buffer_reload_callback(0);
  }

  if( DMA1->HISR & DMA_FLAG_TCIF5 ) {
    DMA1->HIFCR = DMA_FLAG_TCIF5;
 8013200:	60d1      	str	r1, [r2, #12]
    // state 1: upper sample buffer range has been transfered and can be updated
    buffer_reload_callback(1);
 8013202:	2001      	movs	r0, #1
 8013204:	4798      	blx	r3
 8013206:	bd10      	pop	{r4, pc}
 8013208:	40026000 	.word	0x40026000
 801320c:	20000400 	.word	0x20000400
 8013210:	20000228 	.word	0x20000228
 8013214:	20000800 	.word	0x20000800

08013218 <MIOS32_BOARD_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8013218:	b920      	cbnz	r0, 8013224 <MIOS32_BOARD_Init+0xc>
    return -1; // unsupported mode

#if !defined(MIOS32_DONT_USE_BOARD_J5)
  j5_enable_mask = 0;
 801321a:	4b04      	ldr	r3, [pc, #16]	; (801322c <MIOS32_BOARD_Init+0x14>)
#endif
#if !defined(MIOS32_DONT_USE_BOARD_J10)
  j10_enable_mask = 0;
 801321c:	4904      	ldr	r1, [pc, #16]	; (8013230 <MIOS32_BOARD_Init+0x18>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

#if !defined(MIOS32_DONT_USE_BOARD_J5)
  j5_enable_mask = 0;
 801321e:	8018      	strh	r0, [r3, #0]
#endif
#if !defined(MIOS32_DONT_USE_BOARD_J10)
  j10_enable_mask = 0;
 8013220:	8008      	strh	r0, [r1, #0]
#endif

  return 0; // no error
 8013222:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013224:	f04f 30ff 	mov.w	r0, #4294967295
#if !defined(MIOS32_DONT_USE_BOARD_J10)
  j10_enable_mask = 0;
#endif

  return 0; // no error
}
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	2000022e 	.word	0x2000022e
 8013230:	2000022c 	.word	0x2000022c

08013234 <MIOS32_BOARD_LED_Init>:
//! \return 0 if initialisation passed
//! \return -1 if no LEDs specified for board
//! \return -2 if one or more LEDs not available on board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Init(u32 leds)
{
 8013234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013236:	4d12      	ldr	r5, [pc, #72]	; (8013280 <MIOS32_BOARD_LED_Init+0x4c>)
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013238:	4668      	mov	r0, sp
 801323a:	f001 fb90 	bl	801495e <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801323e:	2400      	movs	r4, #0
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 8013240:	2340      	movs	r3, #64	; 0x40
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013242:	4669      	mov	r1, sp
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8013244:	2702      	movs	r7, #2
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013246:	2601      	movs	r6, #1
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013248:	4628      	mov	r0, r5
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 801324a:	9300      	str	r3, [sp, #0]
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801324c:	f88d 7005 	strb.w	r7, [sp, #5]
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013250:	f88d 6004 	strb.w	r6, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013254:	f88d 4006 	strb.w	r4, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013258:	f001 fb34 	bl	80148c4 <GPIO_Init>
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 801325c:	4668      	mov	r0, sp
 801325e:	f001 fb7e 	bl	801495e <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 8013262:	2080      	movs	r0, #128	; 0x80
 8013264:	9000      	str	r0, [sp, #0]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013266:	4669      	mov	r1, sp
 8013268:	4628      	mov	r0, r5
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801326a:	f88d 7005 	strb.w	r7, [sp, #5]
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801326e:	f88d 6004 	strb.w	r6, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013272:	f88d 4006 	strb.w	r4, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 8013276:	f001 fb25 	bl	80148c4 <GPIO_Init>
  MIOS32_BOARD_PinInitHlp(GPIOA, GPIO_Pin_7, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // D3
  return 0;
#else
  return -1; // no LED specified for board
#endif
}
 801327a:	4620      	mov	r0, r4
 801327c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801327e:	bf00      	nop
 8013280:	40020000 	.word	0x40020000

08013284 <MIOS32_BOARD_LED_Set>:

  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 8013284:	f04f 30ff 	mov.w	r0, #4294967295
 8013288:	4770      	bx	lr

0801328a <MIOS32_BOARD_LED_Get>:
    values |= (1 << 3);
#endif
#endif

  return values;
}
 801328a:	2000      	movs	r0, #0
 801328c:	4770      	bx	lr

0801328e <MIOS32_BOARD_J10_PinInit>:
      return status;
  }

  return 0; // no error
#endif
}
 801328e:	f04f 30ff 	mov.w	r0, #4294967295
 8013292:	4770      	bx	lr

08013294 <MIOS32_BOARD_J10_PinSet>:

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 8013294:	f04f 30ff 	mov.w	r0, #4294967295
 8013298:	4770      	bx	lr

0801329a <MIOS32_BOARD_J15_PortInit>:
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);

  return 0; // no error
#endif
}
 801329a:	f04f 30ff 	mov.w	r0, #4294967295
 801329e:	4770      	bx	lr

080132a0 <MIOS32_BOARD_J15_DataSet>:
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_0;

  return 0; // no error
#endif
}
 80132a0:	f04f 30ff 	mov.w	r0, #4294967295
 80132a4:	4770      	bx	lr

080132a6 <MIOS32_BOARD_J15_SerDataShift>:

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 80132a6:	f04f 30ff 	mov.w	r0, #4294967295
 80132aa:	4770      	bx	lr

080132ac <MIOS32_BOARD_J15_RS_Set>:
#else
  J15_PIN_SER(rs);

  return 0; // no error
#endif
}
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295
 80132b0:	4770      	bx	lr

080132b2 <MIOS32_BOARD_J15_RW_Set>:
#else
  J15_PIN_RW(rw);

  return 0; // no error
#endif
}
 80132b2:	f04f 30ff 	mov.w	r0, #4294967295
 80132b6:	4770      	bx	lr

080132b8 <MIOS32_BOARD_J15_E_Set>:

  }

  return -1; // pin not available
#endif
}
 80132b8:	f04f 30ff 	mov.w	r0, #4294967295
 80132bc:	4770      	bx	lr

080132be <MIOS32_BOARD_J15_GetD7In>:
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  return J15_PIN_D7_IN ? 1 : 0;
#endif
}
 80132be:	f04f 30ff 	mov.w	r0, #4294967295
 80132c2:	4770      	bx	lr

080132c4 <MIOS32_BOARD_J15_D7InPullUpEnable>:
  return -1; // LCD port not available
#else
  return 0; // not relevant for MBHP_CORE_STM32 board
  // TODO: check if this is true 
#endif
}
 80132c4:	f04f 30ff 	mov.w	r0, #4294967295
 80132c8:	4770      	bx	lr

080132ca <MIOS32_BOARD_J15_PollUnbusy>:
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
#endif
}
 80132ca:	f04f 30ff 	mov.w	r0, #4294967295
 80132ce:	4770      	bx	lr

080132d0 <TIM2_IRQHandler>:
//! Interrupt handlers
//! \note don't call them directly from application
/////////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_ALLOCATE_TIM2_IRQn
TIMER0_IRQ_HANDLER
{
 80132d0:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER0_BASE, TIM_IT_Update) != RESET ) {
 80132d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80132d6:	2101      	movs	r1, #1
 80132d8:	f001 fe1e 	bl	8014f18 <TIM_GetITStatus>
 80132dc:	b138      	cbz	r0, 80132ee <TIM2_IRQHandler+0x1e>
    TIM_ClearITPendingBit(TIMER0_BASE, TIM_IT_Update);
 80132de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80132e2:	2101      	movs	r1, #1
 80132e4:	f001 fe23 	bl	8014f2e <TIM_ClearITPendingBit>
    timer_callback[0]();
 80132e8:	4b01      	ldr	r3, [pc, #4]	; (80132f0 <TIM2_IRQHandler+0x20>)
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	4780      	blx	r0
 80132ee:	bd08      	pop	{r3, pc}
 80132f0:	20000230 	.word	0x20000230

080132f4 <TIM3_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM3_IRQn
TIMER1_IRQ_HANDLER
{
 80132f4:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER1_BASE, TIM_IT_Update) != RESET ) {
 80132f6:	4806      	ldr	r0, [pc, #24]	; (8013310 <TIM3_IRQHandler+0x1c>)
 80132f8:	2101      	movs	r1, #1
 80132fa:	f001 fe0d 	bl	8014f18 <TIM_GetITStatus>
 80132fe:	b130      	cbz	r0, 801330e <TIM3_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER1_BASE, TIM_IT_Update);
 8013300:	4803      	ldr	r0, [pc, #12]	; (8013310 <TIM3_IRQHandler+0x1c>)
 8013302:	2101      	movs	r1, #1
 8013304:	f001 fe13 	bl	8014f2e <TIM_ClearITPendingBit>
    timer_callback[1]();
 8013308:	4b02      	ldr	r3, [pc, #8]	; (8013314 <TIM3_IRQHandler+0x20>)
 801330a:	6858      	ldr	r0, [r3, #4]
 801330c:	4780      	blx	r0
 801330e:	bd08      	pop	{r3, pc}
 8013310:	40000400 	.word	0x40000400
 8013314:	20000230 	.word	0x20000230

08013318 <TIM5_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM5_IRQn
TIMER2_IRQ_HANDLER
{
 8013318:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER2_BASE, TIM_IT_Update) != RESET ) {
 801331a:	4806      	ldr	r0, [pc, #24]	; (8013334 <TIM5_IRQHandler+0x1c>)
 801331c:	2101      	movs	r1, #1
 801331e:	f001 fdfb 	bl	8014f18 <TIM_GetITStatus>
 8013322:	b130      	cbz	r0, 8013332 <TIM5_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER2_BASE, TIM_IT_Update);
 8013324:	4803      	ldr	r0, [pc, #12]	; (8013334 <TIM5_IRQHandler+0x1c>)
 8013326:	2101      	movs	r1, #1
 8013328:	f001 fe01 	bl	8014f2e <TIM_ClearITPendingBit>
    timer_callback[2]();
 801332c:	4b02      	ldr	r3, [pc, #8]	; (8013338 <TIM5_IRQHandler+0x20>)
 801332e:	6898      	ldr	r0, [r3, #8]
 8013330:	4780      	blx	r0
 8013332:	bd08      	pop	{r3, pc}
 8013334:	40000c00 	.word	0x40000c00
 8013338:	20000230 	.word	0x20000230

0801333c <MIOS32_DELAY_Init>:
//!
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
 801333c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 801333e:	4604      	mov	r4, r0
 8013340:	b9b8      	cbnz	r0, 8013372 <MIOS32_DELAY_Init+0x36>
    return -1; // unsupported mode

  // enable timer clock
  if( MIOS32_DELAY_TIMER == TIM1 || MIOS32_DELAY_TIMER == TIM8 )
    RCC_APB2PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);
 8013342:	2001      	movs	r0, #1
 8013344:	4601      	mov	r1, r0
 8013346:	f001 fbe3 	bl	8014b10 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 801334a:	20a7      	movs	r0, #167	; 0xa7
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 801334c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 8013350:	f8ad 0004 	strh.w	r0, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8013354:	a901      	add	r1, sp, #4
 8013356:	4809      	ldr	r0, [pc, #36]	; (801337c <MIOS32_DELAY_Init+0x40>)
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 8013358:	9302      	str	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801335a:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801335e:	f8ad 4006 	strh.w	r4, [sp, #6]
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8013362:	f001 fd8f 	bl	8014e84 <TIM_TimeBaseInit>

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);
 8013366:	4805      	ldr	r0, [pc, #20]	; (801337c <MIOS32_DELAY_Init+0x40>)
 8013368:	2101      	movs	r1, #1
 801336a:	f001 fdc9 	bl	8014f00 <TIM_Cmd>

  return 0; // no error
 801336e:	4620      	mov	r0, r4
 8013370:	e001      	b.n	8013376 <MIOS32_DELAY_Init+0x3a>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013372:	f04f 30ff 	mov.w	r0, #4294967295

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);

  return 0; // no error
}
 8013376:	b004      	add	sp, #16
 8013378:	bd10      	pop	{r4, pc}
 801337a:	bf00      	nop
 801337c:	40010000 	.word	0x40010000

08013380 <MIOS32_DELAY_Wait_uS>:
//! \param[in] uS delay (1..65535 microseconds)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Wait_uS(u16 uS)
{
  u16 start = MIOS32_DELAY_TIMER->CNT;
 8013380:	4b04      	ldr	r3, [pc, #16]	; (8013394 <MIOS32_DELAY_Wait_uS+0x14>)
 8013382:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013384:	b289      	uxth	r1, r1

  // note that this even works on 16bit counter wrap-arounds
  while( (u16)(MIOS32_DELAY_TIMER->CNT - start) <= uS );
 8013386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013388:	1a52      	subs	r2, r2, r1
 801338a:	b292      	uxth	r2, r2
 801338c:	4282      	cmp	r2, r0
 801338e:	d9fa      	bls.n	8013386 <MIOS32_DELAY_Wait_uS+0x6>

  return 0; // no error
}
 8013390:	2000      	movs	r0, #0
 8013392:	4770      	bx	lr
 8013394:	40010000 	.word	0x40010000

08013398 <MIOS32_AIN_Init>:
  // finally start initial conversion
  MIOS32_AIN_StartConversions();

  return 0;
#endif
}
 8013398:	f04f 30ff 	mov.w	r0, #4294967295
 801339c:	4770      	bx	lr

0801339e <MIOS32_AIN_Handler>:
  // start next scan
  MIOS32_AIN_StartConversions();

  return 0; // no error
#endif
}
 801339e:	f04f 30ff 	mov.w	r0, #4294967295
 80133a2:	4770      	bx	lr

080133a4 <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(MIOS32_USB_DeviceDescriptor);
 80133a4:	2312      	movs	r3, #18
 80133a6:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_DeviceDescriptor;
}
 80133a8:	4800      	ldr	r0, [pc, #0]	; (80133ac <USBD_USR_DeviceDescriptor+0x8>)
 80133aa:	4770      	bx	lr
 80133ac:	0801b9a4 	.word	0x0801b9a4

080133b0 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80133b0:	2304      	movs	r3, #4
 80133b2:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)USBD_LangIDDesc;
}
 80133b4:	4800      	ldr	r0, [pc, #0]	; (80133b8 <USBD_USR_LangIDStrDescriptor+0x8>)
 80133b6:	4770      	bx	lr
 80133b8:	0801b9a0 	.word	0x0801b9a0

080133bc <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
static void USBD_USR_Init(void)
{   
 80133bc:	4770      	bx	lr

080133be <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
static void USBD_USR_DeviceReset(uint8_t speed )
{
 80133be:	4770      	bx	lr

080133c0 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
static void USBD_USR_DeviceConnected (void)
{
 80133c0:	4770      	bx	lr

080133c2 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceSuspended(void)
{
 80133c2:	4770      	bx	lr

080133c4 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceResumed(void)
{
 80133c4:	4770      	bx	lr

080133c6 <USBH_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_USR_Init(void)
{
 80133c6:	4770      	bx	lr

080133c8 <USBH_USR_DeviceAttached>:
 *         Displays the message on LCD on device attached
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAttached(void)
{  
 80133c8:	4770      	bx	lr

080133ca <USBH_USR_UnrecoveredError>:
 * @brief  USBH_USR_UnrecoveredError
 * @param  None
 * @retval None
 */
static void USBH_USR_UnrecoveredError (void)
{
 80133ca:	4770      	bx	lr

080133cc <USBH_USR_ResetDevice>:
 *         Reset USB Device
 * @param  None
 * @retval None
 */
static void USBH_USR_ResetDevice(void)
{
 80133cc:	4770      	bx	lr

080133ce <USBH_USR_DeviceSpeedDetected>:
 *         Displays the message on LCD for device speed
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 80133ce:	4770      	bx	lr

080133d0 <USBH_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 80133d0:	4770      	bx	lr

080133d2 <USBH_USR_DeviceAddressAssigned>:
 *         USB device is successfully assigned the Address
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAddressAssigned(void)
{
 80133d2:	4770      	bx	lr

080133d4 <USBH_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
						 USBH_InterfaceDesc_TypeDef *itfDesc,
						 USBH_EpDesc_TypeDef *epDesc)
{
 80133d4:	4770      	bx	lr

080133d6 <USBH_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 80133d6:	4770      	bx	lr

080133d8 <USBH_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_USR_Product_String(void *ProductString)
{
 80133d8:	4770      	bx	lr

080133da <USBH_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_USR_SerialNum_String(void *SerialNumString)
{
 80133da:	4770      	bx	lr

080133dc <USBH_USR_EnumerationDone>:
 *         application jump to class
 * @param  None
 * @retval None
 */
static void USBH_USR_EnumerationDone(void)
{
 80133dc:	4770      	bx	lr

080133de <USBH_USR_DeviceNotSupported>:
 *         Device is not supported
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceNotSupported(void)
{
 80133de:	4770      	bx	lr

080133e0 <USBH_USR_UserInput>:
 * @retval USBH_USR_Status : User response for key button
 */
static USBH_USR_Status USBH_USR_UserInput(void)
{
  return USBH_USR_RESP_OK;
}
 80133e0:	2001      	movs	r0, #1
 80133e2:	4770      	bx	lr

080133e4 <USBH_USR_OverCurrentDetected>:
 *         Device Overcurrent detection event
 * @param  None
 * @retval None
 */
static void USBH_USR_OverCurrentDetected (void)
{
 80133e4:	4770      	bx	lr

080133e6 <USBH_USR_Application>:
* @retval Staus
*/
static int USBH_USR_Application(void)
{
  return (0);
}
 80133e6:	2000      	movs	r0, #0
 80133e8:	4770      	bx	lr

080133ea <USBH_USR_DeInit>:
 *         Deinit User state and associated variables
 * @param  None
 * @retval None
 */
static void USBH_USR_DeInit(void)
{
 80133ea:	4770      	bx	lr

080133ec <MIOS32_USB_CLASS_Setup>:
					USB_SETUP_REQ *req)
{
  // not relevant for USB MIDI

  return USBD_OK;
}
 80133ec:	2000      	movs	r0, #0
 80133ee:	4770      	bx	lr

080133f0 <MIOS32_USB_CLASS_EP0_RxReady>:
static uint8_t  MIOS32_USB_CLASS_EP0_RxReady (void  *pdev)
{ 
  // not relevant for USB MIDI
  
  return USBD_OK;
}
 80133f0:	2000      	movs	r0, #0
 80133f2:	4770      	bx	lr

080133f4 <MIOS32_USB_CLASS_GetCfgDesc>:
  if( MIOS32_USB_ForceSingleUSB() ) {
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
    return (uint8_t *)MIOS32_USB_ConfigDescriptor_SingleUSB;
  }
#endif
  *length = sizeof (MIOS32_USB_ConfigDescriptor);
 80133f4:	2365      	movs	r3, #101	; 0x65
 80133f6:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_ConfigDescriptor;
}
 80133f8:	4800      	ldr	r0, [pc, #0]	; (80133fc <MIOS32_USB_CLASS_GetCfgDesc+0x8>)
 80133fa:	4770      	bx	lr
 80133fc:	0801b9e3 	.word	0x0801b9e3

08013400 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013400:	b510      	push	{r4, lr}
  const u8 serial_number_dummy_str[] = "42";
 8013402:	4b0b      	ldr	r3, [pc, #44]	; (8013430 <USBD_USR_SerialStrDescriptor+0x30>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013404:	b08c      	sub	sp, #48	; 0x30
  const u8 serial_number_dummy_str[] = "42";
 8013406:	7898      	ldrb	r0, [r3, #2]
 8013408:	881a      	ldrh	r2, [r3, #0]
 801340a:	f88d 0006 	strb.w	r0, [sp, #6]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 801340e:	a802      	add	r0, sp, #8
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013410:	460c      	mov	r4, r1
  const u8 serial_number_dummy_str[] = "42";
 8013412:	f8ad 2004 	strh.w	r2, [sp, #4]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 8013416:	f7ff f9a3 	bl	8012760 <MIOS32_SYS_SerialNumberGet>
 801341a:	2800      	cmp	r0, #0
    USBD_GetString ((uint8_t*)serial_number_str, USBD_StrDesc, length);
 801341c:	bfac      	ite	ge
 801341e:	a802      	addge	r0, sp, #8
  } else {
    USBD_GetString ((uint8_t*)serial_number_dummy_str, USBD_StrDesc, length);
 8013420:	a801      	addlt	r0, sp, #4
 8013422:	4904      	ldr	r1, [pc, #16]	; (8013434 <USBD_USR_SerialStrDescriptor+0x34>)
 8013424:	4622      	mov	r2, r4
 8013426:	f002 f977 	bl	8015718 <USBD_GetString>
  }

  return USBD_StrDesc;
}
 801342a:	4802      	ldr	r0, [pc, #8]	; (8013434 <USBD_USR_SerialStrDescriptor+0x34>)
 801342c:	b00c      	add	sp, #48	; 0x30
 801342e:	bd10      	pop	{r4, pc}
 8013430:	0801b9d4 	.word	0x0801b9d4
 8013434:	20004348 	.word	0x20004348

08013438 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 801343a:	4c13      	ldr	r4, [pc, #76]	; (8013488 <USBD_USR_ProductStrDescriptor+0x50>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 801343c:	460a      	mov	r2, r1
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 801343e:	6820      	ldr	r0, [r4, #0]
 8013440:	6861      	ldr	r1, [r4, #4]
 8013442:	ab01      	add	r3, sp, #4
 8013444:	c303      	stmia	r3!, {r0, r1}
 8013446:	8920      	ldrh	r0, [r4, #8]
 8013448:	7aa1      	ldrb	r1, [r4, #10]
 801344a:	8018      	strh	r0, [r3, #0]
 801344c:	7099      	strb	r1, [r3, #2]
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 801344e:	2300      	movs	r3, #0
*         return the product string descriptor
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
 8013450:	480e      	ldr	r0, [pc, #56]	; (801348c <USBD_USR_ProductStrDescriptor+0x54>)
 8013452:	1819      	adds	r1, r3, r0
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8013454:	7808      	ldrb	r0, [r1, #0]
 8013456:	b158      	cbz	r0, 8013470 <USBD_USR_ProductStrDescriptor+0x38>
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
 8013458:	3820      	subs	r0, #32
      valid_str = 0;
 801345a:	285f      	cmp	r0, #95	; 0x5f
 801345c:	bf8c      	ite	hi
 801345e:	2000      	movhi	r0, #0
 8013460:	2001      	movls	r0, #1
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8013462:	3301      	adds	r3, #1
 8013464:	2b20      	cmp	r3, #32
 8013466:	d006      	beq.n	8013476 <USBD_USR_ProductStrDescriptor+0x3e>
 8013468:	2800      	cmp	r0, #0
 801346a:	d1f1      	bne.n	8013450 <USBD_USR_ProductStrDescriptor+0x18>
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
  int len;

  // buffer[0] and [1] initialized below
  // check for user defined product string
  char *product_str_ptr = (char *)product_str;
 801346c:	a801      	add	r0, sp, #4
 801346e:	e005      	b.n	801347c <USBD_USR_ProductStrDescriptor+0x44>
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
      valid_str = 0;
  }
  if( valid_str && len )
 8013470:	2b00      	cmp	r3, #0
 8013472:	d0fb      	beq.n	801346c <USBD_USR_ProductStrDescriptor+0x34>
 8013474:	e001      	b.n	801347a <USBD_USR_ProductStrDescriptor+0x42>
 8013476:	2800      	cmp	r0, #0
 8013478:	d0f8      	beq.n	801346c <USBD_USR_ProductStrDescriptor+0x34>
    product_str_ptr = product_str_user;
 801347a:	4804      	ldr	r0, [pc, #16]	; (801348c <USBD_USR_ProductStrDescriptor+0x54>)
#endif

  USBD_GetString ((uint8_t*)product_str_ptr, USBD_StrDesc, length);
 801347c:	4904      	ldr	r1, [pc, #16]	; (8013490 <USBD_USR_ProductStrDescriptor+0x58>)
 801347e:	f002 f94b 	bl	8015718 <USBD_GetString>

  return USBD_StrDesc;
}
 8013482:	4803      	ldr	r0, [pc, #12]	; (8013490 <USBD_USR_ProductStrDescriptor+0x58>)
 8013484:	b004      	add	sp, #16
 8013486:	bd10      	pop	{r4, pc}
 8013488:	0801b79c 	.word	0x0801b79c
 801348c:	08003fe0 	.word	0x08003fe0
 8013490:	20004348 	.word	0x20004348

08013494 <USBD_USR_InterfaceStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013494:	f7ff bfd0 	b.w	8013438 <USBD_USR_ProductStrDescriptor>

08013498 <USBD_USR_ConfigStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013498:	f7ff bfce 	b.w	8013438 <USBD_USR_ProductStrDescriptor>

0801349c <MIOS32_USB_CLASS_GetUsrStrDesc>:
}


static uint8_t *MIOS32_USB_CLASS_GetUsrStrDesc(uint8_t speed, uint8_t index, uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 801349c:	4611      	mov	r1, r2
 801349e:	f7ff bfcb 	b.w	8013438 <USBD_USR_ProductStrDescriptor>
	...

080134a4 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80134a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80134a6:	4c08      	ldr	r4, [pc, #32]	; (80134c8 <USBD_USR_ManufacturerStrDescriptor+0x24>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80134a8:	460a      	mov	r2, r1
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80134aa:	6820      	ldr	r0, [r4, #0]
 80134ac:	6861      	ldr	r1, [r4, #4]
 80134ae:	ab01      	add	r3, sp, #4
 80134b0:	c303      	stmia	r3!, {r0, r1}
 80134b2:	68a0      	ldr	r0, [r4, #8]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80134b4:	4c05      	ldr	r4, [pc, #20]	; (80134cc <USBD_USR_ManufacturerStrDescriptor+0x28>)
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80134b6:	6018      	str	r0, [r3, #0]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80134b8:	4621      	mov	r1, r4
 80134ba:	a801      	add	r0, sp, #4
 80134bc:	f002 f92c 	bl	8015718 <USBD_GetString>
  return USBD_StrDesc;
}
 80134c0:	4620      	mov	r0, r4
 80134c2:	b004      	add	sp, #16
 80134c4:	bd10      	pop	{r4, pc}
 80134c6:	bf00      	nop
 80134c8:	0801b9d7 	.word	0x0801b9d7
 80134cc:	20004348 	.word	0x20004348

080134d0 <MIOS32_USB_CLASS_DataOut>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80134d0:	2902      	cmp	r1, #2
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
 80134d2:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80134d4:	d103      	bne.n	80134de <MIOS32_USB_CLASS_DataOut+0xe>
    MIOS32_USB_MIDI_EP2_OUT_Callback(epnum, 0); // parameters not relevant for STM32F4
 80134d6:	4608      	mov	r0, r1
 80134d8:	2100      	movs	r1, #0
 80134da:	f000 fc9f 	bl	8013e1c <MIOS32_USB_MIDI_EP2_OUT_Callback>
#endif

  return USBD_OK;
}
 80134de:	2000      	movs	r0, #0
 80134e0:	bd08      	pop	{r3, pc}

080134e2 <MIOS32_USB_CLASS_DataIn>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80134e2:	2901      	cmp	r1, #1
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
 80134e4:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80134e6:	d103      	bne.n	80134f0 <MIOS32_USB_CLASS_DataIn+0xe>
    MIOS32_USB_MIDI_EP1_IN_Callback(epnum, 0); // parameters not relevant for STM32F4
 80134e8:	4608      	mov	r0, r1
 80134ea:	2100      	movs	r1, #0
 80134ec:	f000 fc8e 	bl	8013e0c <MIOS32_USB_MIDI_EP1_IN_Callback>
#endif
  
  return USBD_OK;
}
 80134f0:	2000      	movs	r0, #0
 80134f2:	bd08      	pop	{r3, pc}

080134f4 <MIOS32_USB_CLASS_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 80134f4:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 80134f6:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 80134f8:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 80134fa:	f003 fd0e 	bl	8016f1a <DCD_EP_Close>
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_IN_EP);
 80134fe:	4620      	mov	r0, r4
 8013500:	2181      	movs	r1, #129	; 0x81
 8013502:	f003 fd0a 	bl	8016f1a <DCD_EP_Close>
#endif
  
  return USBD_OK;
}
 8013506:	2000      	movs	r0, #0
 8013508:	bd10      	pop	{r4, pc}

0801350a <USBH_USR_DeviceDisconnected>:
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 801350a:	2000      	movs	r0, #0
 801350c:	f000 bb26 	b.w	8013b5c <MIOS32_USB_MIDI_ChangeConnectionState>

08013510 <USBD_USR_DeviceDisconnected>:
* @retval Staus
*/
static void USBD_USR_DeviceDisconnected (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8013510:	2000      	movs	r0, #0
 8013512:	f000 bb23 	b.w	8013b5c <MIOS32_USB_MIDI_ChangeConnectionState>

08013516 <USBD_USR_DeviceConfigured>:
* @retval Staus
*/
static void USBD_USR_DeviceConfigured (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(1);
 8013516:	2001      	movs	r0, #1
 8013518:	f000 bb20 	b.w	8013b5c <MIOS32_USB_MIDI_ChangeConnectionState>

0801351c <MIOS32_USB_CLASS_Init>:
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 801351c:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 801351e:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013520:	2240      	movs	r2, #64	; 0x40
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8013522:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013524:	460b      	mov	r3, r1
 8013526:	f003 fcd7 	bl	8016ed8 <DCD_EP_Open>
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_IN_EP, MIOS32_USB_MIDI_DATA_IN_SIZE, USB_OTG_EP_BULK);
 801352a:	2181      	movs	r1, #129	; 0x81
 801352c:	2240      	movs	r2, #64	; 0x40
 801352e:	2302      	movs	r3, #2
 8013530:	4620      	mov	r0, r4
 8013532:	f003 fcd1 	bl	8016ed8 <DCD_EP_Open>

  // configuration for next transfer
  DCD_EP_PrepareRx(&USB_OTG_dev,
 8013536:	2102      	movs	r1, #2
 8013538:	4a03      	ldr	r2, [pc, #12]	; (8013548 <MIOS32_USB_CLASS_Init+0x2c>)
 801353a:	4804      	ldr	r0, [pc, #16]	; (801354c <MIOS32_USB_CLASS_Init+0x30>)
 801353c:	2340      	movs	r3, #64	; 0x40
 801353e:	f003 fd05 	bl	8016f4c <DCD_EP_PrepareRx>
		   (uint8_t*)(USB_rx_buffer),
		   MIOS32_USB_MIDI_DATA_OUT_SIZE);
#endif

  return USBD_OK;
}
 8013542:	2000      	movs	r0, #0
 8013544:	bd10      	pop	{r4, pc}
 8013546:	bf00      	nop
 8013548:	200037ec 	.word	0x200037ec
 801354c:	2000382c 	.word	0x2000382c

08013550 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8013550:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013552:	2001      	movs	r0, #1

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013554:	4c24      	ldr	r4, [pc, #144]	; (80135e8 <USB_OTG_BSP_Init+0x98>)

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013556:	4601      	mov	r1, r0
 8013558:	f001 fab6 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801355c:	2000      	movs	r0, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 801355e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013562:	2502      	movs	r5, #2
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013564:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013566:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 801356a:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801356e:	4669      	mov	r1, sp
 8013570:	4620      	mov	r0, r4
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 8013572:	9300      	str	r3, [sp, #0]

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013574:	f88d 5004 	strb.w	r5, [sp, #4]
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013578:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801357c:	f001 f9a2 	bl	80148c4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8013580:	4620      	mov	r0, r4
 8013582:	2108      	movs	r1, #8
 8013584:	220a      	movs	r2, #10
 8013586:	f001 f9f7 	bl	8014978 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 801358a:	4620      	mov	r0, r4
 801358c:	2109      	movs	r1, #9
 801358e:	220a      	movs	r2, #10
 8013590:	f001 f9f2 	bl	8014978 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 8013594:	4620      	mov	r0, r4
 8013596:	210b      	movs	r1, #11
 8013598:	220a      	movs	r2, #10
 801359a:	f001 f9ed 	bl	8014978 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 801359e:	220a      	movs	r2, #10
 80135a0:	4620      	mov	r0, r4
 80135a2:	210c      	movs	r1, #12
 80135a4:	f001 f9e8 	bl	8014978 <GPIO_PinAFConfig>

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 80135a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80135ac:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80135ae:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80135b2:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80135b4:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80135b6:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80135b8:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80135bc:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80135c0:	f001 f980 	bl	80148c4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 80135c4:	210a      	movs	r1, #10
 80135c6:	460a      	mov	r2, r1
 80135c8:	4620      	mov	r0, r4
 80135ca:	f001 f9d5 	bl	8014978 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80135ce:	4629      	mov	r1, r5
 80135d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80135d4:	f001 fa9c 	bl	8014b10 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 80135d8:	2080      	movs	r0, #128	; 0x80
 80135da:	4629      	mov	r1, r5
 80135dc:	f001 fa80 	bl	8014ae0 <RCC_AHB2PeriphClockCmd>

  EXTI_ClearITPendingBit(EXTI_Line0);
 80135e0:	4628      	mov	r0, r5
 80135e2:	f001 f969 	bl	80148b8 <EXTI_ClearITPendingBit>
}
 80135e6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80135e8:	40020000 	.word	0x40020000

080135ec <USB_OTG_BSP_EnableInterrupt>:
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
  MIOS32_IRQ_Install(OTG_FS_IRQn, MIOS32_IRQ_USB_PRIORITY);
 80135ec:	2043      	movs	r0, #67	; 0x43
 80135ee:	2108      	movs	r1, #8
 80135f0:	f7ff b9ce 	b.w	8012990 <MIOS32_IRQ_Install>

080135f4 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_FS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80135f4:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 80135f6:	4808      	ldr	r0, [pc, #32]	; (8013618 <OTG_FS_IRQHandler+0x24>)
 80135f8:	f002 ffc4 	bl	8016584 <USB_OTG_IsHostMode>
 80135fc:	b118      	cbz	r0, 8013606 <OTG_FS_IRQHandler+0x12>
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
 80135fe:	4806      	ldr	r0, [pc, #24]	; (8013618 <OTG_FS_IRQHandler+0x24>)
 8013600:	f005 f9b2 	bl	8018968 <USBH_OTG_ISR_Handler>
 8013604:	e002      	b.n	801360c <OTG_FS_IRQHandler+0x18>
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
 8013606:	4804      	ldr	r0, [pc, #16]	; (8013618 <OTG_FS_IRQHandler+0x24>)
 8013608:	f003 fd1e 	bl	8017048 <USBD_OTG_ISR_Handler>
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 801360c:	4802      	ldr	r0, [pc, #8]	; (8013618 <OTG_FS_IRQHandler+0x24>)
#else
  USBD_OTG_ISR_Handler(&USB_OTG_dev);
#endif
}
 801360e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 8013612:	f005 ba33 	b.w	8018a7c <STM32_USBO_OTG_ISR_Handler>
 8013616:	bf00      	nop
 8013618:	2000382c 	.word	0x2000382c

0801361c <USB_OTG_BSP_uDelay>:
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 801361c:	b280      	uxth	r0, r0
 801361e:	f7ff beaf 	b.w	8013380 <MIOS32_DELAY_Wait_uS>

08013622 <USB_OTG_BSP_mDelay>:
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);
 8013622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013626:	4358      	muls	r0, r3
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013628:	b280      	uxth	r0, r0
 801362a:	f7ff bea9 	b.w	8013380 <MIOS32_DELAY_Wait_uS>
	...

08013630 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8013630:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8013632:	2004      	movs	r0, #4
 8013634:	2101      	movs	r1, #1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013636:	4d0e      	ldr	r5, [pc, #56]	; (8013670 <USB_OTG_BSP_ConfigVBUS+0x40>)
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8013638:	f001 fa46 	bl	8014ac8 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801363c:	2000      	movs	r0, #0
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 801363e:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013640:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013642:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013646:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801364a:	4669      	mov	r1, sp
 801364c:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801364e:	f88d 3005 	strb.w	r3, [sp, #5]
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8013652:	9400      	str	r4, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013654:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013658:	f001 f934 	bl	80148c4 <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 801365c:	4628      	mov	r0, r5
 801365e:	4621      	mov	r1, r4
 8013660:	f001 f986 	bl	8014970 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013664:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8013668:	f7ff fe8a 	bl	8013380 <MIOS32_DELAY_Wait_uS>
  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
  
  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 801366c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801366e:	bf00      	nop
 8013670:	40020800 	.word	0x40020800

08013674 <USB_OTG_BSP_DriveVBUS>:
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013674:	4803      	ldr	r0, [pc, #12]	; (8013684 <USB_OTG_BSP_DriveVBUS+0x10>)
  
  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8013676:	b911      	cbnz	r1, 801367e <USB_OTG_BSP_DriveVBUS+0xa>
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013678:	2101      	movs	r1, #1
 801367a:	f001 b979 	b.w	8014970 <GPIO_SetBits>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 801367e:	2101      	movs	r1, #1
 8013680:	f001 b978 	b.w	8014974 <GPIO_ResetBits>
 8013684:	40020800 	.word	0x40020800

08013688 <MIOS32_USB_IsInitialized>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_IsInitialized(void)
{
  // we assume that initialisation has been done when B-Session valid flag is set
  __IO USB_OTG_GREGS *GREGS = (USB_OTG_GREGS *)(USB_OTG_FS_BASE_ADDR + USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  return (GREGS->GOTGCTL & (1 << 19)) ? 1 : 0;
 8013688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801368c:	6818      	ldr	r0, [r3, #0]
}
 801368e:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8013692:	4770      	bx	lr

08013694 <MIOS32_USB_ForceSingleUSB>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_ForceSingleUSB(void)
{
  u8 *single_usb_confirm = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB_CONFIRM;
  u8 *single_usb = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB;
  if( *single_usb_confirm == 0x42 && *single_usb < 0x80 )
 8013694:	4b06      	ldr	r3, [pc, #24]	; (80136b0 <MIOS32_USB_ForceSingleUSB+0x1c>)
 8013696:	7818      	ldrb	r0, [r3, #0]
 8013698:	2842      	cmp	r0, #66	; 0x42
 801369a:	d106      	bne.n	80136aa <MIOS32_USB_ForceSingleUSB+0x16>
 801369c:	4905      	ldr	r1, [pc, #20]	; (80136b4 <MIOS32_USB_ForceSingleUSB+0x20>)
 801369e:	7808      	ldrb	r0, [r1, #0]
 80136a0:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *single_usb;
 80136a4:	bf18      	it	ne
 80136a6:	2000      	movne	r0, #0
 80136a8:	4770      	bx	lr

  return 0;
 80136aa:	2000      	movs	r0, #0
}
 80136ac:	4770      	bx	lr
 80136ae:	bf00      	nop
 80136b0:	08003fd4 	.word	0x08003fd4
 80136b4:	08003fd5 	.word	0x08003fd5

080136b8 <MIOS32_USB_ForceDeviceMode>:
#ifdef MIOS32_DONT_USE_USB_HOST
  return 1;
#else
  u8 *enforce_usb_device_confirm = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE_CONFIRM;
  u8 *enforce_usb_device = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE;
  if( *enforce_usb_device_confirm == 0x42 && *enforce_usb_device < 0x80 )
 80136b8:	4b06      	ldr	r3, [pc, #24]	; (80136d4 <MIOS32_USB_ForceDeviceMode+0x1c>)
 80136ba:	7818      	ldrb	r0, [r3, #0]
 80136bc:	2842      	cmp	r0, #66	; 0x42
 80136be:	d106      	bne.n	80136ce <MIOS32_USB_ForceDeviceMode+0x16>
 80136c0:	4905      	ldr	r1, [pc, #20]	; (80136d8 <MIOS32_USB_ForceDeviceMode+0x20>)
 80136c2:	7808      	ldrb	r0, [r1, #0]
 80136c4:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *enforce_usb_device;
 80136c8:	bf18      	it	ne
 80136ca:	2000      	movne	r0, #0
 80136cc:	4770      	bx	lr

  return 0;
 80136ce:	2000      	movs	r0, #0
#endif
}
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	08003fd6 	.word	0x08003fd6
 80136d8:	08003fd7 	.word	0x08003fd7

080136dc <MIOS32_USB_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
 80136dc:	2802      	cmp	r0, #2
//!   </UL>
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
 80136de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136e0:	4605      	mov	r5, r0
  // currently only mode 0..2 supported
  if( mode >= 3 )
 80136e2:	d85d      	bhi.n	80137a0 <MIOS32_USB_Init+0xc4>
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 80136e4:	f7ff ffd0 	bl	8013688 <MIOS32_USB_IsInitialized>

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 80136e8:	4c2f      	ldr	r4, [pc, #188]	; (80137a8 <MIOS32_USB_Init+0xcc>)
            USB_OTG_FS_CORE_ID,
            &USB_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
 80136ea:	4b30      	ldr	r3, [pc, #192]	; (80137ac <MIOS32_USB_Init+0xd0>)

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 80136ec:	4a30      	ldr	r2, [pc, #192]	; (80137b0 <MIOS32_USB_Init+0xd4>)
 80136ee:	9300      	str	r3, [sp, #0]
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 80136f0:	4606      	mov	r6, r0

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 80136f2:	2101      	movs	r1, #1
 80136f4:	4620      	mov	r0, r4
 80136f6:	4b2f      	ldr	r3, [pc, #188]	; (80137b4 <MIOS32_USB_Init+0xd8>)
 80136f8:	f002 f84f 	bl	801579a <USBH_Init>
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
#endif

  // change connection state to disconnected
  USBD_USR_DeviceDisconnected();
 80136fc:	f7ff ff08 	bl	8013510 <USBD_USR_DeviceDisconnected>

  if( mode == 0 && usb_is_initialized ) {
 8013700:	bb3d      	cbnz	r5, 8013752 <MIOS32_USB_Init+0x76>
 8013702:	f016 0fff 	tst.w	r6, #255	; 0xff
 8013706:	d024      	beq.n	8013752 <MIOS32_USB_Init+0x76>
#else

    // don't run complete driver init sequence to ensure that the connection doesn't get lost!

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);
 8013708:	4620      	mov	r0, r4
 801370a:	f7ff ff21 	bl	8013550 <USB_OTG_BSP_Init>

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 801370e:	492a      	ldr	r1, [pc, #168]	; (80137b8 <MIOS32_USB_Init+0xdc>)
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8013710:	4a2a      	ldr	r2, [pc, #168]	; (80137bc <MIOS32_USB_Init+0xe0>)
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013712:	4b2b      	ldr	r3, [pc, #172]	; (80137c0 <MIOS32_USB_Init+0xe4>)

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8013714:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8013718:	4620      	mov	r0, r4
 801371a:	2101      	movs	r1, #1
    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 801371c:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013720:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8013724:	f002 fe1e 	bl	8016364 <USB_OTG_SelectCore>

    // enable interrupts
    USB_OTG_EnableGlobalInt(&USB_OTG_dev);
 8013728:	4620      	mov	r0, r4
 801372a:	f002 fec8 	bl	80164be <USB_OTG_EnableGlobalInt>
    USB_OTG_EnableDevInt(&USB_OTG_dev);
 801372e:	4620      	mov	r0, r4
 8013730:	f003 f923 	bl	801697a <USB_OTG_EnableDevInt>
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
 8013734:	4620      	mov	r0, r4
 8013736:	f7ff ff59 	bl	80135ec <USB_OTG_BSP_EnableInterrupt>
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 801373a:	2003      	movs	r0, #3
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 801373c:	2101      	movs	r1, #1
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 801373e:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8013742:	4620      	mov	r0, r4
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 8013744:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8013748:	f7ff fee8 	bl	801351c <MIOS32_USB_CLASS_Init>

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
 801374c:	f7ff fee3 	bl	8013516 <USBD_USR_DeviceConfigured>
 8013750:	e011      	b.n	8013776 <MIOS32_USB_Init+0x9a>
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
	      USB_OTG_FS_CORE_ID,
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);
 8013752:	481a      	ldr	r0, [pc, #104]	; (80137bc <MIOS32_USB_Init+0xe0>)

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
  } else {
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
 8013754:	4a1a      	ldr	r2, [pc, #104]	; (80137c0 <MIOS32_USB_Init+0xe4>)
 8013756:	4b18      	ldr	r3, [pc, #96]	; (80137b8 <MIOS32_USB_Init+0xdc>)
 8013758:	9000      	str	r0, [sp, #0]
 801375a:	2101      	movs	r1, #1
 801375c:	4812      	ldr	r0, [pc, #72]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 801375e:	f001 fd6b 	bl	8015238 <USBD_Init>
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);

    // disconnect device
    DCD_DevDisconnect(&USB_OTG_dev);
 8013762:	4811      	ldr	r0, [pc, #68]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 8013764:	f003 fc6f 	bl	8017046 <DCD_DevDisconnect>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013768:	f24c 3050 	movw	r0, #50000	; 0xc350
 801376c:	f7ff fe08 	bl	8013380 <MIOS32_DELAY_Wait_uS>

    // wait 50 mS
    USB_OTG_BSP_mDelay(50);

    // connect device
    DCD_DevConnect(&USB_OTG_dev);
 8013770:	480d      	ldr	r0, [pc, #52]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 8013772:	f003 fc67 	bl	8017044 <DCD_DevConnect>
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
 8013776:	f7ff ff9f 	bl	80136b8 <MIOS32_USB_ForceDeviceMode>
 801377a:	b920      	cbnz	r0, 8013786 <MIOS32_USB_Init+0xaa>
 801377c:	4c11      	ldr	r4, [pc, #68]	; (80137c4 <MIOS32_USB_Init+0xe8>)
 801377e:	6921      	ldr	r1, [r4, #16]
 8013780:	f411 6480 	ands.w	r4, r1, #1024	; 0x400
 8013784:	d005      	beq.n	8013792 <MIOS32_USB_Init+0xb6>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8013786:	4808      	ldr	r0, [pc, #32]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 8013788:	2100      	movs	r1, #0
 801378a:	f002 fedf 	bl	801654c <USB_OTG_SetCurrentMode>
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
 801378e:	2000      	movs	r0, #0
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8013790:	e008      	b.n	80137a4 <MIOS32_USB_Init+0xc8>
  } else {
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
 8013792:	4805      	ldr	r0, [pc, #20]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 8013794:	2101      	movs	r1, #1
 8013796:	f002 ff30 	bl	80165fa <USB_OTG_DriveVbus>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
 801379a:	4803      	ldr	r0, [pc, #12]	; (80137a8 <MIOS32_USB_Init+0xcc>)
 801379c:	2101      	movs	r1, #1
 801379e:	e7f4      	b.n	801378a <MIOS32_USB_Init+0xae>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode
 80137a0:	f04f 30ff 	mov.w	r0, #4294967295
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
}
 80137a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80137a6:	bf00      	nop
 80137a8:	2000382c 	.word	0x2000382c
 80137ac:	0801b928 	.word	0x0801b928
 80137b0:	200042c0 	.word	0x200042c0
 80137b4:	0801ba64 	.word	0x0801ba64
 80137b8:	0801b970 	.word	0x0801b970
 80137bc:	0801ba48 	.word	0x0801ba48
 80137c0:	0801b9b8 	.word	0x0801b9b8
 80137c4:	40020000 	.word	0x40020000

080137c8 <USBH_ClassRequest>:
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_Status status = USBH_OK;
  return status;
}
 80137c8:	2000      	movs	r0, #0
 80137ca:	4770      	bx	lr

080137cc <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80137cc:	b538      	push	{r3, r4, r5, lr}
  if( USBH_hc_num_out ) {
 80137ce:	4d0c      	ldr	r5, [pc, #48]	; (8013800 <USBH_InterfaceDeInit+0x34>)
 80137d0:	7829      	ldrb	r1, [r5, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 80137d2:	4604      	mov	r4, r0
  if( USBH_hc_num_out ) {
 80137d4:	b139      	cbz	r1, 80137e6 <USBH_InterfaceDeInit+0x1a>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_out);
 80137d6:	f003 f899 	bl	801690c <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_out);
 80137da:	4620      	mov	r0, r4
 80137dc:	7829      	ldrb	r1, [r5, #0]
 80137de:	f002 faf1 	bl	8015dc4 <USBH_Free_Channel>
    USBH_hc_num_out = 0;     /* Reset the Channel as Free */
 80137e2:	2300      	movs	r3, #0
 80137e4:	702b      	strb	r3, [r5, #0]
  }

  if( USBH_hc_num_in ) {
 80137e6:	4d07      	ldr	r5, [pc, #28]	; (8013804 <USBH_InterfaceDeInit+0x38>)
 80137e8:	7829      	ldrb	r1, [r5, #0]
 80137ea:	b141      	cbz	r1, 80137fe <USBH_InterfaceDeInit+0x32>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_in);
 80137ec:	4620      	mov	r0, r4
 80137ee:	f003 f88d 	bl	801690c <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_in);
 80137f2:	4620      	mov	r0, r4
 80137f4:	7829      	ldrb	r1, [r5, #0]
 80137f6:	f002 fae5 	bl	8015dc4 <USBH_Free_Channel>
    USBH_hc_num_in = 0;     /* Reset the Channel as Free */
 80137fa:	2000      	movs	r0, #0
 80137fc:	7028      	strb	r0, [r5, #0]
 80137fe:	bd38      	pop	{r3, r4, r5, pc}
 8013800:	2000049b 	.word	0x2000049b
 8013804:	20000496 	.word	0x20000496

08013808 <MIOS32_USB_MIDI_RxBufferHandler>:
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
{
 8013808:	b570      	push	{r4, r5, r6, lr}
  s16 count;

  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL ) {
 801380a:	4c24      	ldr	r4, [pc, #144]	; (801389c <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
 801380c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8013810:	2b00      	cmp	r3, #0
 8013812:	d042      	beq.n	801389a <MIOS32_USB_MIDI_RxBufferHandler+0x92>
    return;
  }

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8013814:	f7ff f894 	bl	8012940 <MIOS32_IRQ_Disable>

  // check if we can receive new data and get packages to be received from OUT pipe
  u32 ep_num = MIOS32_USB_MIDI_DATA_OUT_EP & 0x7f;
  USB_OTG_EP *ep = &USB_OTG_dev.dev.out_ep[ep_num];
  if( rx_buffer_new_data && (count=ep->xfer_count>>2) ) {
 8013818:	4821      	ldr	r0, [pc, #132]	; (80138a0 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)
 801381a:	7801      	ldrb	r1, [r0, #0]
 801381c:	2900      	cmp	r1, #0
 801381e:	d038      	beq.n	8013892 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8013820:	f8d4 63dc 	ldr.w	r6, [r4, #988]	; 0x3dc
 8013824:	08b6      	lsrs	r6, r6, #2
 8013826:	b2b3      	uxth	r3, r6
 8013828:	2b00      	cmp	r3, #0
 801382a:	d032      	beq.n	8013892 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
    // check if buffer is free
    if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 801382c:	4a1d      	ldr	r2, [pc, #116]	; (80138a4 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 801382e:	8810      	ldrh	r0, [r2, #0]
 8013830:	b281      	uxth	r1, r0
 8013832:	b21b      	sxth	r3, r3
 8013834:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 8013838:	4293      	cmp	r3, r2
 801383a:	da2a      	bge.n	8013892 <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 801383c:	2400      	movs	r4, #0

      // copy received packages into receive buffer
      // this operation should be atomic
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;
 801383e:	4d1a      	ldr	r5, [pc, #104]	; (80138a8 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8013840:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8013844:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8013848:	3010      	adds	r0, #16
 801384a:	4629      	mov	r1, r5
 801384c:	f7fe f986 	bl	8011b5c <MIOS32_MIDI_SendPackageToRxCallback>
 8013850:	b988      	cbnz	r0, 8013876 <MIOS32_USB_MIDI_RxBufferHandler+0x6e>
	  rx_buffer[rx_buffer_head] = package.ALL;
 8013852:	4b16      	ldr	r3, [pc, #88]	; (80138ac <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
 8013854:	4a16      	ldr	r2, [pc, #88]	; (80138b0 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 8013856:	8819      	ldrh	r1, [r3, #0]
 8013858:	b289      	uxth	r1, r1
 801385a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 801385e:	8819      	ldrh	r1, [r3, #0]
 8013860:	1c4a      	adds	r2, r1, #1
 8013862:	b291      	uxth	r1, r2
 8013864:	293f      	cmp	r1, #63	; 0x3f
 8013866:	8019      	strh	r1, [r3, #0]
	    rx_buffer_head = 0;
 8013868:	bf88      	it	hi
 801386a:	8018      	strhhi	r0, [r3, #0]
	  ++rx_buffer_size;
 801386c:	480d      	ldr	r0, [pc, #52]	; (80138a4 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 801386e:	8803      	ldrh	r3, [r0, #0]
 8013870:	1c5a      	adds	r2, r3, #1
 8013872:	b291      	uxth	r1, r2
 8013874:	8001      	strh	r1, [r0, #0]
 8013876:	3401      	adds	r4, #1
/////////////////////////////////////////////////////////////////////////////
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
 8013878:	1b30      	subs	r0, r6, r4

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
	    rx_buffer_head = 0;
	  ++rx_buffer_size;
	}
      } while( --count > 0 );
 801387a:	b203      	sxth	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	dcde      	bgt.n	801383e <MIOS32_USB_MIDI_RxBufferHandler+0x36>

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8013880:	4907      	ldr	r1, [pc, #28]	; (80138a0 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8013882:	4806      	ldr	r0, [pc, #24]	; (801389c <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
	  ++rx_buffer_size;
	}
      } while( --count > 0 );

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8013884:	2200      	movs	r2, #0
 8013886:	700a      	strb	r2, [r1, #0]

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8013888:	2340      	movs	r3, #64	; 0x40
 801388a:	2102      	movs	r1, #2
 801388c:	4a06      	ldr	r2, [pc, #24]	; (80138a8 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 801388e:	f003 fb5d 	bl	8016f4c <DCD_EP_PrepareRx>
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
}
 8013892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		       (uint8_t*)(USB_rx_buffer),
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
 8013896:	f7ff b867 	b.w	8012968 <MIOS32_IRQ_Enable>
 801389a:	bd70      	pop	{r4, r5, r6, pc}
 801389c:	2000382c 	.word	0x2000382c
 80138a0:	2000048a 	.word	0x2000048a
 80138a4:	2000033e 	.word	0x2000033e
 80138a8:	200037ec 	.word	0x200037ec
 80138ac:	2000048c 	.word	0x2000048c
 80138b0:	20000388 	.word	0x20000388

080138b4 <MIOS32_USB_MIDI_TxBufferHandler>:
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 80138b4:	4b23      	ldr	r3, [pc, #140]	; (8013944 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 80138b6:	f8d3 05e4 	ldr.w	r0, [r3, #1508]	; 0x5e4
//!
//! This handler sends the new packages through the IN pipe if the buffer 
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
 80138ba:	b510      	push	{r4, lr}
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 80138bc:	2800      	cmp	r0, #0
 80138be:	d03f      	beq.n	8013940 <MIOS32_USB_MIDI_TxBufferHandler+0x8c>
  //   - last transfer finished
  //   - new packages are in the buffer
  //   - the device is configured

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 80138c0:	f7ff f83e 	bl	8012940 <MIOS32_IRQ_Disable>

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
 80138c4:	4920      	ldr	r1, [pc, #128]	; (8013948 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)
 80138c6:	780a      	ldrb	r2, [r1, #0]
 80138c8:	2a00      	cmp	r2, #0
 80138ca:	d135      	bne.n	8013938 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 80138cc:	4b1f      	ldr	r3, [pc, #124]	; (801394c <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 80138ce:	8818      	ldrh	r0, [r3, #0]
 80138d0:	b281      	uxth	r1, r0
 80138d2:	2900      	cmp	r1, #0
 80138d4:	d030      	beq.n	8013938 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 80138d6:	4a1e      	ldr	r2, [pc, #120]	; (8013950 <MIOS32_USB_MIDI_TxBufferHandler+0x9c>)
 80138d8:	7810      	ldrb	r0, [r2, #0]
 80138da:	2800      	cmp	r0, #0
 80138dc:	d02c      	beq.n	8013938 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 80138de:	8819      	ldrh	r1, [r3, #0]
 80138e0:	b28a      	uxth	r2, r1
 80138e2:	2a10      	cmp	r2, #16
 80138e4:	bf98      	it	ls
 80138e6:	8819      	ldrhls	r1, [r3, #0]

    // notify that new package is sent
    tx_buffer_busy = 1;
 80138e8:	4b17      	ldr	r3, [pc, #92]	; (8013948 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 80138ea:	bf94      	ite	ls
 80138ec:	b289      	uxthls	r1, r1
 80138ee:	2110      	movhi	r1, #16

    // notify that new package is sent
    tx_buffer_busy = 1;
 80138f0:	2001      	movs	r0, #1
 80138f2:	7018      	strb	r0, [r3, #0]

    // send to IN pipe
    tx_buffer_size -= count;
 80138f4:	4815      	ldr	r0, [pc, #84]	; (801394c <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 80138f6:	8802      	ldrh	r2, [r0, #0]
 80138f8:	1a53      	subs	r3, r2, r1
 80138fa:	b29a      	uxth	r2, r3
 80138fc:	8002      	strh	r2, [r0, #0]

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 80138fe:	2200      	movs	r2, #0
 8013900:	b20b      	sxth	r3, r1
 8013902:	429a      	cmp	r2, r3
 8013904:	da12      	bge.n	801392c <MIOS32_USB_MIDI_TxBufferHandler+0x78>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8013906:	4b13      	ldr	r3, [pc, #76]	; (8013954 <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 8013908:	4813      	ldr	r0, [pc, #76]	; (8013958 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 801390a:	881c      	ldrh	r4, [r3, #0]
 801390c:	b2a4      	uxth	r4, r4
 801390e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8013912:	4812      	ldr	r0, [pc, #72]	; (801395c <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8013914:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8013918:	8818      	ldrh	r0, [r3, #0]
 801391a:	3001      	adds	r0, #1
 801391c:	b280      	uxth	r0, r0
 801391e:	283f      	cmp	r0, #63	; 0x3f
 8013920:	8018      	strh	r0, [r3, #0]
 8013922:	d901      	bls.n	8013928 <MIOS32_USB_MIDI_TxBufferHandler+0x74>
	tx_buffer_tail = 0;
 8013924:	2000      	movs	r0, #0
 8013926:	8018      	strh	r0, [r3, #0]
    // send to IN pipe
    tx_buffer_size -= count;

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8013928:	3201      	adds	r2, #1
 801392a:	e7e9      	b.n	8013900 <MIOS32_USB_MIDI_TxBufferHandler+0x4c>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	tx_buffer_tail = 0;
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
 801392c:	4805      	ldr	r0, [pc, #20]	; (8013944 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 801392e:	4a0b      	ldr	r2, [pc, #44]	; (801395c <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8013930:	2181      	movs	r1, #129	; 0x81
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	f003 fb27 	bl	8016f86 <DCD_EP_Tx>
  }

  MIOS32_IRQ_Enable();
}
 8013938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
  }

  MIOS32_IRQ_Enable();
 801393c:	f7ff b814 	b.w	8012968 <MIOS32_IRQ_Enable>
 8013940:	bd10      	pop	{r4, pc}
 8013942:	bf00      	nop
 8013944:	2000382c 	.word	0x2000382c
 8013948:	20000384 	.word	0x20000384
 801394c:	20000492 	.word	0x20000492
 8013950:	20000497 	.word	0x20000497
 8013954:	20000494 	.word	0x20000494
 8013958:	2000023c 	.word	0x2000023c
 801395c:	20000344 	.word	0x20000344

08013960 <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( transfer_possible ) {
 8013962:	4b68      	ldr	r3, [pc, #416]	; (8013b04 <USBH_Handle+0x1a4>)
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013964:	460f      	mov	r7, r1
  if( transfer_possible ) {
 8013966:	7819      	ldrb	r1, [r3, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013968:	4605      	mov	r5, r0
  if( transfer_possible ) {
 801396a:	2900      	cmp	r1, #0
 801396c:	f000 80c8 	beq.w	8013b00 <USBH_Handle+0x1a0>
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {
 8013970:	f003 fdef 	bl	8017552 <HCD_IsDeviceConnected>
 8013974:	2800      	cmp	r0, #0
 8013976:	f000 80c3 	beq.w	8013b00 <USBH_Handle+0x1a0>

      u8 force_rx_req = 0;

      if( USBH_MIDI_transfer_state == USBH_MIDI_TX ) {
 801397a:	4c63      	ldr	r4, [pc, #396]	; (8013b08 <USBH_Handle+0x1a8>)
 801397c:	7820      	ldrb	r0, [r4, #0]
 801397e:	2802      	cmp	r0, #2
 8013980:	d11b      	bne.n	80139ba <USBH_Handle+0x5a>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_out);
 8013982:	4e62      	ldr	r6, [pc, #392]	; (8013b0c <USBH_Handle+0x1ac>)
 8013984:	4628      	mov	r0, r5
 8013986:	7831      	ldrb	r1, [r6, #0]
 8013988:	f003 fdea 	bl	8017560 <HCD_GetURB_State>

        if( URB_State == URB_IDLE ) {
 801398c:	b180      	cbz	r0, 80139b0 <USBH_Handle+0x50>
	  // wait...
	} else if( URB_State == URB_DONE ) {
 801398e:	2801      	cmp	r0, #1
 8013990:	d063      	beq.n	8013a5a <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	} else if( URB_State == URB_STALL ) {
 8013992:	2804      	cmp	r0, #4
 8013994:	d103      	bne.n	801399e <USBH_Handle+0x3e>
	  // Issue Clear Feature on OUT endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkOutEp, USBH_hc_num_out) == USBH_OK ) {
 8013996:	4628      	mov	r0, r5
 8013998:	4639      	mov	r1, r7
 801399a:	4a5d      	ldr	r2, [pc, #372]	; (8013b10 <USBH_Handle+0x1b0>)
 801399c:	e052      	b.n	8013a44 <USBH_Handle+0xe4>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
 801399e:	2802      	cmp	r0, #2
 80139a0:	d108      	bne.n	80139b4 <USBH_Handle+0x54>
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 80139a2:	4b5c      	ldr	r3, [pc, #368]	; (8013b14 <USBH_Handle+0x1b4>)
 80139a4:	485c      	ldr	r0, [pc, #368]	; (8013b18 <USBH_Handle+0x1b8>)
 80139a6:	781a      	ldrb	r2, [r3, #0]
 80139a8:	495c      	ldr	r1, [pc, #368]	; (8013b1c <USBH_Handle+0x1bc>)
 80139aa:	7833      	ldrb	r3, [r6, #0]
 80139ac:	f002 fa96 	bl	8015edc <USBH_BulkSendData>
  if( transfer_possible ) {
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {

      u8 force_rx_req = 0;
 80139b0:	2000      	movs	r0, #0
 80139b2:	e054      	b.n	8013a5e <USBH_Handle+0xfe>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
	} else if( URB_State == URB_ERROR ) {
 80139b4:	2803      	cmp	r0, #3
 80139b6:	d1fb      	bne.n	80139b0 <USBH_Handle+0x50>
 80139b8:	e04f      	b.n	8013a5a <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	}
      } else if( USBH_MIDI_transfer_state == USBH_MIDI_RX ) {
 80139ba:	2801      	cmp	r0, #1
 80139bc:	d1f8      	bne.n	80139b0 <USBH_Handle+0x50>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_in);
 80139be:	4e58      	ldr	r6, [pc, #352]	; (8013b20 <USBH_Handle+0x1c0>)
 80139c0:	4628      	mov	r0, r5
 80139c2:	7831      	ldrb	r1, [r6, #0]
 80139c4:	f003 fdcc 	bl	8017560 <HCD_GetURB_State>
        if( URB_State == URB_IDLE || URB_State == URB_DONE ) {
 80139c8:	2801      	cmp	r0, #1
 80139ca:	d836      	bhi.n	8013a3a <USBH_Handle+0xda>
	  // data received from receive
	  //u32 count = HCD_GetXferCnt(pdev, USBH_hc_num_in) / 4;
	  // Note: HCD_GetXferCnt returns a counter which isn't zeroed immediately on a USBH_BulkReceiveData() call
	  u32 count = USB_OTG_dev.host.hc[USBH_hc_num_in].xfer_count / 4;
 80139cc:	7835      	ldrb	r5, [r6, #0]
 80139ce:	4952      	ldr	r1, [pc, #328]	; (8013b18 <USBH_Handle+0x1b8>)
 80139d0:	eb01 1045 	add.w	r0, r1, r5, lsl #5
 80139d4:	f8d0 38a4 	ldr.w	r3, [r0, #2212]	; 0x8a4

	  // push data into FIFO
	  if( !count ) {
 80139d8:	089d      	lsrs	r5, r3, #2
 80139da:	d101      	bne.n	80139e0 <USBH_Handle+0x80>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 80139dc:	7025      	strb	r5, [r4, #0]
 80139de:	e7e7      	b.n	80139b0 <USBH_Handle+0x50>
	  } else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 80139e0:	4a50      	ldr	r2, [pc, #320]	; (8013b24 <USBH_Handle+0x1c4>)
 80139e2:	8811      	ldrh	r1, [r2, #0]
 80139e4:	b288      	uxth	r0, r1
 80139e6:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 80139ea:	429d      	cmp	r5, r3
 80139ec:	d2e0      	bcs.n	80139b0 <USBH_Handle+0x50>
	    u32 *buf_addr = (u32 *)USB_rx_buffer;

	    // copy received packages into receive buffer
	    // this operation should be atomic
	    MIOS32_IRQ_Disable();
 80139ee:	f7fe ffa7 	bl	8012940 <MIOS32_IRQ_Disable>
 80139f2:	4e4d      	ldr	r6, [pc, #308]	; (8013b28 <USBH_Handle+0x1c8>)
	    do {
	      mios32_midi_package_t package;
	      package.ALL = *buf_addr++;
 80139f4:	f856 4f04 	ldr.w	r4, [r6, #4]!

	      if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 80139f8:	f3c4 1003 	ubfx	r0, r4, #4, #4
 80139fc:	3010      	adds	r0, #16
 80139fe:	4621      	mov	r1, r4
 8013a00:	f7fe f8ac 	bl	8011b5c <MIOS32_MIDI_SendPackageToRxCallback>
 8013a04:	b988      	cbnz	r0, 8013a2a <USBH_Handle+0xca>
		rx_buffer[rx_buffer_head] = package.ALL;
 8013a06:	4b49      	ldr	r3, [pc, #292]	; (8013b2c <USBH_Handle+0x1cc>)
 8013a08:	881a      	ldrh	r2, [r3, #0]
 8013a0a:	b291      	uxth	r1, r2
 8013a0c:	4a48      	ldr	r2, [pc, #288]	; (8013b30 <USBH_Handle+0x1d0>)
 8013a0e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]

		if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8013a12:	8819      	ldrh	r1, [r3, #0]
 8013a14:	1c4a      	adds	r2, r1, #1
 8013a16:	b291      	uxth	r1, r2
 8013a18:	293f      	cmp	r1, #63	; 0x3f
 8013a1a:	8019      	strh	r1, [r3, #0]
		  rx_buffer_head = 0;
 8013a1c:	bf88      	it	hi
 8013a1e:	8018      	strhhi	r0, [r3, #0]
		++rx_buffer_size;
 8013a20:	4840      	ldr	r0, [pc, #256]	; (8013b24 <USBH_Handle+0x1c4>)
 8013a22:	8803      	ldrh	r3, [r0, #0]
 8013a24:	1c5a      	adds	r2, r3, #1
 8013a26:	b291      	uxth	r1, r2
 8013a28:	8001      	strh	r1, [r0, #0]
	      }
	    } while( --count > 0 );
 8013a2a:	3d01      	subs	r5, #1
 8013a2c:	d1e2      	bne.n	80139f4 <USBH_Handle+0x94>
	    MIOS32_IRQ_Enable();
 8013a2e:	f7fe ff9b 	bl	8012968 <MIOS32_IRQ_Enable>

	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013a32:	4835      	ldr	r0, [pc, #212]	; (8013b08 <USBH_Handle+0x1a8>)
 8013a34:	7005      	strb	r5, [r0, #0]
	    force_rx_req = 1;
 8013a36:	2001      	movs	r0, #1
 8013a38:	e011      	b.n	8013a5e <USBH_Handle+0xfe>
	  }
	} else if( URB_State == URB_STALL ) {
 8013a3a:	2804      	cmp	r0, #4
 8013a3c:	d109      	bne.n	8013a52 <USBH_Handle+0xf2>
	  // Issue Clear Feature on IN endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkInEp, USBH_hc_num_in) == USBH_OK ) {
 8013a3e:	4a3d      	ldr	r2, [pc, #244]	; (8013b34 <USBH_Handle+0x1d4>)
 8013a40:	4628      	mov	r0, r5
 8013a42:	4639      	mov	r1, r7
 8013a44:	7812      	ldrb	r2, [r2, #0]
 8013a46:	7833      	ldrb	r3, [r6, #0]
 8013a48:	f002 fc1e 	bl	8016288 <USBH_ClrFeature>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d1af      	bne.n	80139b0 <USBH_Handle+0x50>
 8013a50:	e004      	b.n	8013a5c <USBH_Handle+0xfc>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_ERROR || URB_State == URB_NOTREADY ) {
 8013a52:	1e82      	subs	r2, r0, #2
 8013a54:	b2d3      	uxtb	r3, r2
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	d8aa      	bhi.n	80139b0 <USBH_Handle+0x50>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013a5a:	2000      	movs	r0, #0
 8013a5c:	7020      	strb	r0, [r4, #0]
	}
      }


      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
 8013a5e:	4a2a      	ldr	r2, [pc, #168]	; (8013b08 <USBH_Handle+0x1a8>)
 8013a60:	7811      	ldrb	r1, [r2, #0]
 8013a62:	2900      	cmp	r1, #0
 8013a64:	d14c      	bne.n	8013b00 <USBH_Handle+0x1a0>
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d13f      	bne.n	8013aea <USBH_Handle+0x18a>
 8013a6a:	4c33      	ldr	r4, [pc, #204]	; (8013b38 <USBH_Handle+0x1d8>)
 8013a6c:	8820      	ldrh	r0, [r4, #0]
 8013a6e:	b283      	uxth	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d03a      	beq.n	8013aea <USBH_Handle+0x18a>
 8013a74:	4a23      	ldr	r2, [pc, #140]	; (8013b04 <USBH_Handle+0x1a4>)
 8013a76:	7811      	ldrb	r1, [r2, #0]
 8013a78:	2900      	cmp	r1, #0
 8013a7a:	d036      	beq.n	8013aea <USBH_Handle+0x18a>
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();
 8013a7c:	f7fe ff60 	bl	8012940 <MIOS32_IRQ_Disable>

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8013a80:	482e      	ldr	r0, [pc, #184]	; (8013b3c <USBH_Handle+0x1dc>)
 8013a82:	8821      	ldrh	r1, [r4, #0]
 8013a84:	8802      	ldrh	r2, [r0, #0]
 8013a86:	b28b      	uxth	r3, r1
 8013a88:	0891      	lsrs	r1, r2, #2
 8013a8a:	428b      	cmp	r3, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8013a8c:	4b2a      	ldr	r3, [pc, #168]	; (8013b38 <USBH_Handle+0x1d8>)
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8013a8e:	bf98      	it	ls
 8013a90:	8821      	ldrhls	r1, [r4, #0]

	  // send to IN pipe
	  tx_buffer_size -= count;
 8013a92:	8818      	ldrh	r0, [r3, #0]
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8013a94:	b28a      	uxth	r2, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8013a96:	1a81      	subs	r1, r0, r2
 8013a98:	b288      	uxth	r0, r1
 8013a9a:	8018      	strh	r0, [r3, #0]

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	b211      	sxth	r1, r2
 8013aa0:	428b      	cmp	r3, r1
 8013aa2:	da12      	bge.n	8013aca <USBH_Handle+0x16a>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8013aa4:	4926      	ldr	r1, [pc, #152]	; (8013b40 <USBH_Handle+0x1e0>)
 8013aa6:	4827      	ldr	r0, [pc, #156]	; (8013b44 <USBH_Handle+0x1e4>)
 8013aa8:	880c      	ldrh	r4, [r1, #0]
 8013aaa:	b2a4      	uxth	r4, r4
 8013aac:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8013ab0:	481a      	ldr	r0, [pc, #104]	; (8013b1c <USBH_Handle+0x1bc>)
 8013ab2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8013ab6:	8808      	ldrh	r0, [r1, #0]
 8013ab8:	3001      	adds	r0, #1
 8013aba:	b280      	uxth	r0, r0
 8013abc:	283f      	cmp	r0, #63	; 0x3f
 8013abe:	8008      	strh	r0, [r1, #0]
 8013ac0:	d901      	bls.n	8013ac6 <USBH_Handle+0x166>
	      tx_buffer_tail = 0;
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	8008      	strh	r0, [r1, #0]
	  // send to IN pipe
	  tx_buffer_size -= count;

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	e7e9      	b.n	8013a9e <USBH_Handle+0x13e>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8013aca:	0092      	lsls	r2, r2, #2
 8013acc:	4b11      	ldr	r3, [pc, #68]	; (8013b14 <USBH_Handle+0x1b4>)
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8013ace:	4913      	ldr	r1, [pc, #76]	; (8013b1c <USBH_Handle+0x1bc>)
 8013ad0:	4811      	ldr	r0, [pc, #68]	; (8013b18 <USBH_Handle+0x1b8>)
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8013ad2:	b2d2      	uxtb	r2, r2
 8013ad4:	701a      	strb	r2, [r3, #0]
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8013ad6:	4b0d      	ldr	r3, [pc, #52]	; (8013b0c <USBH_Handle+0x1ac>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	f002 f9ff 	bl	8015edc <USBH_BulkSendData>

	  USBH_MIDI_transfer_state = USBH_MIDI_TX;
 8013ade:	490a      	ldr	r1, [pc, #40]	; (8013b08 <USBH_Handle+0x1a8>)
 8013ae0:	2002      	movs	r0, #2
 8013ae2:	7008      	strb	r0, [r1, #0]

	  MIOS32_IRQ_Enable();
 8013ae4:	f7fe ff40 	bl	8012968 <MIOS32_IRQ_Enable>
 8013ae8:	e00a      	b.n	8013b00 <USBH_Handle+0x1a0>
	} else {
	  // request data from device
	  USBH_BulkReceiveData(&USB_OTG_dev, (u8 *)USB_rx_buffer, USBH_BulkInEpSize, USBH_hc_num_in);
 8013aea:	4b17      	ldr	r3, [pc, #92]	; (8013b48 <USBH_Handle+0x1e8>)
 8013aec:	480a      	ldr	r0, [pc, #40]	; (8013b18 <USBH_Handle+0x1b8>)
 8013aee:	781a      	ldrb	r2, [r3, #0]
 8013af0:	4b0b      	ldr	r3, [pc, #44]	; (8013b20 <USBH_Handle+0x1c0>)
 8013af2:	4916      	ldr	r1, [pc, #88]	; (8013b4c <USBH_Handle+0x1ec>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	f002 fa0b 	bl	8015f10 <USBH_BulkReceiveData>
	  USBH_MIDI_transfer_state = USBH_MIDI_RX;
 8013afa:	4a03      	ldr	r2, [pc, #12]	; (8013b08 <USBH_Handle+0x1a8>)
 8013afc:	2001      	movs	r0, #1
 8013afe:	7010      	strb	r0, [r2, #0]
      }
    }
  }

  return USBH_OK;
}
 8013b00:	2000      	movs	r0, #0
 8013b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b04:	20000497 	.word	0x20000497
 8013b08:	2000049a 	.word	0x2000049a
 8013b0c:	2000049b 	.word	0x2000049b
 8013b10:	20000340 	.word	0x20000340
 8013b14:	20000490 	.word	0x20000490
 8013b18:	2000382c 	.word	0x2000382c
 8013b1c:	20000344 	.word	0x20000344
 8013b20:	20000496 	.word	0x20000496
 8013b24:	2000033e 	.word	0x2000033e
 8013b28:	200037e8 	.word	0x200037e8
 8013b2c:	2000048c 	.word	0x2000048c
 8013b30:	20000388 	.word	0x20000388
 8013b34:	20000341 	.word	0x20000341
 8013b38:	20000492 	.word	0x20000492
 8013b3c:	20000498 	.word	0x20000498
 8013b40:	20000494 	.word	0x20000494
 8013b44:	2000023c 	.word	0x2000023c
 8013b48:	20000491 	.word	0x20000491
 8013b4c:	200037ec 	.word	0x200037ec

08013b50 <MIOS32_USB_MIDI_Init>:
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  return 0; // no error
}
 8013b50:	2800      	cmp	r0, #0
 8013b52:	bf14      	ite	ne
 8013b54:	f04f 30ff 	movne.w	r0, #4294967295
 8013b58:	2000      	moveq	r0, #0
 8013b5a:	4770      	bx	lr

08013b5c <MIOS32_USB_MIDI_ChangeConnectionState>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8013b5c:	490e      	ldr	r1, [pc, #56]	; (8013b98 <MIOS32_USB_MIDI_ChangeConnectionState+0x3c>)
 8013b5e:	2300      	movs	r3, #0
//! \param[in] connected status (1 if connected)
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
 8013b60:	b510      	push	{r4, lr}
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8013b62:	800b      	strh	r3, [r1, #0]
 8013b64:	4c0d      	ldr	r4, [pc, #52]	; (8013b9c <MIOS32_USB_MIDI_ChangeConnectionState+0x40>)
 8013b66:	490e      	ldr	r1, [pc, #56]	; (8013ba0 <MIOS32_USB_MIDI_ChangeConnectionState+0x44>)
 8013b68:	8023      	strh	r3, [r4, #0]
 8013b6a:	800b      	strh	r3, [r1, #0]
  rx_buffer_new_data = 0; // no data received yet
 8013b6c:	4c0d      	ldr	r4, [pc, #52]	; (8013ba4 <MIOS32_USB_MIDI_ChangeConnectionState+0x48>)
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8013b6e:	490e      	ldr	r1, [pc, #56]	; (8013ba8 <MIOS32_USB_MIDI_ChangeConnectionState+0x4c>)
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
 8013b70:	7023      	strb	r3, [r4, #0]
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8013b72:	800b      	strh	r3, [r1, #0]
 8013b74:	4c0d      	ldr	r4, [pc, #52]	; (8013bac <MIOS32_USB_MIDI_ChangeConnectionState+0x50>)
 8013b76:	490e      	ldr	r1, [pc, #56]	; (8013bb0 <MIOS32_USB_MIDI_ChangeConnectionState+0x54>)
 8013b78:	8023      	strh	r3, [r4, #0]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8013b7a:	461a      	mov	r2, r3
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8013b7c:	800b      	strh	r3, [r1, #0]
 8013b7e:	4c0d      	ldr	r4, [pc, #52]	; (8013bb4 <MIOS32_USB_MIDI_ChangeConnectionState+0x58>)
 8013b80:	4b0d      	ldr	r3, [pc, #52]	; (8013bb8 <MIOS32_USB_MIDI_ChangeConnectionState+0x5c>)
 8013b82:	2101      	movs	r1, #1

  if( connected ) {
 8013b84:	b120      	cbz	r0, 8013b90 <MIOS32_USB_MIDI_ChangeConnectionState+0x34>
    transfer_possible = 1;
    tx_buffer_busy = 0; // buffer not busy anymore

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013b86:	480d      	ldr	r0, [pc, #52]	; (8013bbc <MIOS32_USB_MIDI_ChangeConnectionState+0x60>)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;

  if( connected ) {
    transfer_possible = 1;
 8013b88:	7021      	strb	r1, [r4, #0]
    tx_buffer_busy = 0; // buffer not busy anymore
 8013b8a:	701a      	strb	r2, [r3, #0]

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013b8c:	7002      	strb	r2, [r0, #0]
 8013b8e:	e001      	b.n	8013b94 <MIOS32_USB_MIDI_ChangeConnectionState+0x38>
#endif
  } else {
    // cable disconnected: disable transfers
    transfer_possible = 0;
 8013b90:	7022      	strb	r2, [r4, #0]
    tx_buffer_busy = 1; // buffer busy
 8013b92:	7019      	strb	r1, [r3, #0]
  }

  return 0; // no error
}
 8013b94:	2000      	movs	r0, #0
 8013b96:	bd10      	pop	{r4, pc}
 8013b98:	2000033e 	.word	0x2000033e
 8013b9c:	2000048c 	.word	0x2000048c
 8013ba0:	2000033c 	.word	0x2000033c
 8013ba4:	2000048a 	.word	0x2000048a
 8013ba8:	20000492 	.word	0x20000492
 8013bac:	20000488 	.word	0x20000488
 8013bb0:	20000494 	.word	0x20000494
 8013bb4:	20000497 	.word	0x20000497
 8013bb8:	20000384 	.word	0x20000384
 8013bbc:	2000049a 	.word	0x2000049a

08013bc0 <MIOS32_USB_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
 8013bc0:	b510      	push	{r4, lr}
 8013bc2:	4604      	mov	r4, r0
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
 8013bc4:	f7ff fd66 	bl	8013694 <MIOS32_USB_ForceSingleUSB>
 8013bc8:	b92c      	cbnz	r4, 8013bd6 <MIOS32_USB_MIDI_CheckAvailable+0x16>
#endif

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
 8013bca:	4b04      	ldr	r3, [pc, #16]	; (8013bdc <MIOS32_USB_MIDI_CheckAvailable+0x1c>)
 8013bcc:	7818      	ldrb	r0, [r3, #0]
 8013bce:	3000      	adds	r0, #0
 8013bd0:	bf18      	it	ne
 8013bd2:	2001      	movne	r0, #1
 8013bd4:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
    return 0;
 8013bd6:	2000      	movs	r0, #0

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
}
 8013bd8:	bd10      	pop	{r4, pc}
 8013bda:	bf00      	nop
 8013bdc:	20000497 	.word	0x20000497

08013be0 <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013be2:	460c      	mov	r4, r1
 8013be4:	4605      	mov	r5, r0
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8013be6:	2000      	movs	r0, #0
 8013be8:	f7ff ffb8 	bl	8013b5c <MIOS32_USB_MIDI_ChangeConnectionState>

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8013bec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d060      	beq.n	8013cb6 <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8013bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013bf8:	2a01      	cmp	r2, #1
 8013bfa:	d103      	bne.n	8013c04 <USBH_InterfaceInit+0x24>
 8013bfc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8013c00:	2803      	cmp	r0, #3
 8013c02:	d00a      	beq.n	8013c1a <USBH_InterfaceInit+0x3a>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	dd56      	ble.n	8013cb6 <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8013c08:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d152      	bne.n	8013cb6 <USBH_InterfaceInit+0xd6>
 8013c10:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8013c14:	2903      	cmp	r1, #3
 8013c16:	d14e      	bne.n	8013cb6 <USBH_InterfaceInit+0xd6>
 8013c18:	e000      	b.n	8013c1c <USBH_InterfaceInit+0x3c>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8013c1a:	2300      	movs	r3, #0
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
	(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
 8013c1c:	1d5e      	adds	r6, r3, #5
 8013c1e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 8013c22:	78ba      	ldrb	r2, [r7, #2]
 8013c24:	88b9      	ldrh	r1, [r7, #4]
 8013c26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8013c2a:	d004      	beq.n	8013c36 <USBH_InterfaceInit+0x56>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8013c2c:	4f27      	ldr	r7, [pc, #156]	; (8013ccc <USBH_InterfaceInit+0xec>)
 8013c2e:	703a      	strb	r2, [r7, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 8013c30:	4a27      	ldr	r2, [pc, #156]	; (8013cd0 <USBH_InterfaceInit+0xf0>)
 8013c32:	7011      	strb	r1, [r2, #0]
 8013c34:	e003      	b.n	8013c3e <USBH_InterfaceInit+0x5e>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8013c36:	4827      	ldr	r0, [pc, #156]	; (8013cd4 <USBH_InterfaceInit+0xf4>)
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8013c38:	4e27      	ldr	r6, [pc, #156]	; (8013cd8 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8013c3a:	7002      	strb	r2, [r0, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8013c3c:	8031      	strh	r1, [r6, #0]
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
 8013c3e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8013c42:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8013c46:	f893 605a 	ldrb.w	r6, [r3, #90]	; 0x5a
 8013c4a:	4f22      	ldr	r7, [pc, #136]	; (8013cd4 <USBH_InterfaceInit+0xf4>)
 8013c4c:	888a      	ldrh	r2, [r1, #4]
 8013c4e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8013c52:	d004      	beq.n	8013c5e <USBH_InterfaceInit+0x7e>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8013c54:	4b1d      	ldr	r3, [pc, #116]	; (8013ccc <USBH_InterfaceInit+0xec>)
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8013c56:	491e      	ldr	r1, [pc, #120]	; (8013cd0 <USBH_InterfaceInit+0xf0>)
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8013c58:	701e      	strb	r6, [r3, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8013c5a:	700a      	strb	r2, [r1, #0]
 8013c5c:	e002      	b.n	8013c64 <USBH_InterfaceInit+0x84>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8013c5e:	481e      	ldr	r0, [pc, #120]	; (8013cd8 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8013c60:	703e      	strb	r6, [r7, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8013c62:	8002      	strh	r2, [r0, #0]
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8013c64:	7839      	ldrb	r1, [r7, #0]
 8013c66:	4e1d      	ldr	r6, [pc, #116]	; (8013cdc <USBH_InterfaceInit+0xfc>)
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8013c68:	4f18      	ldr	r7, [pc, #96]	; (8013ccc <USBH_InterfaceInit+0xec>)
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f002 f891 	bl	8015d92 <USBH_Alloc_Channel>
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8013c70:	7839      	ldrb	r1, [r7, #0]
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8013c72:	7030      	strb	r0, [r6, #0]
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8013c74:	4628      	mov	r0, r5
 8013c76:	f002 f88c 	bl	8015d92 <USBH_Alloc_Channel>
 8013c7a:	4f19      	ldr	r7, [pc, #100]	; (8013ce0 <USBH_InterfaceInit+0x100>)

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8013c7c:	7831      	ldrb	r1, [r6, #0]
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8013c7e:	7038      	strb	r0, [r7, #0]

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8013c80:	2602      	movs	r6, #2
 8013c82:	4815      	ldr	r0, [pc, #84]	; (8013cd8 <USBH_InterfaceInit+0xf8>)
 8013c84:	9600      	str	r6, [sp, #0]
 8013c86:	8800      	ldrh	r0, [r0, #0]
 8013c88:	f894 2020 	ldrb.w	r2, [r4, #32]
 8013c8c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013c90:	9001      	str	r0, [sp, #4]
 8013c92:	4628      	mov	r0, r5
 8013c94:	f002 f836 	bl	8015d04 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkOutEpSize);

      USBH_Open_Channel(pdev,
 8013c98:	480d      	ldr	r0, [pc, #52]	; (8013cd0 <USBH_InterfaceInit+0xf0>)
 8013c9a:	7839      	ldrb	r1, [r7, #0]
 8013c9c:	9600      	str	r6, [sp, #0]
 8013c9e:	7800      	ldrb	r0, [r0, #0]
 8013ca0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8013ca4:	9001      	str	r0, [sp, #4]
 8013ca6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013caa:	4628      	mov	r0, r5
 8013cac:	f002 f82a 	bl	8015d04 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkInEpSize);

      MIOS32_USB_MIDI_ChangeConnectionState(1);
 8013cb0:	2001      	movs	r0, #1
 8013cb2:	f7ff ff53 	bl	8013b5c <MIOS32_USB_MIDI_ChangeConnectionState>
      break;
    }
  }

  if( MIOS32_USB_MIDI_CheckAvailable(0) ) {
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	f7ff ff82 	bl	8013bc0 <MIOS32_USB_MIDI_CheckAvailable>
 8013cbc:	b118      	cbz	r0, 8013cc6 <USBH_InterfaceInit+0xe6>
    pphost->usr_cb->DeviceNotSupported();
 8013cbe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8013cc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013cc4:	4798      	blx	r3
  }
	
  return USBH_OK;

}
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	20000341 	.word	0x20000341
 8013cd0:	20000491 	.word	0x20000491
 8013cd4:	20000340 	.word	0x20000340
 8013cd8:	20000498 	.word	0x20000498
 8013cdc:	2000049b 	.word	0x2000049b
 8013ce0:	20000496 	.word	0x20000496

08013ce4 <MIOS32_USB_MIDI_PackageSend_NonBlocking>:
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8013ce4:	b510      	push	{r4, lr}
  // device available?
  if( !transfer_possible )
 8013ce6:	4b19      	ldr	r3, [pc, #100]	; (8013d4c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x68>)
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8013ce8:	4604      	mov	r4, r0
  // device available?
  if( !transfer_possible )
 8013cea:	7818      	ldrb	r0, [r3, #0]
 8013cec:	b910      	cbnz	r0, 8013cf4 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x10>
    return -1;
 8013cee:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf2:	bd10      	pop	{r4, pc}

  // buffer full?
  if( tx_buffer_size >= (MIOS32_USB_MIDI_TX_BUFFER_SIZE-1) ) {
 8013cf4:	4916      	ldr	r1, [pc, #88]	; (8013d50 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 8013cf6:	880a      	ldrh	r2, [r1, #0]
 8013cf8:	b293      	uxth	r3, r2
 8013cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8013cfc:	d90c      	bls.n	8013d18 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x34>
    if( USB_OTG_IsDeviceMode(&USB_OTG_dev) ) {
 8013cfe:	4815      	ldr	r0, [pc, #84]	; (8013d54 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x70>)
 8013d00:	f002 fc39 	bl	8016576 <USB_OTG_IsDeviceMode>
 8013d04:	b108      	cbz	r0, 8013d0a <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x26>
      // call USB handler, so that we are able to get the buffer free again on next execution
      // (this call simplifies polling loops!)
      // Note: Only in Device mode!
      MIOS32_USB_MIDI_TxBufferHandler();
 8013d06:	f7ff fdd5 	bl	80138b4 <MIOS32_USB_MIDI_TxBufferHandler>
    }
    // device still available?
    // (ensures that polling loop terminates if cable has been disconnected)
    if( !transfer_possible )
 8013d0a:	4810      	ldr	r0, [pc, #64]	; (8013d4c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x68>)
 8013d0c:	7803      	ldrb	r3, [r0, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d0ed      	beq.n	8013cee <MIOS32_USB_MIDI_PackageSend_NonBlocking+0xa>
      return -1;

    // notify that buffer was full (request retry)
    return -2;
 8013d12:	f06f 0001 	mvn.w	r0, #1
 8013d16:	bd10      	pop	{r4, pc}
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8013d18:	f7fe fe12 	bl	8012940 <MIOS32_IRQ_Disable>
  tx_buffer[tx_buffer_head++] = package.ALL;
 8013d1c:	480e      	ldr	r0, [pc, #56]	; (8013d58 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x74>)
 8013d1e:	4b0f      	ldr	r3, [pc, #60]	; (8013d5c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x78>)
 8013d20:	8801      	ldrh	r1, [r0, #0]
 8013d22:	b28a      	uxth	r2, r1
 8013d24:	1c51      	adds	r1, r2, #1
 8013d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d2a:	b28a      	uxth	r2, r1
 8013d2c:	8002      	strh	r2, [r0, #0]
  if( tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8013d2e:	8803      	ldrh	r3, [r0, #0]
 8013d30:	b299      	uxth	r1, r3
 8013d32:	293f      	cmp	r1, #63	; 0x3f
 8013d34:	d901      	bls.n	8013d3a <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x56>
    tx_buffer_head = 0;
 8013d36:	2200      	movs	r2, #0
 8013d38:	8002      	strh	r2, [r0, #0]
  ++tx_buffer_size;
 8013d3a:	4805      	ldr	r0, [pc, #20]	; (8013d50 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 8013d3c:	8803      	ldrh	r3, [r0, #0]
 8013d3e:	1c59      	adds	r1, r3, #1
 8013d40:	b28a      	uxth	r2, r1
 8013d42:	8002      	strh	r2, [r0, #0]
  MIOS32_IRQ_Enable();
 8013d44:	f7fe fe10 	bl	8012968 <MIOS32_IRQ_Enable>

  return 0;
 8013d48:	2000      	movs	r0, #0
}
 8013d4a:	bd10      	pop	{r4, pc}
 8013d4c:	20000497 	.word	0x20000497
 8013d50:	20000492 	.word	0x20000492
 8013d54:	2000382c 	.word	0x2000382c
 8013d58:	20000488 	.word	0x20000488
 8013d5c:	2000023c 	.word	0x2000023c

08013d60 <MIOS32_USB_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: USB not connected
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend(mios32_midi_package_t package)
{
 8013d60:	b510      	push	{r4, lr}
 8013d62:	4604      	mov	r4, r0
  // was successfull (MIDI port will be used by host), timeout value is
  // reset again

  s32 error;

  while( (error=MIOS32_USB_MIDI_PackageSend_NonBlocking(package)) == -2 ) {
 8013d64:	4620      	mov	r0, r4
 8013d66:	f7ff ffbd 	bl	8013ce4 <MIOS32_USB_MIDI_PackageSend_NonBlocking>
 8013d6a:	1c83      	adds	r3, r0, #2
 8013d6c:	d108      	bne.n	8013d80 <MIOS32_USB_MIDI_PackageSend+0x20>
    if( timeout_ctr >= 10000 )
 8013d6e:	4b07      	ldr	r3, [pc, #28]	; (8013d8c <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8013d70:	881a      	ldrh	r2, [r3, #0]
 8013d72:	f242 710f 	movw	r1, #9999	; 0x270f
 8013d76:	428a      	cmp	r2, r1
 8013d78:	d807      	bhi.n	8013d8a <MIOS32_USB_MIDI_PackageSend+0x2a>
      break;
    ++timeout_ctr;
 8013d7a:	1c50      	adds	r0, r2, #1
 8013d7c:	8018      	strh	r0, [r3, #0]
 8013d7e:	e7f1      	b.n	8013d64 <MIOS32_USB_MIDI_PackageSend+0x4>
  }

  if( error >= 0 ) // no error: reset timeout counter
 8013d80:	2800      	cmp	r0, #0
 8013d82:	db02      	blt.n	8013d8a <MIOS32_USB_MIDI_PackageSend+0x2a>
    timeout_ctr = 0;
 8013d84:	4b01      	ldr	r3, [pc, #4]	; (8013d8c <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	801a      	strh	r2, [r3, #0]

  return error;
}
 8013d8a:	bd10      	pop	{r4, pc}
 8013d8c:	2000048e 	.word	0x2000048e

08013d90 <MIOS32_USB_MIDI_PackageReceive>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
 8013d90:	4b11      	ldr	r3, [pc, #68]	; (8013dd8 <MIOS32_USB_MIDI_PackageReceive+0x48>)
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 8013d92:	b510      	push	{r4, lr}
 8013d94:	4604      	mov	r4, r0
  // package received?
  if( !rx_buffer_size )
 8013d96:	8818      	ldrh	r0, [r3, #0]
 8013d98:	b281      	uxth	r1, r0
 8013d9a:	b1d1      	cbz	r1, 8013dd2 <MIOS32_USB_MIDI_PackageReceive+0x42>
    return -1;

  // get package - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8013d9c:	f7fe fdd0 	bl	8012940 <MIOS32_IRQ_Disable>
  package->ALL = rx_buffer[rx_buffer_tail];
 8013da0:	4b0e      	ldr	r3, [pc, #56]	; (8013ddc <MIOS32_USB_MIDI_PackageReceive+0x4c>)
 8013da2:	490f      	ldr	r1, [pc, #60]	; (8013de0 <MIOS32_USB_MIDI_PackageReceive+0x50>)
 8013da4:	881a      	ldrh	r2, [r3, #0]
 8013da6:	b290      	uxth	r0, r2
 8013da8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8013dac:	6022      	str	r2, [r4, #0]
  if( ++rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8013dae:	881c      	ldrh	r4, [r3, #0]
 8013db0:	1c60      	adds	r0, r4, #1
 8013db2:	b281      	uxth	r1, r0
 8013db4:	293f      	cmp	r1, #63	; 0x3f
 8013db6:	8019      	strh	r1, [r3, #0]
 8013db8:	d901      	bls.n	8013dbe <MIOS32_USB_MIDI_PackageReceive+0x2e>
    rx_buffer_tail = 0;
 8013dba:	2200      	movs	r2, #0
 8013dbc:	801a      	strh	r2, [r3, #0]
  --rx_buffer_size;
 8013dbe:	4c06      	ldr	r4, [pc, #24]	; (8013dd8 <MIOS32_USB_MIDI_PackageReceive+0x48>)
 8013dc0:	8823      	ldrh	r3, [r4, #0]
 8013dc2:	1e58      	subs	r0, r3, #1
 8013dc4:	b281      	uxth	r1, r0
 8013dc6:	8021      	strh	r1, [r4, #0]
  MIOS32_IRQ_Enable();
 8013dc8:	f7fe fdce 	bl	8012968 <MIOS32_IRQ_Enable>

  return rx_buffer_size;
 8013dcc:	8822      	ldrh	r2, [r4, #0]
 8013dce:	b290      	uxth	r0, r2
 8013dd0:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
    return -1;
 8013dd2:	f04f 30ff 	mov.w	r0, #4294967295
    rx_buffer_tail = 0;
  --rx_buffer_size;
  MIOS32_IRQ_Enable();

  return rx_buffer_size;
}
 8013dd6:	bd10      	pop	{r4, pc}
 8013dd8:	2000033e 	.word	0x2000033e
 8013ddc:	2000033c 	.word	0x2000033c
 8013de0:	20000388 	.word	0x20000388

08013de4 <MIOS32_USB_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Periodic_mS(void)
{
 8013de4:	b508      	push	{r3, lr}
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 8013de6:	4807      	ldr	r0, [pc, #28]	; (8013e04 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8013de8:	f002 fbcc 	bl	8016584 <USB_OTG_IsHostMode>
 8013dec:	b120      	cbz	r0, 8013df8 <MIOS32_USB_MIDI_Periodic_mS+0x14>
#ifndef MIOS32_DONT_USE_USB_HOST
    // process the USB host events
    USBH_Process(&USB_OTG_dev, &USB_Host);
 8013dee:	4805      	ldr	r0, [pc, #20]	; (8013e04 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8013df0:	4905      	ldr	r1, [pc, #20]	; (8013e08 <MIOS32_USB_MIDI_Periodic_mS+0x24>)
 8013df2:	f001 fde5 	bl	80159c0 <USBH_Process>
 8013df6:	e003      	b.n	8013e00 <MIOS32_USB_MIDI_Periodic_mS+0x1c>
#endif
  } else {
    // check for received packages
    MIOS32_USB_MIDI_RxBufferHandler();
 8013df8:	f7ff fd06 	bl	8013808 <MIOS32_USB_MIDI_RxBufferHandler>

    // check for packages which should be transmitted
    MIOS32_USB_MIDI_TxBufferHandler();
 8013dfc:	f7ff fd5a 	bl	80138b4 <MIOS32_USB_MIDI_TxBufferHandler>
  }

  return 0;
}
 8013e00:	2000      	movs	r0, #0
 8013e02:	bd08      	pop	{r3, pc}
 8013e04:	2000382c 	.word	0x2000382c
 8013e08:	200042c0 	.word	0x200042c0

08013e0c <MIOS32_USB_MIDI_EP1_IN_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP1_IN_Callback(u8 bEP, u8 bEPStatus)
{
  // package has been sent
  tx_buffer_busy = 0;
 8013e0c:	4b02      	ldr	r3, [pc, #8]	; (8013e18 <MIOS32_USB_MIDI_EP1_IN_Callback+0xc>)
 8013e0e:	2200      	movs	r2, #0
 8013e10:	701a      	strb	r2, [r3, #0]

  // check for next package
  MIOS32_USB_MIDI_TxBufferHandler();
 8013e12:	f7ff bd4f 	b.w	80138b4 <MIOS32_USB_MIDI_TxBufferHandler>
 8013e16:	bf00      	nop
 8013e18:	20000384 	.word	0x20000384

08013e1c <MIOS32_USB_MIDI_EP2_OUT_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP2_OUT_Callback(u8 bEP, u8 bEPStatus)
{
  // put package into buffer
  rx_buffer_new_data = 1;
 8013e1c:	4b02      	ldr	r3, [pc, #8]	; (8013e28 <MIOS32_USB_MIDI_EP2_OUT_Callback+0xc>)
 8013e1e:	2201      	movs	r2, #1
 8013e20:	701a      	strb	r2, [r3, #0]
  MIOS32_USB_MIDI_RxBufferHandler();
 8013e22:	f7ff bcf1 	b.w	8013808 <MIOS32_USB_MIDI_RxBufferHandler>
 8013e26:	bf00      	nop
 8013e28:	2000048a 	.word	0x2000048a

08013e2c <MIOS32_UART_IsAssignedToMIDI>:
s32 MIOS32_UART_IsAssignedToMIDI(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return 0; // no UART available
#else
  return (uart_assigned_to_midi & (1 << uart)) ? 1 : 0;
 8013e2c:	4b03      	ldr	r3, [pc, #12]	; (8013e3c <MIOS32_UART_IsAssignedToMIDI+0x10>)
 8013e2e:	7819      	ldrb	r1, [r3, #0]
 8013e30:	fa41 f000 	asr.w	r0, r1, r0
#endif
}
 8013e34:	f000 0001 	and.w	r0, r0, #1
 8013e38:	4770      	bx	lr
 8013e3a:	bf00      	nop
 8013e3c:	200005b0 	.word	0x200005b0

08013e40 <MIOS32_UART_BaudrateSet>:
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8013e40:	b530      	push	{r4, r5, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013e42:	2801      	cmp	r0, #1
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8013e44:	b085      	sub	sp, #20
 8013e46:	4604      	mov	r4, r0
 8013e48:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013e4a:	d81b      	bhi.n	8013e84 <MIOS32_UART_BaudrateSet+0x44>
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8013e4c:	f04f 010c 	mov.w	r1, #12

  USART_InitStructure.USART_BaudRate = baudrate;
 8013e50:	aa04      	add	r2, sp, #16
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8013e52:	f04f 0300 	mov.w	r3, #0
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
 8013e56:	bf14      	ite	ne
 8013e58:	480c      	ldrne	r0, [pc, #48]	; (8013e8c <MIOS32_UART_BaudrateSet+0x4c>)
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8013e5a:	480d      	ldreq	r0, [pc, #52]	; (8013e90 <MIOS32_UART_BaudrateSet+0x50>)
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8013e5c:	f8ad 100a 	strh.w	r1, [sp, #10]
  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8013e60:	4669      	mov	r1, sp
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8013e62:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8013e66:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8013e6a:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8013e6e:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;
 8013e72:	f842 5d10 	str.w	r5, [r2, #-16]!

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8013e76:	f001 f85f 	bl	8014f38 <USART_Init>
  default:
    return -2; // not prepared
  }

  // store baudrate in array
  uart_baudrate[uart] = baudrate;
 8013e7a:	4806      	ldr	r0, [pc, #24]	; (8013e94 <MIOS32_UART_BaudrateSet+0x54>)
 8013e7c:	f840 5024 	str.w	r5, [r0, r4, lsl #2]

  return 0;
 8013e80:	2000      	movs	r0, #0
 8013e82:	e001      	b.n	8013e88 <MIOS32_UART_BaudrateSet+0x48>
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;
 8013e84:	f04f 30ff 	mov.w	r0, #4294967295
  // store baudrate in array
  uart_baudrate[uart] = baudrate;

  return 0;
#endif
}
 8013e88:	b005      	add	sp, #20
 8013e8a:	bd30      	pop	{r4, r5, pc}
 8013e8c:	40004400 	.word	0x40004400
 8013e90:	40004800 	.word	0x40004800
 8013e94:	200005a8 	.word	0x200005a8

08013e98 <MIOS32_UART_InitPort>:
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8013e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e9a:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013e9c:	4668      	mov	r0, sp
//!   </UL>
//! \param[in] is_midi MIDI or common UART interface?
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPort(u8 uart, u32 baudrate, mios32_board_pin_mode_t tx_pin_mode, u8 is_midi)
{
 8013e9e:	461d      	mov	r5, r3
 8013ea0:	460e      	mov	r6, r1
 8013ea2:	4617      	mov	r7, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013ea4:	f000 fd5b 	bl	801495e <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8013ea8:	2300      	movs	r3, #0

  if( uart >= NUM_SUPPORTED_UARTS )
 8013eaa:	2c01      	cmp	r4, #1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8013eac:	f88d 3005 	strb.w	r3, [sp, #5]

  if( uart >= NUM_SUPPORTED_UARTS )
 8013eb0:	d847      	bhi.n	8013f42 <MIOS32_UART_InitPort+0xaa>
 8013eb2:	4825      	ldr	r0, [pc, #148]	; (8013f48 <MIOS32_UART_InitPort+0xb0>)
 8013eb4:	2201      	movs	r2, #1
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
 8013eb6:	fa02 f204 	lsl.w	r2, r2, r4
 8013eba:	7801      	ldrb	r1, [r0, #0]

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART

  // MIDI assignment
  if( is_midi ) {
 8013ebc:	b10d      	cbz	r5, 8013ec2 <MIOS32_UART_InitPort+0x2a>
    uart_assigned_to_midi |= (1 << uart);
 8013ebe:	430a      	orrs	r2, r1
 8013ec0:	e001      	b.n	8013ec6 <MIOS32_UART_InitPort+0x2e>
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8013ec2:	ea21 0202 	bic.w	r2, r1, r2
  }

  switch( uart ) {
 8013ec6:	2c01      	cmp	r4, #1

  // MIDI assignment
  if( is_midi ) {
    uart_assigned_to_midi |= (1 << uart);
  } else {
    uart_assigned_to_midi &= ~(1 << uart);
 8013ec8:	7002      	strb	r2, [r0, #0]
 8013eca:	f04f 0502 	mov.w	r5, #2
  }

  switch( uart ) {
 8013ece:	d019      	beq.n	8013f04 <MIOS32_UART_InitPort+0x6c>
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8013ed0:	2304      	movs	r3, #4
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8013ed2:	3f05      	subs	r7, #5
 8013ed4:	bf18      	it	ne
 8013ed6:	2701      	movne	r7, #1
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8013ed8:	481c      	ldr	r0, [pc, #112]	; (8013f4c <MIOS32_UART_InitPort+0xb4>)

  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8013eda:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8013edc:	4669      	mov	r1, sp
  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8013ede:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8013ee2:	f88d 7006 	strb.w	r7, [sp, #6]
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8013ee6:	f000 fced 	bl	80148c4 <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8013eea:	2001      	movs	r0, #1
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8013eec:	2108      	movs	r1, #8
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8013eee:	f88d 0007 	strb.w	r0, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 8013ef2:	9100      	str	r1, [sp, #0]
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8013ef4:	4815      	ldr	r0, [pc, #84]	; (8013f4c <MIOS32_UART_InitPort+0xb4>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8013ef6:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
    GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8013efa:	4669      	mov	r1, sp
 8013efc:	f000 fce2 	bl	80148c4 <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8013f00:	2000      	movs	r0, #0
 8013f02:	e019      	b.n	8013f38 <MIOS32_UART_InitPort+0xa0>
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8013f04:	3f05      	subs	r7, #5
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8013f06:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8013f0a:	bf18      	it	ne
 8013f0c:	2701      	movne	r7, #1
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8013f0e:	4810      	ldr	r0, [pc, #64]	; (8013f50 <MIOS32_UART_InitPort+0xb8>)
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8013f10:	9200      	str	r2, [sp, #0]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8013f12:	4669      	mov	r1, sp

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
    // output
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8013f14:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
 8013f18:	f88d 7006 	strb.w	r7, [sp, #6]
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8013f1c:	f000 fcd2 	bl	80148c4 <GPIO_Init>

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8013f20:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8013f24:	480a      	ldr	r0, [pc, #40]	; (8013f50 <MIOS32_UART_InitPort+0xb8>)
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8013f26:	f88d 5004 	strb.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8013f2a:	4669      	mov	r1, sp
    GPIO_InitStructure.GPIO_OType = (tx_pin_mode == MIOS32_BOARD_PIN_MODE_OUTPUT_PP) ? GPIO_OType_PP : GPIO_OType_OD;
    GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);

    // inputs with internal pull-up
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8013f2c:	f88d 4007 	strb.w	r4, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8013f30:	9300      	str	r3, [sp, #0]
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8013f32:	f000 fcc7 	bl	80148c4 <GPIO_Init>

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
 8013f36:	4620      	mov	r0, r4
 8013f38:	4631      	mov	r1, r6
 8013f3a:	f7ff ff81 	bl	8013e40 <MIOS32_UART_BaudrateSet>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 8013f3e:	2000      	movs	r0, #0
    GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
    GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);

    // UART configuration
    MIOS32_UART_BaudrateSet(uart, baudrate);
  } break;
 8013f40:	e001      	b.n	8013f46 <MIOS32_UART_InitPort+0xae>
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // unsupported UART
 8013f42:	f04f 30ff 	mov.w	r0, #4294967295
    return -1; // unsupported UART
  }

  return 0; // no error
#endif
}
 8013f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f48:	200005b0 	.word	0x200005b0
 8013f4c:	40020000 	.word	0x40020000
 8013f50:	40020c00 	.word	0x40020c00

08013f54 <MIOS32_UART_InitPortDefault>:
//! Initializes a given UART interface based on default settings
//! \param[in] uart UART number (0..2)
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_InitPortDefault(u8 uart)
{
 8013f54:	b510      	push	{r4, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  switch( uart ) {
 8013f56:	4604      	mov	r4, r0
 8013f58:	b130      	cbz	r0, 8013f68 <MIOS32_UART_InitPortDefault+0x14>
 8013f5a:	2801      	cmp	r0, #1
 8013f5c:	d10c      	bne.n	8013f78 <MIOS32_UART_InitPortDefault+0x24>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
 8013f5e:	f647 2112 	movw	r1, #31250	; 0x7a12
 8013f62:	2206      	movs	r2, #6
 8013f64:	4603      	mov	r3, r0
 8013f66:	e003      	b.n	8013f70 <MIOS32_UART_InitPortDefault+0x1c>
#else
  switch( uart ) {
#if NUM_SUPPORTED_UARTS >= 1 && MIOS32_UART0_ASSIGNMENT != 0
  case 0: {
# if MIOS32_UART0_TX_OD
    MIOS32_UART_InitPort(0, MIOS32_UART0_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART0_ASSIGNMENT == 1);
 8013f68:	f647 2112 	movw	r1, #31250	; 0x7a12
 8013f6c:	2206      	movs	r2, #6
 8013f6e:	2301      	movs	r3, #1
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  case 1: {
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
 8013f70:	f7ff ff92 	bl	8013e98 <MIOS32_UART_InitPort>

  default:
    return -1; // unsupported UART
  }

  return 0; // no error
 8013f74:	2000      	movs	r0, #0
# if MIOS32_UART1_TX_OD
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_OD, MIOS32_UART1_ASSIGNMENT == 1);
# else
    MIOS32_UART_InitPort(1, MIOS32_UART1_BAUDRATE, MIOS32_BOARD_PIN_MODE_OUTPUT_PP, MIOS32_UART1_ASSIGNMENT == 1);
# endif
  } break;
 8013f76:	bd10      	pop	{r4, pc}
# endif
  } break;
#endif

  default:
    return -1; // unsupported UART
 8013f78:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return 0; // no error
#endif
}
 8013f7c:	bd10      	pop	{r4, pc}
	...

08013f80 <MIOS32_UART_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
 8013f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8013f84:	4604      	mov	r4, r0
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d15c      	bne.n	8014044 <MIOS32_UART_Init+0xc4>
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 8013f8a:	2102      	movs	r1, #2
 8013f8c:	2207      	movs	r2, #7
 8013f8e:	482f      	ldr	r0, [pc, #188]	; (801404c <MIOS32_UART_Init+0xcc>)

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8013f90:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014068 <MIOS32_UART_Init+0xe8>
 8013f94:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801406c <MIOS32_UART_Init+0xec>
 8013f98:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8014070 <MIOS32_UART_Init+0xf0>
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8013f9c:	4f2c      	ldr	r7, [pc, #176]	; (8014050 <MIOS32_UART_Init+0xd0>)
 8013f9e:	4e2d      	ldr	r6, [pc, #180]	; (8014054 <MIOS32_UART_Init+0xd4>)
 8013fa0:	4d2d      	ldr	r5, [pc, #180]	; (8014058 <MIOS32_UART_Init+0xd8>)
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 8013fa2:	f000 fce9 	bl	8014978 <GPIO_PinAFConfig>
 8013fa6:	2103      	movs	r1, #3
 8013fa8:	2207      	movs	r2, #7
 8013faa:	4828      	ldr	r0, [pc, #160]	; (801404c <MIOS32_UART_Init+0xcc>)
 8013fac:	f000 fce4 	bl	8014978 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART1_REMAP_FUNC;
 8013fb0:	2108      	movs	r1, #8
 8013fb2:	2207      	movs	r2, #7
 8013fb4:	4829      	ldr	r0, [pc, #164]	; (801405c <MIOS32_UART_Init+0xdc>)
 8013fb6:	f000 fcdf 	bl	8014978 <GPIO_PinAFConfig>
 8013fba:	2207      	movs	r2, #7
 8013fbc:	2109      	movs	r1, #9
 8013fbe:	4827      	ldr	r0, [pc, #156]	; (801405c <MIOS32_UART_Init+0xdc>)
 8013fc0:	f000 fcda 	bl	8014978 <GPIO_PinAFConfig>
  MIOS32_UART3_REMAP_FUNC;
#endif

  // enable all USART clocks
  // TODO: more generic approach for different UART selections
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_USART6, ENABLE);
 8013fc4:	2030      	movs	r0, #48	; 0x30
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	f000 fda2 	bl	8014b10 <RCC_APB2PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);
 8013fcc:	2101      	movs	r1, #1
 8013fce:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8013fd2:	f000 fd91 	bl	8014af8 <RCC_APB1PeriphClockCmd>
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;

      MIOS32_UART_InitPortDefault(uart);
 8013fd6:	4620      	mov	r0, r4

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8013fd8:	f88a 4000 	strb.w	r4, [sl]
 8013fdc:	f889 4000 	strb.w	r4, [r9]
 8013fe0:	f888 4000 	strb.w	r4, [r8]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8013fe4:	703c      	strb	r4, [r7, #0]
 8013fe6:	7034      	strb	r4, [r6, #0]
 8013fe8:	702c      	strb	r4, [r5, #0]

      MIOS32_UART_InitPortDefault(uart);
 8013fea:	f7ff ffb3 	bl	8013f54 <MIOS32_UART_InitPortDefault>
 8013fee:	2001      	movs	r0, #1

  // initialize UARTs and clear buffers
  {
    u8 uart;
    for(uart=0; uart<NUM_SUPPORTED_UARTS; ++uart) {
      rx_buffer_tail[uart] = rx_buffer_head[uart] = rx_buffer_size[uart] = 0;
 8013ff0:	f88a 4001 	strb.w	r4, [sl, #1]
 8013ff4:	f889 4001 	strb.w	r4, [r9, #1]
 8013ff8:	f888 4001 	strb.w	r4, [r8, #1]
      tx_buffer_tail[uart] = tx_buffer_head[uart] = tx_buffer_size[uart] = 0;
 8013ffc:	707c      	strb	r4, [r7, #1]
 8013ffe:	7074      	strb	r4, [r6, #1]
 8014000:	706c      	strb	r4, [r5, #1]

      MIOS32_UART_InitPortDefault(uart);
 8014002:	f7ff ffa7 	bl	8013f54 <MIOS32_UART_InitPortDefault>
    }
  }

  // configure and enable UART interrupts
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART0_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8014006:	2104      	movs	r1, #4
 8014008:	2026      	movs	r0, #38	; 0x26
 801400a:	f7fe fcc1 	bl	8012990 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
 801400e:	2201      	movs	r2, #1
 8014010:	4813      	ldr	r0, [pc, #76]	; (8014060 <MIOS32_UART_Init+0xe0>)
 8014012:	f240 5125 	movw	r1, #1317	; 0x525
 8014016:	f000 fff7 	bl	8015008 <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 801401a:	2104      	movs	r1, #4
 801401c:	2027      	movs	r0, #39	; 0x27
 801401e:	f7fe fcb7 	bl	8012990 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 8014022:	2201      	movs	r2, #1
 8014024:	480f      	ldr	r0, [pc, #60]	; (8014064 <MIOS32_UART_Init+0xe4>)
 8014026:	f240 5125 	movw	r1, #1317	; 0x525
 801402a:	f000 ffed 	bl	8015008 <USART_ITConfig>
  USART_ITConfig(MIOS32_UART3, USART_IT_RXNE, ENABLE);
#endif

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 801402e:	2101      	movs	r1, #1
 8014030:	480b      	ldr	r0, [pc, #44]	; (8014060 <MIOS32_UART_Init+0xe0>)
 8014032:	f000 ffdd 	bl	8014ff0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART1, ENABLE);
 8014036:	480b      	ldr	r0, [pc, #44]	; (8014064 <MIOS32_UART_Init+0xe4>)
 8014038:	2101      	movs	r1, #1
 801403a:	f000 ffd9 	bl	8014ff0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
 801403e:	4620      	mov	r0, r4
 8014040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014044:	f04f 30ff 	mov.w	r0, #4294967295
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
#endif
}
 8014048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801404c:	40020000 	.word	0x40020000
 8014050:	200005a4 	.word	0x200005a4
 8014054:	200005b1 	.word	0x200005b1
 8014058:	2000049c 	.word	0x2000049c
 801405c:	40020c00 	.word	0x40020c00
 8014060:	40004400 	.word	0x40004400
 8014064:	40004800 	.word	0x40004800
 8014068:	2000049e 	.word	0x2000049e
 801406c:	200005a2 	.word	0x200005a2
 8014070:	200004a0 	.word	0x200004a0

08014074 <MIOS32_UART_RxBufferGet>:
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014074:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: number of received bytes
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
 8014076:	b538      	push	{r3, r4, r5, lr}
 8014078:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801407a:	d81b      	bhi.n	80140b4 <MIOS32_UART_RxBufferGet+0x40>
    return -1; // UART not available

  if( !rx_buffer_size[uart] )
 801407c:	4b10      	ldr	r3, [pc, #64]	; (80140c0 <MIOS32_UART_RxBufferGet+0x4c>)
 801407e:	5c18      	ldrb	r0, [r3, r0]
 8014080:	b1d8      	cbz	r0, 80140ba <MIOS32_UART_RxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014082:	f7fe fc5d 	bl	8012940 <MIOS32_IRQ_Disable>
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014086:	4b0f      	ldr	r3, [pc, #60]	; (80140c4 <MIOS32_UART_RxBufferGet+0x50>)
 8014088:	490f      	ldr	r1, [pc, #60]	; (80140c8 <MIOS32_UART_RxBufferGet+0x54>)
 801408a:	5d1a      	ldrb	r2, [r3, r4]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 801408c:	5d18      	ldrb	r0, [r3, r4]
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 801408e:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014092:	1c42      	adds	r2, r0, #1
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014094:	5d4d      	ldrb	r5, [r1, r5]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014096:	b2d1      	uxtb	r1, r2
 8014098:	293f      	cmp	r1, #63	; 0x3f
 801409a:	5519      	strb	r1, [r3, r4]
 801409c:	d901      	bls.n	80140a2 <MIOS32_UART_RxBufferGet+0x2e>
    rx_buffer_tail[uart] = 0;
 801409e:	2000      	movs	r0, #0
 80140a0:	5518      	strb	r0, [r3, r4]
  --rx_buffer_size[uart];
 80140a2:	4b07      	ldr	r3, [pc, #28]	; (80140c0 <MIOS32_UART_RxBufferGet+0x4c>)
 80140a4:	5d1a      	ldrb	r2, [r3, r4]
 80140a6:	1e51      	subs	r1, r2, #1
 80140a8:	b2c8      	uxtb	r0, r1
 80140aa:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 80140ac:	f7fe fc5c 	bl	8012968 <MIOS32_IRQ_Enable>

  return b; // return received byte
 80140b0:	4628      	mov	r0, r5
 80140b2:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80140b4:	f04f 30ff 	mov.w	r0, #4294967295
 80140b8:	bd38      	pop	{r3, r4, r5, pc}

  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer
 80140ba:	f06f 0001 	mvn.w	r0, #1
  --rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return received byte
#endif
}
 80140be:	bd38      	pop	{r3, r4, r5, pc}
 80140c0:	2000049e 	.word	0x2000049e
 80140c4:	200004a0 	.word	0x200004a0
 80140c8:	20000522 	.word	0x20000522

080140cc <MIOS32_UART_RxBufferPut>:
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80140cc:	2801      	cmp	r0, #1
//! \return -1 if UART not available
//! \return -2 if buffer full (retry)
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
 80140ce:	b538      	push	{r3, r4, r5, lr}
 80140d0:	4604      	mov	r4, r0
 80140d2:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80140d4:	d81c      	bhi.n	8014110 <MIOS32_UART_RxBufferPut+0x44>
    return -1; // UART not available

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80140d6:	4b11      	ldr	r3, [pc, #68]	; (801411c <MIOS32_UART_RxBufferPut+0x50>)
 80140d8:	5c18      	ldrb	r0, [r3, r0]
 80140da:	283f      	cmp	r0, #63	; 0x3f
 80140dc:	d81b      	bhi.n	8014116 <MIOS32_UART_RxBufferPut+0x4a>
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 80140de:	f7fe fc2f 	bl	8012940 <MIOS32_IRQ_Disable>
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80140e2:	4b0f      	ldr	r3, [pc, #60]	; (8014120 <MIOS32_UART_RxBufferPut+0x54>)
 80140e4:	490f      	ldr	r1, [pc, #60]	; (8014124 <MIOS32_UART_RxBufferPut+0x58>)
 80140e6:	5d1a      	ldrb	r2, [r3, r4]
 80140e8:	eb02 1084 	add.w	r0, r2, r4, lsl #6
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80140ec:	5d1a      	ldrb	r2, [r3, r4]
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80140ee:	540d      	strb	r5, [r1, r0]
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80140f0:	1c50      	adds	r0, r2, #1
 80140f2:	b2c1      	uxtb	r1, r0
 80140f4:	293f      	cmp	r1, #63	; 0x3f
 80140f6:	5519      	strb	r1, [r3, r4]
 80140f8:	d901      	bls.n	80140fe <MIOS32_UART_RxBufferPut+0x32>
    rx_buffer_head[uart] = 0;
 80140fa:	2200      	movs	r2, #0
 80140fc:	551a      	strb	r2, [r3, r4]
  ++rx_buffer_size[uart];
 80140fe:	4b07      	ldr	r3, [pc, #28]	; (801411c <MIOS32_UART_RxBufferPut+0x50>)
 8014100:	5d18      	ldrb	r0, [r3, r4]
 8014102:	1c41      	adds	r1, r0, #1
 8014104:	b2ca      	uxtb	r2, r1
 8014106:	551a      	strb	r2, [r3, r4]
  MIOS32_IRQ_Enable();
 8014108:	f7fe fc2e 	bl	8012968 <MIOS32_IRQ_Enable>

  return 0; // no error
 801410c:	2000      	movs	r0, #0
 801410e:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8014110:	f04f 30ff 	mov.w	r0, #4294967295
 8014114:	bd38      	pop	{r3, r4, r5, pc}

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
    return -2; // buffer full (retry)
 8014116:	f06f 0001 	mvn.w	r0, #1
  ++rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 801411a:	bd38      	pop	{r3, r4, r5, pc}
 801411c:	2000049e 	.word	0x2000049e
 8014120:	200005a2 	.word	0x200005a2
 8014124:	20000522 	.word	0x20000522

08014128 <MIOS32_UART_TxBufferGet>:
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014128:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: transmitted byte
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
 801412a:	b538      	push	{r3, r4, r5, lr}
 801412c:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801412e:	d81b      	bhi.n	8014168 <MIOS32_UART_TxBufferGet+0x40>
    return -1; // UART not available

  if( !tx_buffer_size[uart] )
 8014130:	4b10      	ldr	r3, [pc, #64]	; (8014174 <MIOS32_UART_TxBufferGet+0x4c>)
 8014132:	5c18      	ldrb	r0, [r3, r0]
 8014134:	b1d8      	cbz	r0, 801416e <MIOS32_UART_TxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014136:	f7fe fc03 	bl	8012940 <MIOS32_IRQ_Disable>
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 801413a:	4b0f      	ldr	r3, [pc, #60]	; (8014178 <MIOS32_UART_TxBufferGet+0x50>)
 801413c:	490f      	ldr	r1, [pc, #60]	; (801417c <MIOS32_UART_TxBufferGet+0x54>)
 801413e:	5d1a      	ldrb	r2, [r3, r4]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8014140:	5d18      	ldrb	r0, [r3, r4]
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8014142:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8014146:	1c42      	adds	r2, r0, #1
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8014148:	5d4d      	ldrb	r5, [r1, r5]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 801414a:	b2d1      	uxtb	r1, r2
 801414c:	293f      	cmp	r1, #63	; 0x3f
 801414e:	5519      	strb	r1, [r3, r4]
 8014150:	d901      	bls.n	8014156 <MIOS32_UART_TxBufferGet+0x2e>
    tx_buffer_tail[uart] = 0;
 8014152:	2000      	movs	r0, #0
 8014154:	5518      	strb	r0, [r3, r4]
  --tx_buffer_size[uart];
 8014156:	4b07      	ldr	r3, [pc, #28]	; (8014174 <MIOS32_UART_TxBufferGet+0x4c>)
 8014158:	5d1a      	ldrb	r2, [r3, r4]
 801415a:	1e51      	subs	r1, r2, #1
 801415c:	b2c8      	uxtb	r0, r1
 801415e:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8014160:	f7fe fc02 	bl	8012968 <MIOS32_IRQ_Enable>

  return b; // return transmitted byte
 8014164:	4628      	mov	r0, r5
 8014166:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8014168:	f04f 30ff 	mov.w	r0, #4294967295
 801416c:	bd38      	pop	{r3, r4, r5, pc}

  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer
 801416e:	f06f 0001 	mvn.w	r0, #1
  --tx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return transmitted byte
#endif
}
 8014172:	bd38      	pop	{r3, r4, r5, pc}
 8014174:	200005a4 	.word	0x200005a4
 8014178:	2000049c 	.word	0x2000049c
 801417c:	200004a2 	.word	0x200004a2

08014180 <MIOS32_UART_TxBufferPutMore_NonBlocking>:
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014180:	2801      	cmp	r0, #1
//! \return -2 if buffer full or cannot get all requested bytes (retry)
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
 8014182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014184:	4604      	mov	r4, r0
 8014186:	460d      	mov	r5, r1
 8014188:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801418a:	d830      	bhi.n	80141ee <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6e>
    return -1; // UART not available

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
 801418c:	4b1b      	ldr	r3, [pc, #108]	; (80141fc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 801418e:	5c18      	ldrb	r0, [r3, r0]
 8014190:	1881      	adds	r1, r0, r2
 8014192:	293f      	cmp	r1, #63	; 0x3f
 8014194:	dc2e      	bgt.n	80141f4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x74>
    return -2; // buffer full or cannot get all requested bytes (retry)

  // copy bytes to be transmitted into transmit buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014196:	f7fe fbd3 	bl	8012940 <MIOS32_IRQ_Disable>

  u16 i;
  for(i=0; i<len; ++i) {
 801419a:	4628      	mov	r0, r5
 801419c:	1b42      	subs	r2, r0, r5
 801419e:	b293      	uxth	r3, r2
 80141a0:	42b3      	cmp	r3, r6
 80141a2:	d220      	bcs.n	80141e6 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x66>
    tx_buffer[uart][tx_buffer_head[uart]] = *buffer++;
 80141a4:	4b16      	ldr	r3, [pc, #88]	; (8014200 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x80>)
 80141a6:	4917      	ldr	r1, [pc, #92]	; (8014204 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x84>)
 80141a8:	5d1f      	ldrb	r7, [r3, r4]
 80141aa:	eb07 1284 	add.w	r2, r7, r4, lsl #6
 80141ae:	f810 7b01 	ldrb.w	r7, [r0], #1
 80141b2:	548f      	strb	r7, [r1, r2]

    if( ++tx_buffer_head[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 80141b4:	5d1a      	ldrb	r2, [r3, r4]
 80141b6:	1c51      	adds	r1, r2, #1
 80141b8:	b2ca      	uxtb	r2, r1
 80141ba:	2a3f      	cmp	r2, #63	; 0x3f
 80141bc:	551a      	strb	r2, [r3, r4]
 80141be:	d901      	bls.n	80141c4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x44>
      tx_buffer_head[uart] = 0;
 80141c0:	2100      	movs	r1, #0
 80141c2:	5519      	strb	r1, [r3, r4]

    // enable Tx interrupt if buffer was empty
    if( ++tx_buffer_size[uart] == 1 ) {
 80141c4:	4a0d      	ldr	r2, [pc, #52]	; (80141fc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 80141c6:	5d13      	ldrb	r3, [r2, r4]
 80141c8:	1c59      	adds	r1, r3, #1
 80141ca:	b2cb      	uxtb	r3, r1
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	5513      	strb	r3, [r2, r4]
 80141d0:	d1e4      	bne.n	801419c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
      switch( uart ) {
 80141d2:	2c01      	cmp	r4, #1
        case 0: MIOS32_UART0->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80141d4:	bf14      	ite	ne
 80141d6:	4b0c      	ldrne	r3, [pc, #48]	; (8014208 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x88>)
        case 1: MIOS32_UART1->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80141d8:	4b0c      	ldreq	r3, [pc, #48]	; (801420c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 80141da:	899a      	ldrh	r2, [r3, #12]
 80141dc:	b291      	uxth	r1, r2
 80141de:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80141e2:	819a      	strh	r2, [r3, #12]
 80141e4:	e7da      	b.n	801419c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
        default: MIOS32_IRQ_Enable(); return -3; // uart not supported by routine (yet)
      }
    }
  }

  MIOS32_IRQ_Enable();
 80141e6:	f7fe fbbf 	bl	8012968 <MIOS32_IRQ_Enable>

  return 0; // no error
 80141ea:	2000      	movs	r0, #0
 80141ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80141ee:	f04f 30ff 	mov.w	r0, #4294967295
 80141f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
    return -2; // buffer full or cannot get all requested bytes (retry)
 80141f4:	f06f 0001 	mvn.w	r0, #1

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 80141f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141fa:	bf00      	nop
 80141fc:	200005a4 	.word	0x200005a4
 8014200:	200005b1 	.word	0x200005b1
 8014204:	200004a2 	.word	0x200004a2
 8014208:	40004400 	.word	0x40004400
 801420c:	40004800 	.word	0x40004800

08014210 <MIOS32_UART_TxBufferPutMore>:
//! \return -1 if UART not available
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore(u8 uart, u8 *buffer, u16 len)
{
 8014210:	b570      	push	{r4, r5, r6, lr}
 8014212:	4606      	mov	r6, r0
 8014214:	460d      	mov	r5, r1
 8014216:	4614      	mov	r4, r2
  s32 error;

  while( (error=MIOS32_UART_TxBufferPutMore_NonBlocking(uart, buffer, len)) == -2 );
 8014218:	4630      	mov	r0, r6
 801421a:	4629      	mov	r1, r5
 801421c:	4622      	mov	r2, r4
 801421e:	f7ff ffaf 	bl	8014180 <MIOS32_UART_TxBufferPutMore_NonBlocking>
 8014222:	1c83      	adds	r3, r0, #2
 8014224:	d0f8      	beq.n	8014218 <MIOS32_UART_TxBufferPutMore+0x8>

  return error;
}
 8014226:	bd70      	pop	{r4, r5, r6, pc}

08014228 <USART2_IRQHandler>:
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8014228:	4b19      	ldr	r3, [pc, #100]	; (8014290 <USART2_IRQHandler+0x68>)
 801422a:	881a      	ldrh	r2, [r3, #0]
 801422c:	f002 0020 	and.w	r0, r2, #32
 8014230:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
 8014232:	b510      	push	{r4, lr}
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8014234:	b181      	cbz	r1, 8014258 <USART2_IRQHandler+0x30>
    u8 b = MIOS32_UART0->DR;
 8014236:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 8014238:	2000      	movs	r0, #0
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;
 801423a:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 801423c:	f7ff fdf6 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 8014240:	b920      	cbnz	r0, 801424c <USART2_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 8014242:	2000      	movs	r0, #0
 8014244:	4621      	mov	r1, r4
 8014246:	f7ff ff41 	bl	80140cc <MIOS32_UART_RxBufferPut>
 801424a:	e005      	b.n	8014258 <USART2_IRQHandler+0x30>
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART0->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(0) ? MIOS32_MIDI_SendByteToRxCallback(UART0, b) : 0;
 801424c:	2020      	movs	r0, #32
 801424e:	4621      	mov	r1, r4
 8014250:	f7fd fc7a 	bl	8011b48 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 8014254:	2800      	cmp	r0, #0
 8014256:	d0f4      	beq.n	8014242 <USART2_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
 8014258:	4c0d      	ldr	r4, [pc, #52]	; (8014290 <USART2_IRQHandler+0x68>)
 801425a:	8823      	ldrh	r3, [r4, #0]
 801425c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8014260:	b290      	uxth	r0, r2
 8014262:	b198      	cbz	r0, 801428c <USART2_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 8014264:	490b      	ldr	r1, [pc, #44]	; (8014294 <USART2_IRQHandler+0x6c>)
 8014266:	780b      	ldrb	r3, [r1, #0]
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(0) > 0 ) {
 8014268:	b153      	cbz	r3, 8014280 <USART2_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(0);
 801426a:	2000      	movs	r0, #0
 801426c:	f7ff ff5c 	bl	8014128 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8014270:	2800      	cmp	r0, #0
 8014272:	da02      	bge.n	801427a <USART2_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART0->DR = 0xff;
 8014274:	20ff      	movs	r0, #255	; 0xff
 8014276:	80a0      	strh	r0, [r4, #4]
 8014278:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART0->DR = b;
 801427a:	b282      	uxth	r2, r0
 801427c:	80a2      	strh	r2, [r4, #4]
 801427e:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART0->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8014280:	89a2      	ldrh	r2, [r4, #12]
 8014282:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8014286:	0401      	lsls	r1, r0, #16
 8014288:	0c0b      	lsrs	r3, r1, #16
 801428a:	81a3      	strh	r3, [r4, #12]
 801428c:	bd10      	pop	{r4, pc}
 801428e:	bf00      	nop
 8014290:	40004400 	.word	0x40004400
 8014294:	200005a4 	.word	0x200005a4

08014298 <USART3_IRQHandler>:
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 8014298:	4b19      	ldr	r3, [pc, #100]	; (8014300 <USART3_IRQHandler+0x68>)
 801429a:	881a      	ldrh	r2, [r3, #0]
 801429c:	f002 0020 	and.w	r0, r2, #32
 80142a0:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
 80142a2:	b510      	push	{r4, lr}
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 80142a4:	b181      	cbz	r1, 80142c8 <USART3_IRQHandler+0x30>
    u8 b = MIOS32_UART1->DR;
 80142a6:	889c      	ldrh	r4, [r3, #4]

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80142a8:	2001      	movs	r0, #1
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;
 80142aa:	b2e4      	uxtb	r4, r4

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80142ac:	f7ff fdbe 	bl	8013e2c <MIOS32_UART_IsAssignedToMIDI>
 80142b0:	b920      	cbnz	r0, 80142bc <USART3_IRQHandler+0x24>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80142b2:	2001      	movs	r0, #1
 80142b4:	4621      	mov	r1, r4
 80142b6:	f7ff ff09 	bl	80140cc <MIOS32_UART_RxBufferPut>
 80142ba:	e005      	b.n	80142c8 <USART3_IRQHandler+0x30>
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
    u8 b = MIOS32_UART1->DR;

    s32 status = MIOS32_UART_IsAssignedToMIDI(1) ? MIOS32_MIDI_SendByteToRxCallback(UART1, b) : 0;
 80142bc:	2021      	movs	r0, #33	; 0x21
 80142be:	4621      	mov	r1, r4
 80142c0:	f7fd fc42 	bl	8011b48 <MIOS32_MIDI_SendByteToRxCallback>

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d0f4      	beq.n	80142b2 <USART3_IRQHandler+0x1a>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
 80142c8:	4c0d      	ldr	r4, [pc, #52]	; (8014300 <USART3_IRQHandler+0x68>)
 80142ca:	8823      	ldrh	r3, [r4, #0]
 80142cc:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80142d0:	b290      	uxth	r0, r2
 80142d2:	b198      	cbz	r0, 80142fc <USART3_IRQHandler+0x64>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 80142d4:	490b      	ldr	r1, [pc, #44]	; (8014304 <USART3_IRQHandler+0x6c>)
 80142d6:	784b      	ldrb	r3, [r1, #1]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(1) > 0 ) {
 80142d8:	b153      	cbz	r3, 80142f0 <USART3_IRQHandler+0x58>
      s32 b = MIOS32_UART_TxBufferGet(1);
 80142da:	2001      	movs	r0, #1
 80142dc:	f7ff ff24 	bl	8014128 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 80142e0:	2800      	cmp	r0, #0
 80142e2:	da02      	bge.n	80142ea <USART3_IRQHandler+0x52>
	// here we could add some error handling
	MIOS32_UART1->DR = 0xff;
 80142e4:	20ff      	movs	r0, #255	; 0xff
 80142e6:	80a0      	strh	r0, [r4, #4]
 80142e8:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART1->DR = b;
 80142ea:	b282      	uxth	r2, r0
 80142ec:	80a2      	strh	r2, [r4, #4]
 80142ee:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART1->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80142f0:	89a2      	ldrh	r2, [r4, #12]
 80142f2:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80142f6:	0401      	lsls	r1, r0, #16
 80142f8:	0c0b      	lsrs	r3, r1, #16
 80142fa:	81a3      	strh	r3, [r4, #12]
 80142fc:	bd10      	pop	{r4, pc}
 80142fe:	bf00      	nop
 8014300:	40004800 	.word	0x40004800
 8014304:	200005a4 	.word	0x200005a4

08014308 <EV_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8014308:	6803      	ldr	r3, [r0, #0]
 801430a:	8a9a      	ldrh	r2, [r3, #20]

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags
 801430c:	8b19      	ldrh	r1, [r3, #24]
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 801430e:	b292      	uxth	r2, r2

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8014310:	07d1      	lsls	r1, r2, #31

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
 8014312:	b510      	push	{r4, lr}
  u32 SR1Register = iicx->base->SR1;

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8014314:	d50d      	bpl.n	8014332 <EV_IRQHandler+0x2a>
    // don't send address if stop was requested (WRITE_WITHOUT_STOP - mode, start condition was sent)
    // we have to wait for the application to start the next transfer
    if( iicx->transfer_state.STOP_REQUESTED ) {
 8014316:	6941      	ldr	r1, [r0, #20]
 8014318:	078a      	lsls	r2, r1, #30
 801431a:	d507      	bpl.n	801432c <EV_IRQHandler+0x24>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 801431c:	7d02      	ldrb	r2, [r0, #20]
 801431e:	f022 0101 	bic.w	r1, r2, #1
 8014322:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014324:	8898      	ldrh	r0, [r3, #4]
 8014326:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 801432a:	e027      	b.n	801437c <EV_IRQHandler+0x74>
      return;
    }

    /* Send the slave address for transmssion or for reception (according to the configured value
       in the write master write routine */
    iicx->base->DR = iicx->iic_address;
 801432c:	7900      	ldrb	r0, [r0, #4]
 801432e:	8218      	strh	r0, [r3, #16]
    return;
 8014330:	bd10      	pop	{r4, pc}
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
 8014332:	f002 0102 	and.w	r1, r2, #2
 8014336:	b289      	uxth	r1, r1
 8014338:	2900      	cmp	r1, #0
 801433a:	d031      	beq.n	80143a0 <EV_IRQHandler+0x98>
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 801433c:	7901      	ldrb	r1, [r0, #4]
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 801433e:	8a02      	ldrh	r2, [r0, #16]
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8014340:	f011 0f01 	tst.w	r1, #1
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8014344:	b291      	uxth	r1, r2
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8014346:	d11d      	bne.n	8014384 <EV_IRQHandler+0x7c>
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8014348:	2900      	cmp	r1, #0
 801434a:	d036      	beq.n	80143ba <EV_IRQHandler+0xb2>
	iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

	// transfer finished
	iicx->transfer_state.BUSY = 0;	
      } else {
	if( iicx->buffer_ix < iicx->buffer_len ) {
 801434c:	8a42      	ldrh	r2, [r0, #18]
 801434e:	b291      	uxth	r1, r2
 8014350:	8a02      	ldrh	r2, [r0, #16]
 8014352:	b292      	uxth	r2, r2
 8014354:	4291      	cmp	r1, r2
 8014356:	d208      	bcs.n	801436a <EV_IRQHandler+0x62>
	  /* Write the first data in the data register */
	  iicx->base->DR = (iicx->tx_buffer_ptr == NULL) ? 0 : iicx->tx_buffer_ptr[iicx->buffer_ix++];
 8014358:	6882      	ldr	r2, [r0, #8]
 801435a:	b12a      	cbz	r2, 8014368 <EV_IRQHandler+0x60>
 801435c:	8a41      	ldrh	r1, [r0, #18]
 801435e:	b289      	uxth	r1, r1
 8014360:	5c52      	ldrb	r2, [r2, r1]
 8014362:	3101      	adds	r1, #1
 8014364:	b289      	uxth	r1, r1
 8014366:	8241      	strh	r1, [r0, #18]
 8014368:	821a      	strh	r2, [r3, #16]
	}

	/* If no further data to be sent, disable the I2C BUF IT
	   in order to not have a TxE interrupt */
	if( iicx->buffer_ix >= iicx->buffer_len ) {
 801436a:	8a42      	ldrh	r2, [r0, #18]
 801436c:	8a00      	ldrh	r0, [r0, #16]
 801436e:	b291      	uxth	r1, r2
 8014370:	b282      	uxth	r2, r0
 8014372:	4291      	cmp	r1, r2
 8014374:	d378      	bcc.n	8014468 <EV_IRQHandler+0x160>
	  iicx->base->CR2 &= (u16)~I2C_IT_BUF;
 8014376:	8899      	ldrh	r1, [r3, #4]
 8014378:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 801437c:	0402      	lsls	r2, r0, #16
 801437e:	0c11      	lsrs	r1, r2, #16
 8014380:	8099      	strh	r1, [r3, #4]
 8014382:	bd10      	pop	{r4, pc}
      /* Master Receiver */

      /* At this stage, ADDR is cleared because both SR1 and SR2 were read.*/
      /* EV6_1: used for single byte reception. The ACK disable and the STOP
	 Programming should be done just after ADDR is cleared. */
      if( iicx->buffer_len == 1 ) {
 8014384:	2901      	cmp	r1, #1
 8014386:	d16f      	bne.n	8014468 <EV_IRQHandler+0x160>
	/* Clear ACK */
	iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8014388:	881a      	ldrh	r2, [r3, #0]
 801438a:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 801438e:	040a      	lsls	r2, r1, #16
 8014390:	0c11      	lsrs	r1, r2, #16
 8014392:	8019      	strh	r1, [r3, #0]
	/* Program the STOP */
	iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 8014394:	881a      	ldrh	r2, [r3, #0]
 8014396:	b291      	uxth	r1, r2
 8014398:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 801439c:	801a      	strh	r2, [r3, #0]
 801439e:	e05f      	b.n	8014460 <EV_IRQHandler+0x158>
    return;
  }

  /* Master transmits the remaing data: from data2 until the last one.  */
  /* If TXE is set */
  if( (SR1Register &0x0084) == 0x0080 ) {
 80143a0:	f002 0184 	and.w	r1, r2, #132	; 0x84
 80143a4:	2980      	cmp	r1, #128	; 0x80
 80143a6:	d106      	bne.n	80143b6 <EV_IRQHandler+0xae>
    /* If there is still data to write */
    if( iicx->buffer_ix < iicx->buffer_len ) {
 80143a8:	8a42      	ldrh	r2, [r0, #18]
 80143aa:	b291      	uxth	r1, r2
 80143ac:	8a02      	ldrh	r2, [r0, #16]
 80143ae:	b292      	uxth	r2, r2
 80143b0:	4291      	cmp	r1, r2
 80143b2:	d3d1      	bcc.n	8014358 <EV_IRQHandler+0x50>
 80143b4:	e058      	b.n	8014468 <EV_IRQHandler+0x160>

    return;
  }

  /* If BTF and TXE are set (EV8_2), program the STOP */
  if( (SR1Register & 0x0084) == 0x0084 ) {
 80143b6:	2984      	cmp	r1, #132	; 0x84
 80143b8:	d112      	bne.n	80143e0 <EV_IRQHandler+0xd8>
    /* Program the STOP */
    iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80143ba:	881a      	ldrh	r2, [r3, #0]
 80143bc:	b291      	uxth	r1, r2
 80143be:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80143c2:	801a      	strh	r2, [r3, #0]
    iicx->transfer_state.STOP_REQUESTED = 1;
 80143c4:	7d01      	ldrb	r1, [r0, #20]
 80143c6:	f041 0202 	orr.w	r2, r1, #2
 80143ca:	7502      	strb	r2, [r0, #20]

    // disable all interrupts
    iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80143cc:	8899      	ldrh	r1, [r3, #4]
 80143ce:	f421 62e0 	bic.w	r2, r1, #1792	; 0x700
 80143d2:	0411      	lsls	r1, r2, #16
 80143d4:	0c0a      	lsrs	r2, r1, #16
 80143d6:	809a      	strh	r2, [r3, #4]

    // transfer finished
    iicx->transfer_state.BUSY = 0;
 80143d8:	7d03      	ldrb	r3, [r0, #20]
 80143da:	f023 0101 	bic.w	r1, r3, #1
 80143de:	e042      	b.n	8014466 <EV_IRQHandler+0x15e>

    return;
  }

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
 80143e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80143e4:	b291      	uxth	r1, r2
 80143e6:	2900      	cmp	r1, #0
 80143e8:	d03e      	beq.n	8014468 <EV_IRQHandler+0x160>
 80143ea:	68c1      	ldr	r1, [r0, #12]
 80143ec:	2900      	cmp	r1, #0
 80143ee:	d03b      	beq.n	8014468 <EV_IRQHandler+0x160>
    /* Read the data register */

    u8 b = iicx->base->DR;
 80143f0:	8a1c      	ldrh	r4, [r3, #16]

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80143f2:	8a42      	ldrh	r2, [r0, #18]

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
    /* Read the data register */

    u8 b = iicx->base->DR;
 80143f4:	b2e3      	uxtb	r3, r4

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80143f6:	b294      	uxth	r4, r2
 80143f8:	8a02      	ldrh	r2, [r0, #16]
 80143fa:	b292      	uxth	r2, r2
 80143fc:	4294      	cmp	r4, r2
 80143fe:	d205      	bcs.n	801440c <EV_IRQHandler+0x104>
      iicx->rx_buffer_ptr[iicx->buffer_ix++] = b;
 8014400:	8a42      	ldrh	r2, [r0, #18]
 8014402:	b292      	uxth	r2, r2
 8014404:	548b      	strb	r3, [r1, r2]
 8014406:	1c51      	adds	r1, r2, #1
 8014408:	b28a      	uxth	r2, r1
 801440a:	8242      	strh	r2, [r0, #18]

    // last byte received, disable interrupts and return.
    if( iicx->transfer_state.STOP_REQUESTED ) {
 801440c:	6941      	ldr	r1, [r0, #20]
 801440e:	0789      	lsls	r1, r1, #30
 8014410:	d50b      	bpl.n	801442a <EV_IRQHandler+0x122>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 8014412:	7d02      	ldrb	r2, [r0, #20]
 8014414:	f022 0101 	bic.w	r1, r2, #1
 8014418:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801441a:	6800      	ldr	r0, [r0, #0]
 801441c:	8883      	ldrh	r3, [r0, #4]
 801441e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014422:	0411      	lsls	r1, r2, #16
 8014424:	0c0b      	lsrs	r3, r1, #16
 8014426:	8083      	strh	r3, [r0, #4]
      return;
 8014428:	bd10      	pop	{r4, pc}
    }
 
    // request NAK and stop condition before receiving last data
    if( (iicx->buffer_ix >= iicx->buffer_len-1) || (iicx->transfer_state.ABORT_IF_FIRST_BYTE_0 && iicx->buffer_ix == 1 && b == 0x00) ) {
 801442a:	8a42      	ldrh	r2, [r0, #18]
 801442c:	b291      	uxth	r1, r2
 801442e:	8a02      	ldrh	r2, [r0, #16]
 8014430:	b292      	uxth	r2, r2
 8014432:	3a01      	subs	r2, #1
 8014434:	4291      	cmp	r1, r2
 8014436:	da07      	bge.n	8014448 <EV_IRQHandler+0x140>
 8014438:	6941      	ldr	r1, [r0, #20]
 801443a:	074a      	lsls	r2, r1, #29
 801443c:	d514      	bpl.n	8014468 <EV_IRQHandler+0x160>
 801443e:	8a42      	ldrh	r2, [r0, #18]
 8014440:	b291      	uxth	r1, r2
 8014442:	2901      	cmp	r1, #1
 8014444:	d110      	bne.n	8014468 <EV_IRQHandler+0x160>
 8014446:	b97b      	cbnz	r3, 8014468 <EV_IRQHandler+0x160>
      /* Clear ACK */
      iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8014448:	6802      	ldr	r2, [r0, #0]
 801444a:	8813      	ldrh	r3, [r2, #0]
 801444c:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8014450:	040b      	lsls	r3, r1, #16
 8014452:	0c19      	lsrs	r1, r3, #16
 8014454:	8011      	strh	r1, [r2, #0]
      /* Program the STOP */
      iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 8014456:	8813      	ldrh	r3, [r2, #0]
 8014458:	b299      	uxth	r1, r3
 801445a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 801445e:	8013      	strh	r3, [r2, #0]
      iicx->transfer_state.STOP_REQUESTED = 1;
 8014460:	7d03      	ldrb	r3, [r0, #20]
 8014462:	f043 0102 	orr.w	r1, r3, #2
 8014466:	7501      	strb	r1, [r0, #20]
 8014468:	bd10      	pop	{r4, pc}
	...

0801446c <ER_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	4604      	mov	r4, r0
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 8014470:	6800      	ldr	r0, [r0, #0]
 8014472:	f000 faad 	bl	80149d0 <I2C_GetLastEvent>
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 8014476:	4b17      	ldr	r3, [pc, #92]	; (80144d4 <ER_IRQHandler+0x68>)
 8014478:	4003      	ands	r3, r0
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 801447a:	4605      	mov	r5, r0
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 801447c:	b13b      	cbz	r3, 801448e <ER_IRQHandler+0x22>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_BERR);
 801447e:	6820      	ldr	r0, [r4, #0]
 8014480:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 8014484:	f000 faac 	bl	80149e0 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_BUS;
 8014488:	f06f 0005 	mvn.w	r0, #5
 801448c:	61a0      	str	r0, [r4, #24]
  }

  // arbitration lost
  if( event & I2C_FLAG_ARLO ) {
 801448e:	4912      	ldr	r1, [pc, #72]	; (80144d8 <ER_IRQHandler+0x6c>)
 8014490:	4029      	ands	r1, r5
 8014492:	b131      	cbz	r1, 80144a2 <ER_IRQHandler+0x36>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_ARLO);
 8014494:	6820      	ldr	r0, [r4, #0]
 8014496:	4911      	ldr	r1, [pc, #68]	; (80144dc <ER_IRQHandler+0x70>)
 8014498:	f000 faa2 	bl	80149e0 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_ARBITRATION_LOST;
 801449c:	f06f 0204 	mvn.w	r2, #4
 80144a0:	61a2      	str	r2, [r4, #24]
  }

  // no acknowledge received from slave (e.g. slave not connected)
  if( event & I2C_FLAG_AF ) {
 80144a2:	4b0f      	ldr	r3, [pc, #60]	; (80144e0 <ER_IRQHandler+0x74>)
 80144a4:	402b      	ands	r3, r5
 80144a6:	b153      	cbz	r3, 80144be <ER_IRQHandler+0x52>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_AF);
 80144a8:	6820      	ldr	r0, [r4, #0]
 80144aa:	490e      	ldr	r1, [pc, #56]	; (80144e4 <ER_IRQHandler+0x78>)
 80144ac:	f000 fa98 	bl	80149e0 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_SLAVE_NOT_CONNECTED;
 80144b0:	f06f 0006 	mvn.w	r0, #6
 80144b4:	61a0      	str	r0, [r4, #24]
    // send stop condition to release bus
    I2C_GenerateSTOP(iicx->base, ENABLE);
 80144b6:	2101      	movs	r1, #1
 80144b8:	6820      	ldr	r0, [r4, #0]
 80144ba:	f000 fa74 	bl	80149a6 <I2C_GenerateSTOP>
  }

  // disable interrupts
  I2C_ITConfig(iicx->base, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR, DISABLE);
 80144be:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80144c2:	2200      	movs	r2, #0
 80144c4:	6820      	ldr	r0, [r4, #0]
 80144c6:	f000 fa7a 	bl	80149be <I2C_ITConfig>

  // notify that transfer has finished (due to the error)
  iicx->transfer_state.BUSY = 0;
 80144ca:	7d21      	ldrb	r1, [r4, #20]
 80144cc:	f021 0201 	bic.w	r2, r1, #1
 80144d0:	7522      	strb	r2, [r4, #20]
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	10000100 	.word	0x10000100
 80144d8:	10000200 	.word	0x10000200
 80144dc:	01000200 	.word	0x01000200
 80144e0:	10000400 	.word	0x10000400
 80144e4:	01000400 	.word	0x01000400

080144e8 <I2C2_EV_IRQHandler>:
// interrupt vectors
/////////////////////////////////////////////////////////////////////////////
#if defined(MIOS32_IIC0_ENABLED) && MIOS32_IIC0_ENABLED > 0
void I2C2_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80144e8:	4801      	ldr	r0, [pc, #4]	; (80144f0 <I2C2_EV_IRQHandler+0x8>)
 80144ea:	f7ff bf0d 	b.w	8014308 <EV_IRQHandler>
 80144ee:	bf00      	nop
 80144f0:	200005b4 	.word	0x200005b4

080144f4 <I2C2_ER_IRQHandler>:
}

void I2C2_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80144f4:	4801      	ldr	r0, [pc, #4]	; (80144fc <I2C2_ER_IRQHandler+0x8>)
 80144f6:	f7ff bfb9 	b.w	801446c <ER_IRQHandler>
 80144fa:	bf00      	nop
 80144fc:	200005b4 	.word	0x200005b4

08014500 <I2C1_EV_IRQHandler>:
#endif

#if defined(MIOS32_IIC1_ENABLED) && MIOS32_IIC1_ENABLED > 0
void I2C1_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[1]);
 8014500:	4801      	ldr	r0, [pc, #4]	; (8014508 <I2C1_EV_IRQHandler+0x8>)
 8014502:	f7ff bf01 	b.w	8014308 <EV_IRQHandler>
 8014506:	bf00      	nop
 8014508:	200005d8 	.word	0x200005d8

0801450c <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[1]);
 801450c:	4801      	ldr	r0, [pc, #4]	; (8014514 <I2C1_ER_IRQHandler+0x8>)
 801450e:	f7ff bfad 	b.w	801446c <ER_IRQHandler>
 8014512:	bf00      	nop
 8014514:	200005d8 	.word	0x200005d8

08014518 <printchar>:

static void printchar(char **str, int c)
{
  //	extern int putchar(int c);
	
	if (str) {
 8014518:	b128      	cbz	r0, 8014526 <printchar+0xe>
		**str = c;
 801451a:	6803      	ldr	r3, [r0, #0]
 801451c:	7019      	strb	r1, [r3, #0]
		++(*str);
 801451e:	6801      	ldr	r1, [r0, #0]
 8014520:	1c4a      	adds	r2, r1, #1
 8014522:	6002      	str	r2, [r0, #0]
 8014524:	4770      	bx	lr
	}
#ifndef MIOS32_DONT_USE_COM
	else MIOS32_COM_SendChar(1, c); // (void)putchar(c);
 8014526:	2001      	movs	r0, #1
 8014528:	b2c9      	uxtb	r1, r1
 801452a:	f7fd be6d 	b.w	8012208 <MIOS32_COM_SendChar>

0801452e <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 801452e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8014532:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8014534:	4680      	mov	r8, r0
 8014536:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8014538:	dc01      	bgt.n	801453e <prints+0x10>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 801453a:	2720      	movs	r7, #32
 801453c:	e00f      	b.n	801455e <prints+0x30>

	if (width > 0) {
 801453e:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8014540:	f819 1002 	ldrb.w	r1, [r9, r2]
 8014544:	b109      	cbz	r1, 801454a <prints+0x1c>
 8014546:	3201      	adds	r2, #1
 8014548:	e7fa      	b.n	8014540 <prints+0x12>
		if (len >= width) width = 0;
 801454a:	42a2      	cmp	r2, r4
		else width -= len;
 801454c:	bfb4      	ite	lt
 801454e:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 8014552:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8014554:	f013 0f02 	tst.w	r3, #2
 8014558:	bf0c      	ite	eq
 801455a:	2720      	moveq	r7, #32
 801455c:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 801455e:	07db      	lsls	r3, r3, #31
 8014560:	d40c      	bmi.n	801457c <prints+0x4e>
 8014562:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 8014564:	2d00      	cmp	r5, #0
 8014566:	dd05      	ble.n	8014574 <prints+0x46>
			printchar (out, padchar);
 8014568:	4640      	mov	r0, r8
 801456a:	4639      	mov	r1, r7
 801456c:	f7ff ffd4 	bl	8014518 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8014570:	3d01      	subs	r5, #1
 8014572:	e7f7      	b.n	8014564 <prints+0x36>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8014574:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8014578:	1ba4      	subs	r4, r4, r6
 801457a:	e000      	b.n	801457e <prints+0x50>
{
	register int pc = 0, padchar = ' ';
 801457c:	2600      	movs	r6, #0
 801457e:	4635      	mov	r5, r6
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8014580:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8014584:	5d59      	ldrb	r1, [r3, r5]
 8014586:	b121      	cbz	r1, 8014592 <prints+0x64>
		printchar (out, *string);
 8014588:	4640      	mov	r0, r8
 801458a:	f7ff ffc5 	bl	8014518 <printchar>
		++pc;
 801458e:	3501      	adds	r5, #1
 8014590:	e7f6      	b.n	8014580 <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8014592:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8014594:	2e00      	cmp	r6, #0
 8014596:	dd05      	ble.n	80145a4 <prints+0x76>
		printchar (out, padchar);
 8014598:	4640      	mov	r0, r8
 801459a:	4639      	mov	r1, r7
 801459c:	f7ff ffbc 	bl	8014518 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80145a0:	3e01      	subs	r6, #1
 80145a2:	e7f7      	b.n	8014594 <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 80145a4:	2c00      	cmp	r4, #0
 80145a6:	bfac      	ite	ge
 80145a8:	1928      	addge	r0, r5, r4
 80145aa:	1c28      	addlt	r0, r5, #0
 80145ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080145b0 <printi>:
/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12
#endif

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80145b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80145b6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80145ba:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80145bc:	460c      	mov	r4, r1

	if (i == 0) {
 80145be:	b951      	cbnz	r1, 80145d6 <printi+0x26>
		print_buf[0] = '0';
 80145c0:	2230      	movs	r2, #48	; 0x30
 80145c2:	f88d 2004 	strb.w	r2, [sp, #4]
		print_buf[1] = '\0';
 80145c6:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 80145ca:	4632      	mov	r2, r6
 80145cc:	a901      	add	r1, sp, #4
 80145ce:	4643      	mov	r3, r8
 80145d0:	f7ff ffad 	bl	801452e <prints>
 80145d4:	e035      	b.n	8014642 <printi+0x92>
	}

	if (sg && b == 10 && i < 0) {
 80145d6:	b133      	cbz	r3, 80145e6 <printi+0x36>
 80145d8:	2a0a      	cmp	r2, #10
 80145da:	d104      	bne.n	80145e6 <printi+0x36>
 80145dc:	2900      	cmp	r1, #0
 80145de:	da02      	bge.n	80145e6 <printi+0x36>
		neg = 1;
		u = -i;
 80145e0:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 80145e2:	2701      	movs	r7, #1
 80145e4:	e000      	b.n	80145e8 <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80145e6:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80145e8:	ad04      	add	r5, sp, #16
 80145ea:	2300      	movs	r3, #0
 80145ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80145f0:	46aa      	mov	sl, r5

	while (u) {
 80145f2:	b16c      	cbz	r4, 8014610 <printi+0x60>
		t = u % b;
 80145f4:	fbb4 f3f2 	udiv	r3, r4, r2
 80145f8:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 80145fc:	2c09      	cmp	r4, #9
 80145fe:	dd02      	ble.n	8014606 <printi+0x56>
			t += letbase - '0' - 10;
 8014600:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014602:	393a      	subs	r1, #58	; 0x3a
 8014604:	1864      	adds	r4, r4, r1
		*--s = t + '0';
 8014606:	3430      	adds	r4, #48	; 0x30
 8014608:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 801460c:	461c      	mov	r4, r3
 801460e:	e7ef      	b.n	80145f0 <printi+0x40>
	}

	if (neg) {
 8014610:	b187      	cbz	r7, 8014634 <printi+0x84>
		if( width && (pad & PAD_ZERO) ) {
 8014612:	b14e      	cbz	r6, 8014628 <printi+0x78>
 8014614:	f018 0f02 	tst.w	r8, #2
 8014618:	d006      	beq.n	8014628 <printi+0x78>
			printchar (out, '-');
 801461a:	4648      	mov	r0, r9
 801461c:	212d      	movs	r1, #45	; 0x2d
 801461e:	f7ff ff7b 	bl	8014518 <printchar>
			++pc;
			--width;
 8014622:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 8014624:	2701      	movs	r7, #1
			--width;
 8014626:	e005      	b.n	8014634 <printi+0x84>
		}
		else {
			*--s = '-';
 8014628:	202d      	movs	r0, #45	; 0x2d
 801462a:	f105 3aff 	add.w	sl, r5, #4294967295
 801462e:	f805 0c01 	strb.w	r0, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8014632:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8014634:	4648      	mov	r0, r9
 8014636:	4651      	mov	r1, sl
 8014638:	4632      	mov	r2, r6
 801463a:	4643      	mov	r3, r8
 801463c:	f7ff ff77 	bl	801452e <prints>
 8014640:	1838      	adds	r0, r7, r0
}
 8014642:	b004      	add	sp, #16
 8014644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014648 <print>:

static int print( char **out, const char *format, va_list args )
{
 8014648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801464a:	b089      	sub	sp, #36	; 0x24
 801464c:	4606      	mov	r6, r0
 801464e:	460d      	mov	r5, r1
 8014650:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 8014652:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8014654:	782b      	ldrb	r3, [r5, #0]
 8014656:	b123      	cbz	r3, 8014662 <print+0x1a>
		if (*format == '%') {
 8014658:	2b25      	cmp	r3, #37	; 0x25
 801465a:	d179      	bne.n	8014750 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 801465c:	7868      	ldrb	r0, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 801465e:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8014660:	b928      	cbnz	r0, 801466e <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8014662:	2e00      	cmp	r6, #0
 8014664:	d07b      	beq.n	801475e <print+0x116>
 8014666:	6830      	ldr	r0, [r6, #0]
 8014668:	2200      	movs	r2, #0
 801466a:	7002      	strb	r2, [r0, #0]
 801466c:	e077      	b.n	801475e <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 801466e:	2825      	cmp	r0, #37	; 0x25
 8014670:	d06d      	beq.n	801474e <print+0x106>
			if (*format == '-') {
 8014672:	282d      	cmp	r0, #45	; 0x2d
 8014674:	d102      	bne.n	801467c <print+0x34>
				++format;
 8014676:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 8014678:	2301      	movs	r3, #1
 801467a:	e000      	b.n	801467e <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 801467c:	2300      	movs	r3, #0
 801467e:	4617      	mov	r7, r2
 8014680:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8014682:	7839      	ldrb	r1, [r7, #0]
 8014684:	2930      	cmp	r1, #48	; 0x30
 8014686:	d102      	bne.n	801468e <print+0x46>
				++format;
				pad |= PAD_ZERO;
 8014688:	f043 0302 	orr.w	r3, r3, #2
 801468c:	e7f7      	b.n	801467e <print+0x36>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 801468e:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8014690:	7839      	ldrb	r1, [r7, #0]
 8014692:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8014696:	fa5f fc80 	uxtb.w	ip, r0
 801469a:	463d      	mov	r5, r7
 801469c:	3701      	adds	r7, #1
 801469e:	f1bc 0f09 	cmp.w	ip, #9
 80146a2:	d803      	bhi.n	80146ac <print+0x64>
				width *= 10;
				width += *format - '0';
 80146a4:	250a      	movs	r5, #10
 80146a6:	fb05 0202 	mla	r2, r5, r2, r0
 80146aa:	e7f1      	b.n	8014690 <print+0x48>
			}
			if( *format == 's' ) {
 80146ac:	2973      	cmp	r1, #115	; 0x73
 80146ae:	d109      	bne.n	80146c4 <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 80146b0:	9f05      	ldr	r7, [sp, #20]
 80146b2:	1d39      	adds	r1, r7, #4
 80146b4:	9105      	str	r1, [sp, #20]
 80146b6:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 80146b8:	4f2a      	ldr	r7, [pc, #168]	; (8014764 <print+0x11c>)
 80146ba:	4630      	mov	r0, r6
 80146bc:	2900      	cmp	r1, #0
 80146be:	bf08      	it	eq
 80146c0:	4639      	moveq	r1, r7
 80146c2:	e041      	b.n	8014748 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 80146c4:	2964      	cmp	r1, #100	; 0x64
 80146c6:	d10e      	bne.n	80146e6 <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80146c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80146cc:	9905      	ldr	r1, [sp, #20]
 80146ce:	2361      	movs	r3, #97	; 0x61
 80146d0:	9302      	str	r3, [sp, #8]
 80146d2:	1d08      	adds	r0, r1, #4
 80146d4:	6809      	ldr	r1, [r1, #0]
 80146d6:	9005      	str	r0, [sp, #20]
 80146d8:	220a      	movs	r2, #10
 80146da:	4630      	mov	r0, r6
 80146dc:	2301      	movs	r3, #1
 80146de:	f7ff ff67 	bl	80145b0 <printi>
 80146e2:	1824      	adds	r4, r4, r0
				continue;
 80146e4:	e039      	b.n	801475a <print+0x112>
			}
			if( *format == 'x' ) {
 80146e6:	2978      	cmp	r1, #120	; 0x78
 80146e8:	d106      	bne.n	80146f8 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80146ea:	9905      	ldr	r1, [sp, #20]
 80146ec:	1d08      	adds	r0, r1, #4
 80146ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 80146f2:	9005      	str	r0, [sp, #20]
 80146f4:	2261      	movs	r2, #97	; 0x61
 80146f6:	e007      	b.n	8014708 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 80146f8:	2958      	cmp	r1, #88	; 0x58
 80146fa:	d10a      	bne.n	8014712 <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80146fc:	9905      	ldr	r1, [sp, #20]
 80146fe:	1d08      	adds	r0, r1, #4
 8014700:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014704:	9005      	str	r0, [sp, #20]
 8014706:	2241      	movs	r2, #65	; 0x41
 8014708:	9202      	str	r2, [sp, #8]
 801470a:	4630      	mov	r0, r6
 801470c:	6809      	ldr	r1, [r1, #0]
 801470e:	2210      	movs	r2, #16
 8014710:	e00b      	b.n	801472a <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 8014712:	2975      	cmp	r1, #117	; 0x75
 8014714:	d10b      	bne.n	801472e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8014716:	e88d 000c 	stmia.w	sp, {r2, r3}
 801471a:	9905      	ldr	r1, [sp, #20]
 801471c:	2361      	movs	r3, #97	; 0x61
 801471e:	9302      	str	r3, [sp, #8]
 8014720:	1d08      	adds	r0, r1, #4
 8014722:	6809      	ldr	r1, [r1, #0]
 8014724:	9005      	str	r0, [sp, #20]
 8014726:	220a      	movs	r2, #10
 8014728:	4630      	mov	r0, r6
 801472a:	2300      	movs	r3, #0
 801472c:	e7d7      	b.n	80146de <print+0x96>
			if( *format == 'b' ) {
				pc += printi (out, va_arg( args, int ), 2, 0, width, pad, 'A');
				continue;
			}
			#endif
			if( *format == 'c' ) {
 801472e:	2963      	cmp	r1, #99	; 0x63
 8014730:	d113      	bne.n	801475a <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8014732:	9905      	ldr	r1, [sp, #20]
 8014734:	1d08      	adds	r0, r1, #4
 8014736:	6809      	ldr	r1, [r1, #0]
 8014738:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 801473a:	2000      	movs	r0, #0
				continue;
			}
			#endif
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 801473c:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8014740:	f88d 001d 	strb.w	r0, [sp, #29]
				pc += prints (out, scr, width, pad);
 8014744:	a907      	add	r1, sp, #28
 8014746:	4630      	mov	r0, r6
 8014748:	f7ff fef1 	bl	801452e <prints>
 801474c:	e7c9      	b.n	80146e2 <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 801474e:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8014750:	4630      	mov	r0, r6
 8014752:	7829      	ldrb	r1, [r5, #0]
 8014754:	f7ff fee0 	bl	8014518 <printchar>
			++pc;
 8014758:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 801475a:	3501      	adds	r5, #1
 801475c:	e77a      	b.n	8014654 <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 801475e:	4620      	mov	r0, r4
 8014760:	b009      	add	sp, #36	; 0x24
 8014762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014764:	0801ba74 	.word	0x0801ba74

08014768 <sprintf>:
{
  return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8014768:	b40e      	push	{r1, r2, r3}
 801476a:	b50f      	push	{r0, r1, r2, r3, lr}
 801476c:	aa05      	add	r2, sp, #20
 801476e:	9001      	str	r0, [sp, #4]
 8014770:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 8014774:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 8014776:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 8014778:	f7ff ff66 	bl	8014648 <print>
}
 801477c:	b004      	add	sp, #16
 801477e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014782:	b003      	add	sp, #12
 8014784:	4770      	bx	lr

08014786 <vsprintf>:

// TK: added for alternative parameter passing
int vsprintf(char *out, const char *format, va_list args)
{
 8014786:	b507      	push	{r0, r1, r2, lr}
  char *_out;
  _out = out;
 8014788:	ab02      	add	r3, sp, #8
 801478a:	f843 0d04 	str.w	r0, [r3, #-4]!
  return print( &_out, format, args );
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff ff5a 	bl	8014648 <print>
}
 8014794:	bd0e      	pop	{r1, r2, r3, pc}
	...

08014798 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8014798:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 801479c:	4b02      	ldr	r3, [pc, #8]	; (80147a8 <NVIC_PriorityGroupConfig+0x10>)
 801479e:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 80147a2:	60d9      	str	r1, [r3, #12]
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop
 80147a8:	e000ed00 	.word	0xe000ed00

080147ac <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80147ac:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80147b0:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 80147b4:	4b01      	ldr	r3, [pc, #4]	; (80147bc <NVIC_SetVectorTable+0x10>)
 80147b6:	4310      	orrs	r0, r2
 80147b8:	6098      	str	r0, [r3, #8]
 80147ba:	4770      	bx	lr
 80147bc:	e000ed00 	.word	0xe000ed00

080147c0 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80147c0:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80147c2:	4b13      	ldr	r3, [pc, #76]	; (8014810 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80147c4:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80147c6:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80147c8:	68cc      	ldr	r4, [r1, #12]
 80147ca:	680a      	ldr	r2, [r1, #0]
 80147cc:	4314      	orrs	r4, r2
 80147ce:	694a      	ldr	r2, [r1, #20]
 80147d0:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80147d2:	698a      	ldr	r2, [r1, #24]
 80147d4:	4314      	orrs	r4, r2
 80147d6:	69ca      	ldr	r2, [r1, #28]
 80147d8:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80147da:	6a0a      	ldr	r2, [r1, #32]
 80147dc:	4314      	orrs	r4, r2
 80147de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80147e0:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80147e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80147e4:	4314      	orrs	r4, r2
 80147e6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80147e8:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80147ea:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80147ec:	4314      	orrs	r4, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80147ee:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80147f0:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80147f2:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80147f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80147f6:	f022 0407 	bic.w	r4, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80147fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80147fc:	431a      	orrs	r2, r3
 80147fe:	4322      	orrs	r2, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8014800:	6142      	str	r2, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8014802:	690b      	ldr	r3, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8014804:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8014806:	6889      	ldr	r1, [r1, #8]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8014808:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 801480a:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 801480c:	60c1      	str	r1, [r0, #12]
 801480e:	bd10      	pop	{r4, pc}
 8014810:	f01c803f 	.word	0xf01c803f

08014814 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8014814:	2300      	movs	r3, #0
 8014816:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8014818:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 801481a:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 801481c:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 801481e:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014820:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8014822:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8014824:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8014826:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8014828:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 801482a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 801482c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 801482e:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8014830:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8014832:	6383      	str	r3, [r0, #56]	; 0x38
 8014834:	4770      	bx	lr

08014836 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8014836:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014838:	b111      	cbz	r1, 8014840 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 801483a:	f043 0101 	orr.w	r1, r3, #1
 801483e:	e001      	b.n	8014844 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8014840:	f023 0101 	bic.w	r1, r3, #1
 8014844:	6001      	str	r1, [r0, #0]
 8014846:	4770      	bx	lr

08014848 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8014848:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 801484a:	4b08      	ldr	r3, [pc, #32]	; (801486c <DMA_ClearFlag+0x24>)
 801484c:	4a08      	ldr	r2, [pc, #32]	; (8014870 <DMA_ClearFlag+0x28>)
 801484e:	4c09      	ldr	r4, [pc, #36]	; (8014874 <DMA_ClearFlag+0x2c>)
 8014850:	42a0      	cmp	r0, r4
 8014852:	bf8c      	ite	hi
 8014854:	4610      	movhi	r0, r2
 8014856:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8014858:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801485c:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8014860:	f021 1382 	bic.w	r3, r1, #8519810	; 0x820082
 8014864:	bf14      	ite	ne
 8014866:	60c3      	strne	r3, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8014868:	6083      	streq	r3, [r0, #8]
 801486a:	bd10      	pop	{r4, pc}
 801486c:	40026000 	.word	0x40026000
 8014870:	40026400 	.word	0x40026400
 8014874:	4002640f 	.word	0x4002640f

08014878 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8014878:	060b      	lsls	r3, r1, #24
 801487a:	d511      	bpl.n	80148a0 <DMA_ITConfig+0x28>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 801487c:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 801487e:	b14a      	cbz	r2, 8014894 <DMA_ITConfig+0x1c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8014880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8014884:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8014886:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8014888:	d014      	beq.n	80148b4 <DMA_ITConfig+0x3c>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 801488a:	6803      	ldr	r3, [r0, #0]
 801488c:	f001 021e 	and.w	r2, r1, #30
 8014890:	431a      	orrs	r2, r3
 8014892:	e00e      	b.n	80148b2 <DMA_ITConfig+0x3a>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8014894:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8014898:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 801489a:	6142      	str	r2, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801489c:	d104      	bne.n	80148a8 <DMA_ITConfig+0x30>
 801489e:	4770      	bx	lr
 80148a0:	2980      	cmp	r1, #128	; 0x80
 80148a2:	d007      	beq.n	80148b4 <DMA_ITConfig+0x3c>
  {
    if (NewState != DISABLE)
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	d1f0      	bne.n	801488a <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80148a8:	6803      	ldr	r3, [r0, #0]
 80148aa:	f001 011e 	and.w	r1, r1, #30
 80148ae:	ea23 0201 	bic.w	r2, r3, r1
 80148b2:	6002      	str	r2, [r0, #0]
 80148b4:	4770      	bx	lr
	...

080148b8 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80148b8:	4b01      	ldr	r3, [pc, #4]	; (80148c0 <EXTI_ClearITPendingBit+0x8>)
 80148ba:	6158      	str	r0, [r3, #20]
 80148bc:	4770      	bx	lr
 80148be:	bf00      	nop
 80148c0:	40013c00 	.word	0x40013c00

080148c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80148c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80148c6:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80148c8:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 80148ca:	2301      	movs	r3, #1
 80148cc:	fa03 f302 	lsl.w	r3, r3, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80148d0:	ea03 0506 	and.w	r5, r3, r6

    if (currentpin == pos)
 80148d4:	429d      	cmp	r5, r3
 80148d6:	d13e      	bne.n	8014956 <GPIO_Init+0x92>
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 80148d8:	6807      	ldr	r7, [r0, #0]
 80148da:	790c      	ldrb	r4, [r1, #4]
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 80148dc:	0053      	lsls	r3, r2, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 80148de:	fa27 f703 	lsr.w	r7, r7, r3
 80148e2:	f007 0703 	and.w	r7, r7, #3
 80148e6:	42a7      	cmp	r7, r4
 80148e8:	d00d      	beq.n	8014906 <GPIO_Init+0x42>
	GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80148ea:	6807      	ldr	r7, [r0, #0]
 80148ec:	f04f 0c03 	mov.w	ip, #3
 80148f0:	fa0c fc03 	lsl.w	ip, ip, r3
 80148f4:	ea27 070c 	bic.w	r7, r7, ip
 80148f8:	6007      	str	r7, [r0, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80148fa:	6807      	ldr	r7, [r0, #0]
 80148fc:	fa04 fc03 	lsl.w	ip, r4, r3
 8014900:	ea4c 0707 	orr.w	r7, ip, r7
 8014904:	6007      	str	r7, [r0, #0]
      }

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8014906:	3c01      	subs	r4, #1
 8014908:	2c01      	cmp	r4, #1
 801490a:	d817      	bhi.n	801493c <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 801490c:	6887      	ldr	r7, [r0, #8]
 801490e:	2403      	movs	r4, #3
 8014910:	fa04 f403 	lsl.w	r4, r4, r3
 8014914:	ea27 0704 	bic.w	r7, r7, r4
 8014918:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 801491a:	794c      	ldrb	r4, [r1, #5]
 801491c:	6887      	ldr	r7, [r0, #8]
 801491e:	fa04 f403 	lsl.w	r4, r4, r3
 8014922:	433c      	orrs	r4, r7
 8014924:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8014926:	6844      	ldr	r4, [r0, #4]
 8014928:	ea24 0505 	bic.w	r5, r4, r5
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 801492c:	798c      	ldrb	r4, [r1, #6]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 801492e:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014930:	6845      	ldr	r5, [r0, #4]
 8014932:	fa04 f402 	lsl.w	r4, r4, r2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8014936:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014938:	432c      	orrs	r4, r5
 801493a:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 801493c:	68c5      	ldr	r5, [r0, #12]
 801493e:	2403      	movs	r4, #3
 8014940:	fa04 f403 	lsl.w	r4, r4, r3
 8014944:	ea25 0504 	bic.w	r5, r5, r4
 8014948:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 801494a:	79cd      	ldrb	r5, [r1, #7]
 801494c:	68c4      	ldr	r4, [r0, #12]
 801494e:	fa05 f303 	lsl.w	r3, r5, r3
 8014952:	4323      	orrs	r3, r4
 8014954:	60c3      	str	r3, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8014956:	3201      	adds	r2, #1
 8014958:	2a10      	cmp	r2, #16
 801495a:	d1b6      	bne.n	80148ca <GPIO_Init+0x6>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 801495c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801495e <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 801495e:	2100      	movs	r1, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8014960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014964:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8014966:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8014968:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 801496a:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 801496c:	71c1      	strb	r1, [r0, #7]
 801496e:	4770      	bx	lr

08014970 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8014970:	8301      	strh	r1, [r0, #24]
 8014972:	4770      	bx	lr

08014974 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8014974:	8341      	strh	r1, [r0, #26]
 8014976:	4770      	bx	lr

08014978 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014978:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 801497c:	08c9      	lsrs	r1, r1, #3
 801497e:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8014980:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014982:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014984:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8014988:	240f      	movs	r4, #15
 801498a:	fa04 f403 	lsl.w	r4, r4, r3
 801498e:	ea25 0404 	bic.w	r4, r5, r4
 8014992:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8014996:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 801499a:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 801499e:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80149a0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80149a4:	bd30      	pop	{r4, r5, pc}

080149a6 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80149a6:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80149a8:	b119      	cbz	r1, 80149b2 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80149aa:	b299      	uxth	r1, r3
 80149ac:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80149b0:	e003      	b.n	80149ba <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80149b2:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80149b6:	040a      	lsls	r2, r1, #16
 80149b8:	0c13      	lsrs	r3, r2, #16
 80149ba:	8003      	strh	r3, [r0, #0]
 80149bc:	4770      	bx	lr

080149be <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80149be:	8883      	ldrh	r3, [r0, #4]
 80149c0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80149c2:	b10a      	cbz	r2, 80149c8 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80149c4:	4319      	orrs	r1, r3
 80149c6:	e001      	b.n	80149cc <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80149c8:	ea23 0101 	bic.w	r1, r3, r1
 80149cc:	8081      	strh	r1, [r0, #4]
 80149ce:	4770      	bx	lr

080149d0 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80149d0:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80149d2:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80149d4:	b299      	uxth	r1, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80149d6:	ea41 4200 	orr.w	r2, r1, r0, lsl #16

  /* Return status */
  return lastevent;
}
 80149da:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 80149de:	4770      	bx	lr

080149e0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80149e0:	43c9      	mvns	r1, r1
 80149e2:	b28a      	uxth	r2, r1
 80149e4:	8282      	strh	r2, [r0, #20]
 80149e6:	4770      	bx	lr

080149e8 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80149e8:	4b01      	ldr	r3, [pc, #4]	; (80149f0 <PWR_BackupAccessCmd+0x8>)
 80149ea:	6018      	str	r0, [r3, #0]
 80149ec:	4770      	bx	lr
 80149ee:	bf00      	nop
 80149f0:	420e0020 	.word	0x420e0020

080149f4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80149f4:	4b01      	ldr	r3, [pc, #4]	; (80149fc <RCC_PLLI2SCmd+0x8>)
 80149f6:	6018      	str	r0, [r3, #0]
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop
 80149fc:	42470068 	.word	0x42470068

08014a00 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8014a00:	4b1e      	ldr	r3, [pc, #120]	; (8014a7c <RCC_GetClocksFreq+0x7c>)
 8014a02:	689a      	ldr	r2, [r3, #8]
 8014a04:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 8014a08:	2904      	cmp	r1, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8014a0a:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8014a0c:	d003      	beq.n	8014a16 <RCC_GetClocksFreq+0x16>
 8014a0e:	2908      	cmp	r1, #8
 8014a10:	d003      	beq.n	8014a1a <RCC_GetClocksFreq+0x1a>
 8014a12:	4b1b      	ldr	r3, [pc, #108]	; (8014a80 <RCC_GetClocksFreq+0x80>)
 8014a14:	e018      	b.n	8014a48 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8014a16:	4b1b      	ldr	r3, [pc, #108]	; (8014a84 <RCC_GetClocksFreq+0x84>)
 8014a18:	e016      	b.n	8014a48 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8014a1a:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014a1c:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014a1e:	6859      	ldr	r1, [r3, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8014a20:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014a24:	bf14      	ite	ne
 8014a26:	4b17      	ldrne	r3, [pc, #92]	; (8014a84 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014a28:	4b15      	ldreq	r3, [pc, #84]	; (8014a80 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014a2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014a2e:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014a32:	4a12      	ldr	r2, [pc, #72]	; (8014a7c <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014a34:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014a38:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014a3a:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014a3c:	f3c1 4401 	ubfx	r4, r1, #16, #2
 8014a40:	1c62      	adds	r2, r4, #1
 8014a42:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8014a44:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8014a48:	490c      	ldr	r1, [pc, #48]	; (8014a7c <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8014a4a:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8014a4c:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8014a4e:	4a0e      	ldr	r2, [pc, #56]	; (8014a88 <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8014a50:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8014a54:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8014a56:	6803      	ldr	r3, [r0, #0]
 8014a58:	fa23 f304 	lsr.w	r3, r3, r4
 8014a5c:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8014a5e:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8014a60:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8014a64:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8014a66:	fa23 f404 	lsr.w	r4, r3, r4
 8014a6a:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8014a6c:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8014a6e:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8014a72:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8014a74:	fa23 f302 	lsr.w	r3, r3, r2
 8014a78:	60c3      	str	r3, [r0, #12]
 8014a7a:	bd10      	pop	{r4, pc}
 8014a7c:	40023800 	.word	0x40023800
 8014a80:	00f42400 	.word	0x00f42400
 8014a84:	007a1200 	.word	0x007a1200
 8014a88:	20000009 	.word	0x20000009

08014a8c <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8014a8c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8014a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014a94:	4b08      	ldr	r3, [pc, #32]	; (8014ab8 <RCC_RTCCLKConfig+0x2c>)
 8014a96:	d108      	bne.n	8014aaa <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8014a98:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8014a9a:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8014a9e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8014aa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014aa6:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8014aa8:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8014aaa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014aac:	0500      	lsls	r0, r0, #20
 8014aae:	ea41 5210 	orr.w	r2, r1, r0, lsr #20
 8014ab2:	671a      	str	r2, [r3, #112]	; 0x70
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop
 8014ab8:	40023800 	.word	0x40023800

08014abc <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8014abc:	4b01      	ldr	r3, [pc, #4]	; (8014ac4 <RCC_RTCCLKCmd+0x8>)
 8014abe:	6018      	str	r0, [r3, #0]
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	42470e3c 	.word	0x42470e3c

08014ac8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8014ac8:	4b04      	ldr	r3, [pc, #16]	; (8014adc <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8014aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014acc:	b109      	cbz	r1, 8014ad2 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8014ace:	4310      	orrs	r0, r2
 8014ad0:	e001      	b.n	8014ad6 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8014ad2:	ea22 0000 	bic.w	r0, r2, r0
 8014ad6:	6318      	str	r0, [r3, #48]	; 0x30
 8014ad8:	4770      	bx	lr
 8014ada:	bf00      	nop
 8014adc:	40023800 	.word	0x40023800

08014ae0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8014ae0:	4b04      	ldr	r3, [pc, #16]	; (8014af4 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8014ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014ae4:	b109      	cbz	r1, 8014aea <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8014ae6:	4310      	orrs	r0, r2
 8014ae8:	e001      	b.n	8014aee <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8014aea:	ea22 0000 	bic.w	r0, r2, r0
 8014aee:	6358      	str	r0, [r3, #52]	; 0x34
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	40023800 	.word	0x40023800

08014af8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8014af8:	4b04      	ldr	r3, [pc, #16]	; (8014b0c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8014afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014afc:	b109      	cbz	r1, 8014b02 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8014afe:	4310      	orrs	r0, r2
 8014b00:	e001      	b.n	8014b06 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8014b02:	ea22 0000 	bic.w	r0, r2, r0
 8014b06:	6418      	str	r0, [r3, #64]	; 0x40
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop
 8014b0c:	40023800 	.word	0x40023800

08014b10 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8014b10:	4b04      	ldr	r3, [pc, #16]	; (8014b24 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8014b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014b14:	b109      	cbz	r1, 8014b1a <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8014b16:	4310      	orrs	r0, r2
 8014b18:	e001      	b.n	8014b1e <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8014b1a:	ea22 0000 	bic.w	r0, r2, r0
 8014b1e:	6458      	str	r0, [r3, #68]	; 0x44
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	40023800 	.word	0x40023800

08014b28 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8014b28:	4b04      	ldr	r3, [pc, #16]	; (8014b3c <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8014b2a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014b2c:	b109      	cbz	r1, 8014b32 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8014b2e:	4310      	orrs	r0, r2
 8014b30:	e001      	b.n	8014b36 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8014b32:	ea22 0000 	bic.w	r0, r2, r0
 8014b36:	6118      	str	r0, [r3, #16]
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop
 8014b3c:	40023800 	.word	0x40023800

08014b40 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8014b40:	4b04      	ldr	r3, [pc, #16]	; (8014b54 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8014b42:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014b44:	b109      	cbz	r1, 8014b4a <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8014b46:	4310      	orrs	r0, r2
 8014b48:	e001      	b.n	8014b4e <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8014b4a:	ea22 0000 	bic.w	r0, r2, r0
 8014b4e:	6158      	str	r0, [r3, #20]
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	40023800 	.word	0x40023800

08014b58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8014b58:	4b04      	ldr	r3, [pc, #16]	; (8014b6c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8014b5a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014b5c:	b109      	cbz	r1, 8014b62 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8014b5e:	4310      	orrs	r0, r2
 8014b60:	e001      	b.n	8014b66 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8014b62:	ea22 0000 	bic.w	r0, r2, r0
 8014b66:	6218      	str	r0, [r3, #32]
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	40023800 	.word	0x40023800

08014b70 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8014b70:	4b04      	ldr	r3, [pc, #16]	; (8014b84 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8014b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014b74:	b109      	cbz	r1, 8014b7a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8014b76:	4310      	orrs	r0, r2
 8014b78:	e001      	b.n	8014b7e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8014b7a:	ea22 0000 	bic.w	r0, r2, r0
 8014b7e:	6258      	str	r0, [r3, #36]	; 0x24
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
 8014b84:	40023800 	.word	0x40023800

08014b88 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8014b88:	2100      	movs	r1, #0
  
  while (Value >= 10)
 8014b8a:	2809      	cmp	r0, #9
 8014b8c:	d904      	bls.n	8014b98 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8014b8e:	1c4b      	adds	r3, r1, #1
    Value -= 10;
 8014b90:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8014b92:	b2d9      	uxtb	r1, r3
    Value -= 10;
 8014b94:	b2c0      	uxtb	r0, r0
 8014b96:	e7f8      	b.n	8014b8a <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8014b98:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
 8014b9c:	b2c0      	uxtb	r0, r0
 8014b9e:	4770      	bx	lr

08014ba0 <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	227f      	movs	r2, #127	; 0x7f
 8014ba4:	23ff      	movs	r3, #255	; 0xff
 8014ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014baa:	4770      	bx	lr

08014bac <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8014bac:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8014bae:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8014bb0:	490d      	ldr	r1, [pc, #52]	; (8014be8 <RTC_EnterInitMode+0x3c>)
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 8014bb2:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8014bb4:	68ca      	ldr	r2, [r1, #12]
 8014bb6:	0650      	lsls	r0, r2, #25
 8014bb8:	d413      	bmi.n	8014be2 <RTC_EnterInitMode+0x36>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8014bba:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbe:	60c8      	str	r0, [r1, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8014bc0:	4b09      	ldr	r3, [pc, #36]	; (8014be8 <RTC_EnterInitMode+0x3c>)
 8014bc2:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 8014bc4:	9801      	ldr	r0, [sp, #4]
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8014bc6:	f001 0240 	and.w	r2, r1, #64	; 0x40
      initcounter++;  
 8014bca:	1c41      	adds	r1, r0, #1
 8014bcc:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8014bce:	9801      	ldr	r0, [sp, #4]
 8014bd0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8014bd4:	d001      	beq.n	8014bda <RTC_EnterInitMode+0x2e>
 8014bd6:	2a00      	cmp	r2, #0
 8014bd8:	d0f2      	beq.n	8014bc0 <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8014bda:	68db      	ldr	r3, [r3, #12]
    {
      status = SUCCESS;
 8014bdc:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8014be0:	e000      	b.n	8014be4 <RTC_EnterInitMode+0x38>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8014be2:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8014be4:	b002      	add	sp, #8
 8014be6:	4770      	bx	lr
 8014be8:	40002800 	.word	0x40002800

08014bec <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8014bec:	4b02      	ldr	r3, [pc, #8]	; (8014bf8 <RTC_ExitInitMode+0xc>)
 8014bee:	68da      	ldr	r2, [r3, #12]
 8014bf0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8014bf4:	60d8      	str	r0, [r3, #12]
 8014bf6:	4770      	bx	lr
 8014bf8:	40002800 	.word	0x40002800

08014bfc <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8014bfc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014bfe:	4c10      	ldr	r4, [pc, #64]	; (8014c40 <RTC_Init+0x44>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8014c00:	4605      	mov	r5, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014c02:	23ca      	movs	r3, #202	; 0xca
  RTC->WPR = 0x53;
 8014c04:	2053      	movs	r0, #83	; 0x53
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014c06:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8014c08:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8014c0a:	f7ff ffcf 	bl	8014bac <RTC_EnterInitMode>
 8014c0e:	b190      	cbz	r0, 8014c36 <RTC_Init+0x3a>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8014c10:	68a1      	ldr	r1, [r4, #8]
 8014c12:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8014c16:	60a2      	str	r2, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8014c18:	68a0      	ldr	r0, [r4, #8]
 8014c1a:	682b      	ldr	r3, [r5, #0]
 8014c1c:	ea40 0103 	orr.w	r1, r0, r3
 8014c20:	60a1      	str	r1, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8014c22:	68aa      	ldr	r2, [r5, #8]
 8014c24:	6122      	str	r2, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8014c26:	6920      	ldr	r0, [r4, #16]
 8014c28:	686b      	ldr	r3, [r5, #4]
 8014c2a:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8014c2e:	6121      	str	r1, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8014c30:	f7ff ffdc 	bl	8014bec <RTC_ExitInitMode>

    status = SUCCESS;    
 8014c34:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8014c36:	4b02      	ldr	r3, [pc, #8]	; (8014c40 <RTC_Init+0x44>)
 8014c38:	22ff      	movs	r2, #255	; 0xff
 8014c3a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8014c3c:	bd38      	pop	{r3, r4, r5, pc}
 8014c3e:	bf00      	nop
 8014c40:	40002800 	.word	0x40002800

08014c44 <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014c44:	480f      	ldr	r0, [pc, #60]	; (8014c84 <RTC_WaitForSynchro+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8014c46:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8014c48:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014c4a:	22ca      	movs	r2, #202	; 0xca
  RTC->WPR = 0x53;
 8014c4c:	2153      	movs	r1, #83	; 0x53
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 8014c4e:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014c50:	6242      	str	r2, [r0, #36]	; 0x24
  RTC->WPR = 0x53;
 8014c52:	6241      	str	r1, [r0, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8014c54:	68c3      	ldr	r3, [r0, #12]
 8014c56:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 8014c5a:	60c2      	str	r2, [r0, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8014c5c:	4b09      	ldr	r3, [pc, #36]	; (8014c84 <RTC_WaitForSynchro+0x40>)
 8014c5e:	68d8      	ldr	r0, [r3, #12]
    synchrocounter++;  
 8014c60:	9901      	ldr	r1, [sp, #4]
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8014c62:	f000 0220 	and.w	r2, r0, #32
    synchrocounter++;  
 8014c66:	1c48      	adds	r0, r1, #1
 8014c68:	9001      	str	r0, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8014c6a:	9901      	ldr	r1, [sp, #4]
 8014c6c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8014c70:	d001      	beq.n	8014c76 <RTC_WaitForSynchro+0x32>
 8014c72:	2a00      	cmp	r2, #0
 8014c74:	d0f2      	beq.n	8014c5c <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8014c76:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8014c78:	22ff      	movs	r2, #255	; 0xff
 8014c7a:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 8014c7c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8014c80:	b002      	add	sp, #8
 8014c82:	4770      	bx	lr
 8014c84:	40002800 	.word	0x40002800

08014c88 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8014c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8a:	4b21      	ldr	r3, [pc, #132]	; (8014d10 <RTC_SetTime+0x88>)
 8014c8c:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8014c8e:	6899      	ldr	r1, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8014c90:	b920      	cbnz	r0, 8014c9c <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8014c92:	f011 0640 	ands.w	r6, r1, #64	; 0x40
 8014c96:	d127      	bne.n	8014ce8 <RTC_SetTime+0x60>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8014c98:	70e6      	strb	r6, [r4, #3]
 8014c9a:	e025      	b.n	8014ce8 <RTC_SetTime+0x60>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8014c9c:	f011 0040 	ands.w	r0, r1, #64	; 0x40
 8014ca0:	d100      	bne.n	8014ca4 <RTC_SetTime+0x1c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8014ca2:	70e0      	strb	r0, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8014ca4:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014ca6:	7822      	ldrb	r2, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8014ca8:	78a0      	ldrb	r0, [r4, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8014caa:	78e4      	ldrb	r4, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8014cac:	022b      	lsls	r3, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014cae:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8014cb2:	4301      	orrs	r1, r0
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014cb4:	ea41 4504 	orr.w	r5, r1, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014cb8:	4c15      	ldr	r4, [pc, #84]	; (8014d10 <RTC_SetTime+0x88>)
 8014cba:	21ca      	movs	r1, #202	; 0xca
  RTC->WPR = 0x53;
 8014cbc:	2053      	movs	r0, #83	; 0x53
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8014cbe:	6261      	str	r1, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8014cc0:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8014cc2:	f7ff ff73 	bl	8014bac <RTC_EnterInitMode>
 8014cc6:	b158      	cbz	r0, 8014ce0 <RTC_SetTime+0x58>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014cc8:	f005 327f 	and.w	r2, r5, #2139062143	; 0x7f7f7f7f
 8014ccc:	f022 45fe 	bic.w	r5, r2, #2130706432	; 0x7f000000
 8014cd0:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8014cd2:	f7ff ff8b 	bl	8014bec <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8014cd6:	f7ff ffb5 	bl	8014c44 <RTC_WaitForSynchro>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8014cda:	3000      	adds	r0, #0
 8014cdc:	bf18      	it	ne
 8014cde:	2001      	movne	r0, #1
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8014ce0:	4b0b      	ldr	r3, [pc, #44]	; (8014d10 <RTC_SetTime+0x88>)
 8014ce2:	21ff      	movs	r1, #255	; 0xff
 8014ce4:	6259      	str	r1, [r3, #36]	; 0x24
 8014ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014ce8:	7820      	ldrb	r0, [r4, #0]
 8014cea:	f7ff ff4d 	bl	8014b88 <RTC_ByteToBcd2>
 8014cee:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8014cf0:	7860      	ldrb	r0, [r4, #1]
 8014cf2:	f7ff ff49 	bl	8014b88 <RTC_ByteToBcd2>
 8014cf6:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8014cf8:	78a0      	ldrb	r0, [r4, #2]
 8014cfa:	f7ff ff45 	bl	8014b88 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8014cfe:	78e2      	ldrb	r2, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014d00:	ea40 4502 	orr.w	r5, r0, r2, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8014d04:	ea45 4307 	orr.w	r3, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8014d08:	ea43 2506 	orr.w	r5, r3, r6, lsl #8
 8014d0c:	e7d4      	b.n	8014cb8 <RTC_SetTime+0x30>
 8014d0e:	bf00      	nop
 8014d10:	40002800 	.word	0x40002800

08014d14 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8014d14:	2300      	movs	r3, #0
 8014d16:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8014d18:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8014d1a:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8014d1c:	7083      	strb	r3, [r0, #2]
 8014d1e:	4770      	bx	lr

08014d20 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8014d20:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8014d22:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8014d24:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8014d26:	884c      	ldrh	r4, [r1, #2]
 8014d28:	4323      	orrs	r3, r4
 8014d2a:	888c      	ldrh	r4, [r1, #4]
 8014d2c:	4323      	orrs	r3, r4
 8014d2e:	88cc      	ldrh	r4, [r1, #6]
 8014d30:	4323      	orrs	r3, r4
 8014d32:	890c      	ldrh	r4, [r1, #8]
 8014d34:	4323      	orrs	r3, r4
 8014d36:	894c      	ldrh	r4, [r1, #10]
 8014d38:	4323      	orrs	r3, r4
 8014d3a:	898c      	ldrh	r4, [r1, #12]
 8014d3c:	4323      	orrs	r3, r4
 8014d3e:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8014d40:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8014d42:	4323      	orrs	r3, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8014d44:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8014d48:	431a      	orrs	r2, r3
 8014d4a:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8014d4c:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8014d4e:	8b82      	ldrh	r2, [r0, #28]
 8014d50:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8014d54:	041a      	lsls	r2, r3, #16
 8014d56:	0c13      	lsrs	r3, r2, #16
 8014d58:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8014d5a:	8201      	strh	r1, [r0, #16]
 8014d5c:	bd10      	pop	{r4, pc}
	...

08014d60 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8014d60:	8b83      	ldrh	r3, [r0, #28]
 8014d62:	f423 627b 	bic.w	r2, r3, #4016	; 0xfb0
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8014d66:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8014d68:	f022 040f 	bic.w	r4, r2, #15
 8014d6c:	0425      	lsls	r5, r4, #16
 8014d6e:	0c2b      	lsrs	r3, r5, #16
  SPIx->I2SPR = 0x0002;
 8014d70:	2402      	movs	r4, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8014d72:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8014d74:	8404      	strh	r4, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8014d76:	8b82      	ldrh	r2, [r0, #28]
 8014d78:	b295      	uxth	r5, r2
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8014d7a:	688a      	ldr	r2, [r1, #8]
 8014d7c:	42a2      	cmp	r2, r4
 8014d7e:	d038      	beq.n	8014df2 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8014d80:	4b29      	ldr	r3, [pc, #164]	; (8014e28 <I2S_Init+0xc8>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8014d82:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8014d84:	689f      	ldr	r7, [r3, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8014d86:	2e00      	cmp	r6, #0
 8014d88:	bf14      	ite	ne
 8014d8a:	4626      	movne	r6, r4
 8014d8c:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8014d8e:	023c      	lsls	r4, r7, #8
 8014d90:	d503      	bpl.n	8014d9a <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8014d92:	689c      	ldr	r4, [r3, #8]
 8014d94:	f424 0700 	bic.w	r7, r4, #8388608	; 0x800000
 8014d98:	609f      	str	r7, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8014d9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8014d9e:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8014da2:	685b      	ldr	r3, [r3, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8014da4:	f8df c084 	ldr.w	ip, [pc, #132]	; 8014e2c <I2S_Init+0xcc>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8014da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8014dac:	fbbc f3f3 	udiv	r3, ip, r3
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8014db0:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8014db4:	435c      	muls	r4, r3
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8014db6:	f3c7 7302 	ubfx	r3, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8014dba:	fbb4 f4f3 	udiv	r4, r4, r3
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8014dbe:	88cb      	ldrh	r3, [r1, #6]
 8014dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dc4:	f04f 030a 	mov.w	r3, #10
 8014dc8:	d101      	bne.n	8014dce <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8014dca:	0a24      	lsrs	r4, r4, #8
 8014dcc:	e002      	b.n	8014dd4 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8014dce:	0176      	lsls	r6, r6, #5
 8014dd0:	fbb4 f4f6 	udiv	r4, r4, r6
 8014dd4:	4363      	muls	r3, r4
 8014dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dda:	1d53      	adds	r3, r2, #5
 8014ddc:	b29c      	uxth	r4, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8014dde:	220a      	movs	r2, #10
 8014de0:	fbb4 f4f2 	udiv	r4, r4, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8014de4:	f004 0301 	and.w	r3, r4, #1
 8014de8:	f3c4 024f 	ubfx	r2, r4, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8014dec:	021c      	lsls	r4, r3, #8
 8014dee:	b2a3      	uxth	r3, r4
 8014df0:	e000      	b.n	8014df4 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8014df2:	2300      	movs	r3, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8014df4:	1e94      	subs	r4, r2, #2
 8014df6:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8014df8:	2cfe      	cmp	r4, #254	; 0xfe
 8014dfa:	bf28      	it	cs
 8014dfc:	2300      	movcs	r3, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8014dfe:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8014e00:	bf28      	it	cs
 8014e02:	2202      	movcs	r2, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8014e04:	431a      	orrs	r2, r3
 8014e06:	4322      	orrs	r2, r4
 8014e08:	b293      	uxth	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8014e0a:	880a      	ldrh	r2, [r1, #0]
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8014e0c:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8014e0e:	ea45 0302 	orr.w	r3, r5, r2

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8014e12:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8014e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8014e18:	4313      	orrs	r3, r2
 8014e1a:	888a      	ldrh	r2, [r1, #4]
 8014e1c:	8989      	ldrh	r1, [r1, #12]
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	430b      	orrs	r3, r1
 8014e22:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8014e24:	8383      	strh	r3, [r0, #28]
 8014e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e28:	40023800 	.word	0x40023800
 8014e2c:	007a1200 	.word	0x007a1200

08014e30 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8014e30:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8014e32:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8014e34:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8014e36:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8014e38:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8014e3a:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8014e3c:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8014e3e:	8183      	strh	r3, [r0, #12]
 8014e40:	4770      	bx	lr

08014e42 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8014e42:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014e44:	b119      	cbz	r1, 8014e4e <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8014e46:	b299      	uxth	r1, r3
 8014e48:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 8014e4c:	e003      	b.n	8014e56 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8014e4e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8014e52:	040a      	lsls	r2, r1, #16
 8014e54:	0c13      	lsrs	r3, r2, #16
 8014e56:	8003      	strh	r3, [r0, #0]
 8014e58:	4770      	bx	lr

08014e5a <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8014e5a:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014e5c:	b119      	cbz	r1, 8014e66 <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8014e5e:	b299      	uxth	r1, r3
 8014e60:	f441 6380 	orr.w	r3, r1, #1024	; 0x400
 8014e64:	e003      	b.n	8014e6e <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8014e66:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8014e6a:	040a      	lsls	r2, r1, #16
 8014e6c:	0c13      	lsrs	r3, r2, #16
 8014e6e:	8383      	strh	r3, [r0, #28]
 8014e70:	4770      	bx	lr

08014e72 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8014e72:	8883      	ldrh	r3, [r0, #4]
 8014e74:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8014e76:	b10a      	cbz	r2, 8014e7c <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8014e78:	4319      	orrs	r1, r3
 8014e7a:	e001      	b.n	8014e80 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8014e7c:	ea23 0101 	bic.w	r1, r3, r1
 8014e80:	8081      	strh	r1, [r0, #4]
 8014e82:	4770      	bx	lr

08014e84 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8014e84:	4a1c      	ldr	r2, [pc, #112]	; (8014ef8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8014e86:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8014e88:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8014e8a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8014e8c:	d012      	beq.n	8014eb4 <TIM_TimeBaseInit+0x30>
 8014e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e92:	4290      	cmp	r0, r2
 8014e94:	d00e      	beq.n	8014eb4 <TIM_TimeBaseInit+0x30>
 8014e96:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8014e9a:	d00b      	beq.n	8014eb4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8014e9c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8014ea0:	4290      	cmp	r0, r2
 8014ea2:	d007      	beq.n	8014eb4 <TIM_TimeBaseInit+0x30>
 8014ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014ea8:	4290      	cmp	r0, r2
 8014eaa:	d003      	beq.n	8014eb4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8014eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014eb0:	4290      	cmp	r0, r2
 8014eb2:	d103      	bne.n	8014ebc <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8014eb4:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8014eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8014eba:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8014ebc:	4a0f      	ldr	r2, [pc, #60]	; (8014efc <TIM_TimeBaseInit+0x78>)
 8014ebe:	4290      	cmp	r0, r2
 8014ec0:	d008      	beq.n	8014ed4 <TIM_TimeBaseInit+0x50>
 8014ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014ec6:	4290      	cmp	r0, r2
 8014ec8:	d004      	beq.n	8014ed4 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8014eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8014ece:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8014ed0:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8014ed2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8014ed4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8014ed6:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8014ed8:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8014eda:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8014edc:	4b06      	ldr	r3, [pc, #24]	; (8014ef8 <TIM_TimeBaseInit+0x74>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8014ede:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8014ee0:	4298      	cmp	r0, r3
 8014ee2:	d003      	beq.n	8014eec <TIM_TimeBaseInit+0x68>
 8014ee4:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8014ee8:	4290      	cmp	r0, r2
 8014eea:	d101      	bne.n	8014ef0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8014eec:	7a89      	ldrb	r1, [r1, #10]
 8014eee:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	8283      	strh	r3, [r0, #20]
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	40010000 	.word	0x40010000
 8014efc:	40001000 	.word	0x40001000

08014f00 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8014f00:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014f02:	b119      	cbz	r1, 8014f0c <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8014f04:	b299      	uxth	r1, r3
 8014f06:	f041 0301 	orr.w	r3, r1, #1
 8014f0a:	e003      	b.n	8014f14 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8014f0c:	f023 0101 	bic.w	r1, r3, #1
 8014f10:	040a      	lsls	r2, r1, #16
 8014f12:	0c13      	lsrs	r3, r2, #16
 8014f14:	8003      	strh	r3, [r0, #0]
 8014f16:	4770      	bx	lr

08014f18 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8014f18:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8014f1a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8014f1c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8014f20:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8014f22:	d003      	beq.n	8014f2c <TIM_GetITStatus+0x14>
 8014f24:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8014f26:	bf0c      	ite	eq
 8014f28:	2000      	moveq	r0, #0
 8014f2a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8014f2c:	4770      	bx	lr

08014f2e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8014f2e:	43c9      	mvns	r1, r1
 8014f30:	b28a      	uxth	r2, r1
 8014f32:	8202      	strh	r2, [r0, #16]
 8014f34:	4770      	bx	lr
	...

08014f38 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8014f38:	8a03      	ldrh	r3, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8014f3a:	b530      	push	{r4, r5, lr}
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8014f40:	88ea      	ldrh	r2, [r5, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8014f42:	b298      	uxth	r0, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8014f44:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8014f48:	4311      	orrs	r1, r2
 8014f4a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8014f4c:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8014f4e:	f423 50b0 	bic.w	r0, r3, #5632	; 0x1600
 8014f52:	f020 010c 	bic.w	r1, r0, #12
 8014f56:	040a      	lsls	r2, r1, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8014f58:	8928      	ldrh	r0, [r5, #8]
 8014f5a:	88a9      	ldrh	r1, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8014f5c:	0c13      	lsrs	r3, r2, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8014f5e:	ea40 0201 	orr.w	r2, r0, r1
 8014f62:	8968      	ldrh	r0, [r5, #10]
 8014f64:	4302      	orrs	r2, r0
 8014f66:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8014f68:	430b      	orrs	r3, r1
 8014f6a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8014f6c:	8aa2      	ldrh	r2, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8014f6e:	89ab      	ldrh	r3, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8014f70:	b290      	uxth	r0, r2

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8014f72:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8014f76:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8014f78:	4319      	orrs	r1, r3
 8014f7a:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8014f7c:	4668      	mov	r0, sp
 8014f7e:	f7ff fd3f 	bl	8014a00 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8014f82:	4a1a      	ldr	r2, [pc, #104]	; (8014fec <USART_Init+0xb4>)
 8014f84:	4294      	cmp	r4, r2
 8014f86:	d003      	beq.n	8014f90 <USART_Init+0x58>
 8014f88:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8014f8c:	4284      	cmp	r4, r0
 8014f8e:	d101      	bne.n	8014f94 <USART_Init+0x5c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8014f90:	9b03      	ldr	r3, [sp, #12]
 8014f92:	e000      	b.n	8014f96 <USART_Init+0x5e>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8014f94:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014f96:	89a1      	ldrh	r1, [r4, #12]
 8014f98:	b20a      	sxth	r2, r1
 8014f9a:	2a00      	cmp	r2, #0
 8014f9c:	f04f 0019 	mov.w	r0, #25
 8014fa0:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8014fa2:	fb00 f303 	mul.w	r3, r0, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014fa6:	da01      	bge.n	8014fac <USART_Init+0x74>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8014fa8:	0051      	lsls	r1, r2, #1
 8014faa:	e000      	b.n	8014fae <USART_Init+0x76>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8014fac:	0091      	lsls	r1, r2, #2
 8014fae:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8014fb2:	2364      	movs	r3, #100	; 0x64
 8014fb4:	fbb1 f0f3 	udiv	r0, r1, r3
 8014fb8:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8014fba:	0910      	lsrs	r0, r2, #4
 8014fbc:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014fc0:	89a0      	ldrh	r0, [r4, #12]
 8014fc2:	b200      	sxth	r0, r0
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	da06      	bge.n	8014fd6 <USART_Init+0x9e>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8014fc8:	00c9      	lsls	r1, r1, #3
 8014fca:	3132      	adds	r1, #50	; 0x32
 8014fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8014fd0:	f003 0007 	and.w	r0, r3, #7
 8014fd4:	e005      	b.n	8014fe2 <USART_Init+0xaa>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8014fd6:	0109      	lsls	r1, r1, #4
 8014fd8:	3132      	adds	r1, #50	; 0x32
 8014fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8014fde:	f003 000f 	and.w	r0, r3, #15
 8014fe2:	4302      	orrs	r2, r0
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8014fe4:	b290      	uxth	r0, r2
 8014fe6:	8120      	strh	r0, [r4, #8]
}
 8014fe8:	b005      	add	sp, #20
 8014fea:	bd30      	pop	{r4, r5, pc}
 8014fec:	40011000 	.word	0x40011000

08014ff0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8014ff0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014ff2:	b119      	cbz	r1, 8014ffc <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8014ff4:	b299      	uxth	r1, r3
 8014ff6:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 8014ffa:	e003      	b.n	8015004 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8014ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015000:	040a      	lsls	r2, r1, #16
 8015002:	0c13      	lsrs	r3, r2, #16
 8015004:	8183      	strh	r3, [r0, #12]
 8015006:	4770      	bx	lr

08015008 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8015008:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 801500c:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 801500e:	2401      	movs	r4, #1
 8015010:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8015014:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8015016:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 801501a:	d101      	bne.n	8015020 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 801501c:	300c      	adds	r0, #12
 801501e:	e004      	b.n	801502a <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8015020:	2b02      	cmp	r3, #2
 8015022:	d101      	bne.n	8015028 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8015024:	3010      	adds	r0, #16
 8015026:	e000      	b.n	801502a <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8015028:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 801502a:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 801502c:	b112      	cbz	r2, 8015034 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 801502e:	ea43 0201 	orr.w	r2, r3, r1
 8015032:	e001      	b.n	8015038 <USART_ITConfig+0x30>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8015034:	ea23 0201 	bic.w	r2, r3, r1
 8015038:	6002      	str	r2, [r0, #0]
 801503a:	bd10      	pop	{r4, pc}

0801503c <USBD_Resume>:
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 801503c:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8015040:	b510      	push	{r4, lr}
 8015042:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8015044:	6918      	ldr	r0, [r3, #16]
 8015046:	4780      	blx	r0
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8015048:	2103      	movs	r1, #3
 801504a:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  return USBD_OK;
}
 801504e:	2000      	movs	r0, #0
 8015050:	bd10      	pop	{r4, pc}

08015052 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8015052:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
 8015054:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8015058:	2104      	movs	r1, #4
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.device_old_status = pdev->dev.device_status;
 801505a:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 801505e:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8015062:	f8d0 05e8 	ldr.w	r0, [r0, #1512]	; 0x5e8
 8015066:	68c2      	ldr	r2, [r0, #12]
 8015068:	4790      	blx	r2
  return USBD_OK;
}
 801506a:	2000      	movs	r0, #0
 801506c:	bd08      	pop	{r3, pc}

0801506e <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 801506e:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 8015070:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015074:	69d9      	ldr	r1, [r3, #28]
 8015076:	b101      	cbz	r1, 801507a <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8015078:	4788      	blx	r1
  }
  return USBD_OK;
}
 801507a:	2000      	movs	r0, #0
 801507c:	bd08      	pop	{r3, pc}

0801507e <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 801507e:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8015080:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015084:	6a19      	ldr	r1, [r3, #32]
 8015086:	4788      	blx	r1
  return USBD_OK;
}
 8015088:	2000      	movs	r0, #0
 801508a:	bd08      	pop	{r3, pc}

0801508c <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 801508c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 801508e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015092:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015094:	4788      	blx	r1
  return USBD_OK;
}
 8015096:	2000      	movs	r0, #0
 8015098:	bd08      	pop	{r3, pc}

0801509a <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 801509a:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 801509c:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 801509e:	2240      	movs	r2, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 80150a0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 80150a2:	460b      	mov	r3, r1
 80150a4:	f001 ff18 	bl	8016ed8 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 80150a8:	2180      	movs	r1, #128	; 0x80
 80150aa:	2240      	movs	r2, #64	; 0x40
 80150ac:	2300      	movs	r3, #0
 80150ae:	4620      	mov	r0, r4
 80150b0:	f001 ff12 	bl	8016ed8 <DCD_EP_Open>
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80150b4:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80150b8:	2301      	movs	r3, #1
 80150ba:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80150be:	6841      	ldr	r1, [r0, #4]
 80150c0:	78a0      	ldrb	r0, [r4, #2]
 80150c2:	4788      	blx	r1
  
  return USBD_OK;
}
 80150c4:	2000      	movs	r0, #0
 80150c6:	bd10      	pop	{r4, pc}

080150c8 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80150c8:	b513      	push	{r0, r1, r4, lr}
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80150ca:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80150cc:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80150ce:	f000 f923 	bl	8015318 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80150d2:	f89d 1000 	ldrb.w	r1, [sp]
 80150d6:	f001 031f 	and.w	r3, r1, #31
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d00c      	beq.n	80150f8 <USBD_SetupStage+0x30>
 80150de:	d306      	bcc.n	80150ee <USBD_SetupStage+0x26>
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d10e      	bne.n	8015102 <USBD_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 80150e4:	4620      	mov	r0, r4
 80150e6:	4669      	mov	r1, sp
 80150e8:	f000 f946 	bl	8015378 <USBD_StdEPReq>
    break;
 80150ec:	e00e      	b.n	801510c <USBD_SetupStage+0x44>
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 80150ee:	4620      	mov	r0, r4
 80150f0:	4669      	mov	r1, sp
 80150f2:	f000 f9bb 	bl	801546c <USBD_StdDevReq>
    break;
 80150f6:	e009      	b.n	801510c <USBD_SetupStage+0x44>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 80150f8:	4620      	mov	r0, r4
 80150fa:	4669      	mov	r1, sp
 80150fc:	f000 f99e 	bl	801543c <USBD_StdItfReq>
    break;
 8015100:	e004      	b.n	801510c <USBD_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8015102:	4620      	mov	r0, r4
 8015104:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8015108:	f001 ff58 	bl	8016fbc <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 801510c:	2000      	movs	r0, #0
 801510e:	bd1c      	pop	{r2, r3, r4, pc}

08015110 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8015114:	2900      	cmp	r1, #0
 8015116:	d147      	bne.n	80151a8 <USBD_DataInStage+0x98>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8015118:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 801511c:	2b02      	cmp	r3, #2
 801511e:	d137      	bne.n	8015190 <USBD_DataInStage+0x80>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8015120:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8015124:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8015128:	429a      	cmp	r2, r3
 801512a:	d911      	bls.n	8015150 <USBD_DataInStage+0x40>
      {
        ep->rem_data_len -=  ep->maxpacket;
 801512c:	1ad2      	subs	r2, r2, r3
 801512e:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
        if(pdev->cfg.dma_enable == 1)
 8015132:	78c0      	ldrb	r0, [r0, #3]
 8015134:	2801      	cmp	r0, #1
 8015136:	d104      	bne.n	8015142 <USBD_DataInStage+0x32>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8015138:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 801513c:	18cb      	adds	r3, r1, r3
 801513e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        }
        USBD_CtlContinueSendData (pdev, 
 8015142:	4620      	mov	r0, r4
 8015144:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8015148:	b292      	uxth	r2, r2
 801514a:	f000 f8b5 	bl	80152b8 <USBD_CtlContinueSendData>
 801514e:	e01f      	b.n	8015190 <USBD_DataInStage+0x80>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8015150:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c
 8015154:	fbb5 f6f3 	udiv	r6, r5, r3
 8015158:	fb03 5616 	mls	r6, r3, r6, r5
 801515c:	b95e      	cbnz	r6, 8015176 <USBD_DataInStage+0x66>
 801515e:	429d      	cmp	r5, r3
 8015160:	d309      	bcc.n	8015176 <USBD_DataInStage+0x66>
           (ep->total_data_len >= ep->maxpacket) &&
 8015162:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8015166:	4295      	cmp	r5, r2
 8015168:	d205      	bcs.n	8015176 <USBD_DataInStage+0x66>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 801516a:	4632      	mov	r2, r6
 801516c:	f000 f8a4 	bl	80152b8 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8015170:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8015174:	e00c      	b.n	8015190 <USBD_DataInStage+0x80>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8015176:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801517a:	68c1      	ldr	r1, [r0, #12]
 801517c:	b129      	cbz	r1, 801518a <USBD_DataInStage+0x7a>
 801517e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8015182:	2b03      	cmp	r3, #3
 8015184:	d101      	bne.n	801518a <USBD_DataInStage+0x7a>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8015186:	4620      	mov	r0, r4
 8015188:	4788      	blx	r1
          }          
          USBD_CtlReceiveStatus(pdev);
 801518a:	4620      	mov	r0, r4
 801518c:	f000 f8b5 	bl	80152fa <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8015190:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 8015194:	2a01      	cmp	r2, #1
 8015196:	d110      	bne.n	80151ba <USBD_DataInStage+0xaa>
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8015198:	4909      	ldr	r1, [pc, #36]	; (80151c0 <USBD_DataInStage+0xb0>)
 801519a:	6920      	ldr	r0, [r4, #16]
 801519c:	680b      	ldr	r3, [r1, #0]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 801519e:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 80151a0:	6043      	str	r3, [r0, #4]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 80151a2:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
 80151a6:	e008      	b.n	80151ba <USBD_DataInStage+0xaa>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80151a8:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80151ac:	695b      	ldr	r3, [r3, #20]
 80151ae:	b123      	cbz	r3, 80151ba <USBD_DataInStage+0xaa>
 80151b0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80151b4:	2a03      	cmp	r2, #3
 80151b6:	d100      	bne.n	80151ba <USBD_DataInStage+0xaa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 80151b8:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80151ba:	2000      	movs	r0, #0
 80151bc:	bd70      	pop	{r4, r5, r6, pc}
 80151be:	bf00      	nop
 80151c0:	20004344 	.word	0x20004344

080151c4 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80151c4:	b510      	push	{r4, lr}
 80151c6:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80151c8:	bb59      	cbnz	r1, 8015222 <USBD_DataOutStage+0x5e>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 80151ca:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
 80151ce:	2903      	cmp	r1, #3
 80151d0:	d130      	bne.n	8015234 <USBD_DataOutStage+0x70>
    {
      if(ep->rem_data_len > ep->maxpacket)
 80151d2:	f8d0 2390 	ldr.w	r2, [r0, #912]	; 0x390
 80151d6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80151da:	429a      	cmp	r2, r3
 80151dc:	d914      	bls.n	8015208 <USBD_DataOutStage+0x44>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80151de:	1ad2      	subs	r2, r2, r3
 80151e0:	f8c0 2390 	str.w	r2, [r0, #912]	; 0x390
        
        if(pdev->cfg.dma_enable == 1)
 80151e4:	78c0      	ldrb	r0, [r0, #3]
 80151e6:	2801      	cmp	r0, #1
 80151e8:	d104      	bne.n	80151f4 <USBD_DataOutStage+0x30>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 80151ea:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 80151ee:	18c8      	adds	r0, r1, r3
 80151f0:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80151f4:	429a      	cmp	r2, r3
 80151f6:	bf28      	it	cs
 80151f8:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80151fa:	4620      	mov	r0, r4
 80151fc:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8015200:	b292      	uxth	r2, r2
 8015202:	f000 f862 	bl	80152ca <USBD_CtlContinueRx>
 8015206:	e015      	b.n	8015234 <USBD_DataOutStage+0x70>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8015208:	f8d0 15e4 	ldr.w	r1, [r0, #1508]	; 0x5e4
 801520c:	690b      	ldr	r3, [r1, #16]
 801520e:	b123      	cbz	r3, 801521a <USBD_DataOutStage+0x56>
 8015210:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015214:	2a03      	cmp	r2, #3
 8015216:	d100      	bne.n	801521a <USBD_DataOutStage+0x56>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8015218:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801521a:	4620      	mov	r0, r4
 801521c:	f000 f85e 	bl	80152dc <USBD_CtlSendStatus>
 8015220:	e008      	b.n	8015234 <USBD_DataOutStage+0x70>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8015222:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015226:	699b      	ldr	r3, [r3, #24]
 8015228:	b123      	cbz	r3, 8015234 <USBD_DataOutStage+0x70>
 801522a:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 801522e:	2a03      	cmp	r2, #3
 8015230:	d100      	bne.n	8015234 <USBD_DataOutStage+0x70>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8015232:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8015234:	2000      	movs	r0, #0
 8015236:	bd10      	pop	{r4, pc}

08015238 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8015238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801523c:	9f06      	ldr	r7, [sp, #24]
 801523e:	4604      	mov	r4, r0
 8015240:	4616      	mov	r6, r2
 8015242:	4698      	mov	r8, r3
 8015244:	460d      	mov	r5, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8015246:	f7fe f983 	bl	8013550 <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801524a:	4620      	mov	r0, r4
 801524c:	4629      	mov	r1, r5
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 801524e:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8015252:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8015256:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801525a:	f001 fdf2 	bl	8016e42 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 801525e:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8015262:	6818      	ldr	r0, [r3, #0]
 8015264:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8015266:	4620      	mov	r0, r4
}
 8015268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 801526c:	f7fe b9be 	b.w	80135ec <USB_OTG_BSP_EnableInterrupt>

08015270 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8015270:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8015274:	b510      	push	{r4, lr}
 8015276:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8015278:	681a      	ldr	r2, [r3, #0]
 801527a:	4790      	blx	r2
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 801527c:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
 8015280:	6881      	ldr	r1, [r0, #8]
 8015282:	4788      	blx	r1
  return USBD_OK; 
}
 8015284:	2000      	movs	r0, #0
 8015286:	bd10      	pop	{r4, pc}

08015288 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8015288:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 801528a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 801528e:	685a      	ldr	r2, [r3, #4]
 8015290:	4790      	blx	r2
  return USBD_OK;
}
 8015292:	2000      	movs	r0, #0
 8015294:	bd08      	pop	{r3, pc}

08015296 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8015296:	b538      	push	{r3, r4, r5, lr}
 8015298:	4604      	mov	r4, r0
 801529a:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 801529c:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 80152a0:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80152a4:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 80152a6:	2202      	movs	r2, #2
 80152a8:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 80152ac:	2100      	movs	r1, #0
 80152ae:	462a      	mov	r2, r5
 80152b0:	f001 fe69 	bl	8016f86 <DCD_EP_Tx>
 
  return ret;
}
 80152b4:	2000      	movs	r0, #0
 80152b6:	bd38      	pop	{r3, r4, r5, pc}

080152b8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80152b8:	b510      	push	{r4, lr}
 80152ba:	460c      	mov	r4, r1
 80152bc:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 80152be:	2100      	movs	r1, #0
 80152c0:	4622      	mov	r2, r4
 80152c2:	f001 fe60 	bl	8016f86 <DCD_EP_Tx>
  
  
  return ret;
}
 80152c6:	2000      	movs	r0, #0
 80152c8:	bd10      	pop	{r4, pc}

080152ca <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80152ca:	b510      	push	{r4, lr}
 80152cc:	460c      	mov	r4, r1
 80152ce:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 80152d0:	2100      	movs	r1, #0
 80152d2:	4622      	mov	r2, r4
 80152d4:	f001 fe3a 	bl	8016f4c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 80152d8:	2000      	movs	r0, #0
 80152da:	bd10      	pop	{r4, pc}

080152dc <USBD_CtlSendStatus>:
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80152dc:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80152de:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80152e0:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80152e2:	460a      	mov	r2, r1
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80152e4:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80152e6:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80152ea:	460b      	mov	r3, r1
 80152ec:	f001 fe4b 	bl	8016f86 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 80152f0:	4620      	mov	r0, r4
 80152f2:	f001 fd88 	bl	8016e06 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80152f6:	2000      	movs	r0, #0
 80152f8:	bd10      	pop	{r4, pc}

080152fa <USBD_CtlReceiveStatus>:
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80152fa:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80152fc:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80152fe:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8015300:	460a      	mov	r2, r1
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8015302:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8015304:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8015308:	460b      	mov	r3, r1
 801530a:	f001 fe1f 	bl	8016f4c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 801530e:	4620      	mov	r0, r4
 8015310:	f001 fd79 	bl	8016e06 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 8015314:	2000      	movs	r0, #0
 8015316:	bd10      	pop	{r4, pc}

08015318 <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8015318:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 801531c:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 801531e:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 8015322:	704a      	strb	r2, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8015324:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 8015328:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 801532c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8015330:	804a      	strh	r2, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8015332:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 8015336:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 801533a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801533e:	808a      	strh	r2, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8015340:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 8015344:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 8015348:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801534c:	b293      	uxth	r3, r2
 801534e:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8015350:	2101      	movs	r1, #1
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8015352:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8015356:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
 801535a:	4770      	bx	lr

0801535c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 801535c:	b510      	push	{r4, lr}
  
  DCD_EP_Stall(pdev , 0x80);
 801535e:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8015360:	4604      	mov	r4, r0
  
  DCD_EP_Stall(pdev , 0x80);
 8015362:	f001 fe2b 	bl	8016fbc <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8015366:	4620      	mov	r0, r4
 8015368:	2100      	movs	r1, #0
 801536a:	f001 fe27 	bl	8016fbc <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 801536e:	4620      	mov	r0, r4
}
 8015370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
  DCD_EP_Stall(pdev , 0);
  USB_OTG_EP0_OutStart(pdev);  
 8015374:	f001 bd47 	b.w	8016e06 <USB_OTG_EP0_OutStart>

08015378 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015378:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 801537a:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 801537c:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 801537e:	2e01      	cmp	r6, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015380:	4604      	mov	r4, r0
 8015382:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 8015384:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8015386:	d011      	beq.n	80153ac <USBD_StdEPReq+0x34>
 8015388:	d329      	bcc.n	80153de <USBD_StdEPReq+0x66>
 801538a:	2e03      	cmp	r6, #3
 801538c:	d151      	bne.n	8015432 <USBD_StdEPReq+0xba>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 801538e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015392:	2a02      	cmp	r2, #2
 8015394:	d02a      	beq.n	80153ec <USBD_StdEPReq+0x74>
 8015396:	2a03      	cmp	r2, #3
 8015398:	d149      	bne.n	801542e <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801539a:	8849      	ldrh	r1, [r1, #2]
 801539c:	b9a9      	cbnz	r1, 80153ca <USBD_StdEPReq+0x52>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801539e:	b1a3      	cbz	r3, 80153ca <USBD_StdEPReq+0x52>
 80153a0:	2b80      	cmp	r3, #128	; 0x80
 80153a2:	d012      	beq.n	80153ca <USBD_StdEPReq+0x52>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80153a4:	4619      	mov	r1, r3
 80153a6:	f001 fe09 	bl	8016fbc <DCD_EP_Stall>
 80153aa:	e00e      	b.n	80153ca <USBD_StdEPReq+0x52>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80153ac:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80153b0:	2a02      	cmp	r2, #2
 80153b2:	d01b      	beq.n	80153ec <USBD_StdEPReq+0x74>
 80153b4:	2a03      	cmp	r2, #3
 80153b6:	d13a      	bne.n	801542e <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80153b8:	8849      	ldrh	r1, [r1, #2]
 80153ba:	2900      	cmp	r1, #0
 80153bc:	d139      	bne.n	8015432 <USBD_StdEPReq+0xba>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80153be:	b153      	cbz	r3, 80153d6 <USBD_StdEPReq+0x5e>
 80153c0:	2b80      	cmp	r3, #128	; 0x80
 80153c2:	d008      	beq.n	80153d6 <USBD_StdEPReq+0x5e>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 80153c4:	4619      	mov	r1, r3
 80153c6:	f001 fe17 	bl	8016ff8 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 80153ca:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 80153ce:	4629      	mov	r1, r5
 80153d0:	6883      	ldr	r3, [r0, #8]
 80153d2:	4620      	mov	r0, r4
 80153d4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80153d6:	4620      	mov	r0, r4
 80153d8:	f7ff ff80 	bl	80152dc <USBD_CtlSendStatus>
 80153dc:	e029      	b.n	8015432 <USBD_StdEPReq+0xba>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 80153de:	f890 5112 	ldrb.w	r5, [r0, #274]	; 0x112
 80153e2:	2d02      	cmp	r5, #2
 80153e4:	d002      	beq.n	80153ec <USBD_StdEPReq+0x74>
 80153e6:	2d03      	cmp	r5, #3
 80153e8:	d121      	bne.n	801542e <USBD_StdEPReq+0xb6>
 80153ea:	e006      	b.n	80153fa <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80153ec:	b30b      	cbz	r3, 8015432 <USBD_StdEPReq+0xba>
 80153ee:	2b80      	cmp	r3, #128	; 0x80
 80153f0:	d01f      	beq.n	8015432 <USBD_StdEPReq+0xba>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80153f2:	4619      	mov	r1, r3
 80153f4:	f001 fde2 	bl	8016fbc <DCD_EP_Stall>
 80153f8:	e01b      	b.n	8015432 <USBD_StdEPReq+0xba>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 80153fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80153fe:	f04f 0028 	mov.w	r0, #40	; 0x28
 8015402:	d006      	beq.n	8015412 <USBD_StdEPReq+0x9a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8015404:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015408:	fb00 4102 	mla	r1, r0, r2, r4
 801540c:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 8015410:	e003      	b.n	801541a <USBD_StdEPReq+0xa2>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8015412:	fb00 4303 	mla	r3, r0, r3, r4
 8015416:	f893 3376 	ldrb.w	r3, [r3, #886]	; 0x376
 801541a:	4807      	ldr	r0, [pc, #28]	; (8015438 <USBD_StdEPReq+0xc0>)
 801541c:	b103      	cbz	r3, 8015420 <USBD_StdEPReq+0xa8>
        {
          USBD_ep_status = 0x0001;     
 801541e:	2301      	movs	r3, #1
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8015420:	6003      	str	r3, [r0, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 8015422:	4905      	ldr	r1, [pc, #20]	; (8015438 <USBD_StdEPReq+0xc0>)
 8015424:	4620      	mov	r0, r4
 8015426:	2202      	movs	r2, #2
 8015428:	f7ff ff35 	bl	8015296 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 801542c:	e001      	b.n	8015432 <USBD_StdEPReq+0xba>
      
    default:                         
       USBD_CtlError(pdev , req);
 801542e:	f7ff ff95 	bl	801535c <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8015432:	2000      	movs	r0, #0
 8015434:	bd70      	pop	{r4, r5, r6, pc}
 8015436:	bf00      	nop
 8015438:	20000604 	.word	0x20000604

0801543c <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801543c:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 801543e:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8015442:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015444:	4604      	mov	r4, r0
 8015446:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 8015448:	d10c      	bne.n	8015464 <USBD_StdItfReq+0x28>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 801544a:	790a      	ldrb	r2, [r1, #4]
 801544c:	2a01      	cmp	r2, #1
 801544e:	d809      	bhi.n	8015464 <USBD_StdItfReq+0x28>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8015450:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015454:	689a      	ldr	r2, [r3, #8]
 8015456:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8015458:	88e8      	ldrh	r0, [r5, #6]
 801545a:	b928      	cbnz	r0, 8015468 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 801545c:	4620      	mov	r0, r4
 801545e:	f7ff ff3d 	bl	80152dc <USBD_CtlSendStatus>
 8015462:	e001      	b.n	8015468 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8015464:	f7ff ff7a 	bl	801535c <USBD_CtlError>
    break;
  }
  return ret;
}
 8015468:	2000      	movs	r0, #0
 801546a:	bd38      	pop	{r3, r4, r5, pc}

0801546c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801546c:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 801546e:	784b      	ldrb	r3, [r1, #1]
 8015470:	2b05      	cmp	r3, #5
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015472:	b0a2      	sub	sp, #136	; 0x88
 8015474:	4604      	mov	r4, r0
 8015476:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 8015478:	f000 8083 	beq.w	8015582 <USBD_StdDevReq+0x116>
 801547c:	d808      	bhi.n	8015490 <USBD_StdDevReq+0x24>
 801547e:	2b01      	cmp	r3, #1
 8015480:	f000 8115 	beq.w	80156ae <USBD_StdDevReq+0x242>
 8015484:	f0c0 80da 	bcc.w	801563c <USBD_StdDevReq+0x1d0>
 8015488:	2b03      	cmp	r3, #3
 801548a:	f040 8133 	bne.w	80156f4 <USBD_StdDevReq+0x288>
 801548e:	e0e6      	b.n	801565e <USBD_StdDevReq+0x1f2>
 8015490:	2b08      	cmp	r3, #8
 8015492:	f000 80c5 	beq.w	8015620 <USBD_StdDevReq+0x1b4>
 8015496:	d803      	bhi.n	80154a0 <USBD_StdDevReq+0x34>
 8015498:	2b06      	cmp	r3, #6
 801549a:	f040 812b 	bne.w	80156f4 <USBD_StdDevReq+0x288>
 801549e:	e006      	b.n	80154ae <USBD_StdDevReq+0x42>
 80154a0:	2b09      	cmp	r3, #9
 80154a2:	f000 808e 	beq.w	80155c2 <USBD_StdDevReq+0x156>
 80154a6:	2b55      	cmp	r3, #85	; 0x55
 80154a8:	f040 8124 	bne.w	80156f4 <USBD_StdDevReq+0x288>
 80154ac:	e10f      	b.n	80156ce <USBD_StdDevReq+0x262>
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 80154ae:	8848      	ldrh	r0, [r1, #2]
 80154b0:	0a01      	lsrs	r1, r0, #8
 80154b2:	1e4b      	subs	r3, r1, #1
 80154b4:	2b06      	cmp	r3, #6
 80154b6:	f200 811d 	bhi.w	80156f4 <USBD_StdDevReq+0x288>
 80154ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80154be:	0007      	.short	0x0007
 80154c0:	0027001a 	.word	0x0027001a
 80154c4:	011b011b 	.word	0x011b011b
 80154c8:	011b011b 	.word	0x011b011b
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 80154cc:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80154d0:	78a0      	ldrb	r0, [r4, #2]
 80154d2:	680a      	ldr	r2, [r1, #0]
 80154d4:	f10d 0106 	add.w	r1, sp, #6
 80154d8:	4790      	blx	r2
 80154da:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 80154dc:	88e8      	ldrh	r0, [r5, #6]
 80154de:	2840      	cmp	r0, #64	; 0x40
 80154e0:	d003      	beq.n	80154ea <USBD_StdDevReq+0x7e>
 80154e2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80154e6:	2b01      	cmp	r3, #1
 80154e8:	d13b      	bne.n	8015562 <USBD_StdDevReq+0xf6>
    {                  
      len = 8;
 80154ea:	2208      	movs	r2, #8
 80154ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 80154f0:	e037      	b.n	8015562 <USBD_StdDevReq+0xf6>
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80154f2:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 80154f6:	f10d 0106 	add.w	r1, sp, #6
 80154fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80154fc:	78a0      	ldrb	r0, [r4, #2]
 80154fe:	4790      	blx	r2
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015500:	2302      	movs	r3, #2
 8015502:	7043      	strb	r3, [r0, #1]
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8015504:	4601      	mov	r1, r0
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    pdev->dev.pConfig_descriptor = pbuf;    
 8015506:	f8c4 05f0 	str.w	r0, [r4, #1520]	; 0x5f0
 801550a:	e02a      	b.n	8015562 <USBD_StdDevReq+0xf6>
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801550c:	b2c1      	uxtb	r1, r0
 801550e:	78a0      	ldrb	r0, [r4, #2]
 8015510:	2905      	cmp	r1, #5
 8015512:	d81f      	bhi.n	8015554 <USBD_StdDevReq+0xe8>
 8015514:	e8df f001 	tbb	[pc, r1]
 8015518:	0f0b0703 	.word	0x0f0b0703
 801551c:	1713      	.short	0x1713
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 801551e:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 8015522:	6853      	ldr	r3, [r2, #4]
 8015524:	e012      	b.n	801554c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8015526:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 801552a:	688b      	ldr	r3, [r1, #8]
 801552c:	e00e      	b.n	801554c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 801552e:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	e00a      	b.n	801554c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8015536:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 801553a:	6913      	ldr	r3, [r2, #16]
 801553c:	e006      	b.n	801554c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 801553e:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 8015542:	694b      	ldr	r3, [r1, #20]
 8015544:	e002      	b.n	801554c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8015546:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 801554a:	6993      	ldr	r3, [r2, #24]
 801554c:	f10d 0106 	add.w	r1, sp, #6
 8015550:	4798      	blx	r3
 8015552:	e005      	b.n	8015560 <USBD_StdDevReq+0xf4>
      break;
      
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
 8015554:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8015558:	f10d 0206 	add.w	r2, sp, #6
 801555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555e:	4798      	blx	r3
 8015560:	4601      	mov	r1, r0
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8015562:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015566:	2800      	cmp	r0, #0
 8015568:	f000 80c8 	beq.w	80156fc <USBD_StdDevReq+0x290>
 801556c:	88ea      	ldrh	r2, [r5, #6]
 801556e:	2a00      	cmp	r2, #0
 8015570:	f000 80c4 	beq.w	80156fc <USBD_StdDevReq+0x290>
  {
    
    len = MIN(len , req->wLength);
 8015574:	4282      	cmp	r2, r0
 8015576:	bf28      	it	cs
 8015578:	4602      	movcs	r2, r0
 801557a:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 801557e:	4620      	mov	r0, r4
 8015580:	e0b5      	b.n	80156ee <USBD_StdDevReq+0x282>
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8015582:	888a      	ldrh	r2, [r1, #4]
 8015584:	2a00      	cmp	r2, #0
 8015586:	f040 80b5 	bne.w	80156f4 <USBD_StdDevReq+0x288>
 801558a:	88c9      	ldrh	r1, [r1, #6]
 801558c:	2900      	cmp	r1, #0
 801558e:	f040 80b1 	bne.w	80156f4 <USBD_StdDevReq+0x288>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8015592:	886e      	ldrh	r6, [r5, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8015594:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8015598:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 801559c:	2a03      	cmp	r2, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801559e:	461e      	mov	r6, r3
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80155a0:	f000 80a8 	beq.w	80156f4 <USBD_StdDevReq+0x288>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80155a4:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80155a8:	4619      	mov	r1, r3
 80155aa:	f001 fd43 	bl	8017034 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80155ae:	4620      	mov	r0, r4
 80155b0:	f7ff fe94 	bl	80152dc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80155b4:	b10e      	cbz	r6, 80155ba <USBD_StdDevReq+0x14e>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 80155b6:	2002      	movs	r0, #2
 80155b8:	e000      	b.n	80155bc <USBD_StdDevReq+0x150>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 80155ba:	2001      	movs	r0, #1
 80155bc:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112
 80155c0:	e09c      	b.n	80156fc <USBD_StdDevReq+0x290>
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80155c2:	788b      	ldrb	r3, [r1, #2]
 80155c4:	4a4f      	ldr	r2, [pc, #316]	; (8015704 <USBD_StdDevReq+0x298>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80155c6:	2b01      	cmp	r3, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80155c8:	7013      	strb	r3, [r2, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80155ca:	f200 8093 	bhi.w	80156f4 <USBD_StdDevReq+0x288>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 80155ce:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80155d2:	2a02      	cmp	r2, #2
 80155d4:	d003      	beq.n	80155de <USBD_StdDevReq+0x172>
 80155d6:	2a03      	cmp	r2, #3
 80155d8:	f040 808e 	bne.w	80156f8 <USBD_StdDevReq+0x28c>
 80155dc:	e008      	b.n	80155f0 <USBD_StdDevReq+0x184>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d061      	beq.n	80156a6 <USBD_StdDevReq+0x23a>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80155e2:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80155e4:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80155e6:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80155ea:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
 80155ee:	e014      	b.n	801561a <USBD_StdDevReq+0x1ae>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 80155f0:	b943      	cbnz	r3, 8015604 <USBD_StdDevReq+0x198>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 80155f2:	2102      	movs	r1, #2
 80155f4:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 80155f8:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80155fc:	4619      	mov	r1, r3
 80155fe:	f7ff fe43 	bl	8015288 <USBD_ClrCfg>
 8015602:	e050      	b.n	80156a6 <USBD_StdDevReq+0x23a>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8015604:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 8015608:	2901      	cmp	r1, #1
 801560a:	d04c      	beq.n	80156a6 <USBD_StdDevReq+0x23a>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 801560c:	f7ff fe3c 	bl	8015288 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8015610:	483c      	ldr	r0, [pc, #240]	; (8015704 <USBD_StdDevReq+0x298>)
 8015612:	7801      	ldrb	r1, [r0, #0]
        USBD_SetCfg(pdev , cfgidx);
 8015614:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8015616:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 801561a:	f7ff fe29 	bl	8015270 <USBD_SetCfg>
 801561e:	e042      	b.n	80156a6 <USBD_StdDevReq+0x23a>
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 8015620:	88ca      	ldrh	r2, [r1, #6]
 8015622:	2a01      	cmp	r2, #1
 8015624:	d166      	bne.n	80156f4 <USBD_StdDevReq+0x288>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8015626:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 801562a:	2b02      	cmp	r3, #2
 801562c:	d004      	beq.n	8015638 <USBD_StdDevReq+0x1cc>
 801562e:	2b03      	cmp	r3, #3
 8015630:	d162      	bne.n	80156f8 <USBD_StdDevReq+0x28c>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8015632:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8015636:	e05a      	b.n	80156ee <USBD_StdDevReq+0x282>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8015638:	4933      	ldr	r1, [pc, #204]	; (8015708 <USBD_StdDevReq+0x29c>)
 801563a:	e058      	b.n	80156ee <USBD_StdDevReq+0x282>
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
    
  switch (pdev->dev.device_status) 
 801563c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015640:	1e93      	subs	r3, r2, #2
 8015642:	2b01      	cmp	r3, #1
 8015644:	d858      	bhi.n	80156f8 <USBD_StdDevReq+0x28c>
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 8015646:	4831      	ldr	r0, [pc, #196]	; (801570c <USBD_StdDevReq+0x2a0>)
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8015648:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 801564c:	2100      	movs	r1, #0
 801564e:	6001      	str	r1, [r0, #0]
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8015650:	b10a      	cbz	r2, 8015656 <USBD_StdDevReq+0x1ea>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8015652:	2302      	movs	r3, #2
 8015654:	6003      	str	r3, [r0, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8015656:	4620      	mov	r0, r4
 8015658:	492c      	ldr	r1, [pc, #176]	; (801570c <USBD_StdDevReq+0x2a0>)
 801565a:	2202      	movs	r2, #2
 801565c:	e047      	b.n	80156ee <USBD_StdDevReq+0x282>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801565e:	884b      	ldrh	r3, [r1, #2]
 8015660:	2b01      	cmp	r3, #1
 8015662:	d02d      	beq.n	80156c0 <USBD_StdDevReq+0x254>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8015664:	2b02      	cmp	r3, #2
 8015666:	d149      	bne.n	80156fc <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
 8015668:	888a      	ldrh	r2, [r1, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 801566a:	f012 0fff 	tst.w	r2, #255	; 0xff
 801566e:	d145      	bne.n	80156fc <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8015670:	6900      	ldr	r0, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8015672:	0a11      	lsrs	r1, r2, #8
 8015674:	1e4a      	subs	r2, r1, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8015676:	6843      	ldr	r3, [r0, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8015678:	2a04      	cmp	r2, #4
 801567a:	d80f      	bhi.n	801569c <USBD_StdDevReq+0x230>
 801567c:	e8df f002 	tbb	[pc, r2]
 8015680:	09070503 	.word	0x09070503
 8015684:	0b          	.byte	0x0b
 8015685:	00          	.byte	0x00
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8015686:	2001      	movs	r0, #1
 8015688:	e006      	b.n	8015698 <USBD_StdDevReq+0x22c>
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 801568a:	2002      	movs	r0, #2
 801568c:	e004      	b.n	8015698 <USBD_StdDevReq+0x22c>
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 801568e:	2003      	movs	r0, #3
 8015690:	e002      	b.n	8015698 <USBD_StdDevReq+0x22c>
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8015692:	2004      	movs	r0, #4
 8015694:	e000      	b.n	8015698 <USBD_StdDevReq+0x22c>
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8015696:	2005      	movs	r0, #5
 8015698:	f360 1306 	bfi	r3, r0, #4, #3
      break;
    }
    SET_TEST_MODE = dctl;
 801569c:	491c      	ldr	r1, [pc, #112]	; (8015710 <USBD_StdDevReq+0x2a4>)
 801569e:	600b      	str	r3, [r1, #0]
    pdev->dev.test_mode = 1;
 80156a0:	2301      	movs	r3, #1
 80156a2:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 80156a6:	4620      	mov	r0, r4
 80156a8:	f7ff fe18 	bl	80152dc <USBD_CtlSendStatus>
 80156ac:	e026      	b.n	80156fc <USBD_StdDevReq+0x290>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 80156ae:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80156b2:	1e93      	subs	r3, r2, #2
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	d81f      	bhi.n	80156f8 <USBD_StdDevReq+0x28c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80156b8:	884a      	ldrh	r2, [r1, #2]
 80156ba:	2a01      	cmp	r2, #1
 80156bc:	d11e      	bne.n	80156fc <USBD_StdDevReq+0x290>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80156be:	2300      	movs	r3, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 80156c0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80156c4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 80156c8:	6893      	ldr	r3, [r2, #8]
 80156ca:	4798      	blx	r3
 80156cc:	e7eb      	b.n	80156a6 <USBD_StdDevReq+0x23a>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 80156ce:	7809      	ldrb	r1, [r1, #0]
 80156d0:	29c0      	cmp	r1, #192	; 0xc0
 80156d2:	d10f      	bne.n	80156f4 <USBD_StdDevReq+0x288>
 80156d4:	886b      	ldrh	r3, [r5, #2]
 80156d6:	b96b      	cbnz	r3, 80156f4 <USBD_StdDevReq+0x288>
 80156d8:	88ee      	ldrh	r6, [r5, #6]
 80156da:	2e80      	cmp	r6, #128	; 0x80
 80156dc:	d10a      	bne.n	80156f4 <USBD_StdDevReq+0x288>
      const uint8_t midi_indicator[128] = {
 80156de:	490d      	ldr	r1, [pc, #52]	; (8015714 <USBD_StdDevReq+0x2a8>)
 80156e0:	4632      	mov	r2, r6
 80156e2:	a802      	add	r0, sp, #8
 80156e4:	f005 fdce 	bl	801b284 <memcpy>
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x55,0x46,0x1F,
	0x00,0xD8,0x48,0x40,0x37,0x6A,0xF7,0x6A,0x00,0x30,0x00,0x00,0xC7,0x06,0x2E,0x73,
	0x4A,0x2C,0x13,0x7B,0xE9,0x7F,0x32,0x00,0x2A,0x28,0x0D,0x9B,0xFE,0x0B,0x21,0xEF,
	0x42,0x2A,0x2F,0x73,0xB5,0xB8,0xDA,0x76,0xE6,0x79,0xBF,0x0F,0xEB,0x79,0x3E,0x0B};

      USBD_CtlSendData(pdev, (uint8_t *)midi_indicator, 0x80);
 80156e8:	4620      	mov	r0, r4
 80156ea:	a902      	add	r1, sp, #8
 80156ec:	4632      	mov	r2, r6
 80156ee:	f7ff fdd2 	bl	8015296 <USBD_CtlSendData>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 80156f2:	e003      	b.n	80156fc <USBD_StdDevReq+0x290>
      USBD_CtlError(pdev , req);
    }
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80156f4:	4620      	mov	r0, r4
 80156f6:	4629      	mov	r1, r5
 80156f8:	f7ff fe30 	bl	801535c <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80156fc:	2000      	movs	r0, #0
 80156fe:	b022      	add	sp, #136	; 0x88
 8015700:	bd70      	pop	{r4, r5, r6, pc}
 8015702:	bf00      	nop
 8015704:	20000600 	.word	0x20000600
 8015708:	20000608 	.word	0x20000608
 801570c:	200005fc 	.word	0x200005fc
 8015710:	20004344 	.word	0x20004344
 8015714:	0801ba7b 	.word	0x0801ba7b

08015718 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015718:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 801571a:	b1c0      	cbz	r0, 801574e <USBD_GetString+0x36>
 801571c:	2300      	movs	r3, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 801571e:	5cc5      	ldrb	r5, [r0, r3]
 8015720:	b2dc      	uxtb	r4, r3
 8015722:	3301      	adds	r3, #1
 8015724:	2d00      	cmp	r5, #0
 8015726:	d1fa      	bne.n	801571e <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8015728:	1c63      	adds	r3, r4, #1
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 801572e:	2203      	movs	r2, #3
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
 8015730:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8015732:	704a      	strb	r2, [r1, #1]
  * @param  desc : descriptor buffer
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 8015734:	3801      	subs	r0, #1
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8015736:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
 8015738:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801573c:	b13a      	cbz	r2, 801574e <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 801573e:	1c5c      	adds	r4, r3, #1
 8015740:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8015742:	b2e2      	uxtb	r2, r4
 8015744:	3302      	adds	r3, #2
 8015746:	2400      	movs	r4, #0
 8015748:	548c      	strb	r4, [r1, r2]
 801574a:	b2db      	uxtb	r3, r3
 801574c:	e7f4      	b.n	8015738 <USBD_GetString+0x20>
 801574e:	bd30      	pop	{r4, r5, pc}

08015750 <USBH_Connected>:
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 1;
 8015750:	2301      	movs	r3, #1
 8015752:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;
}
 8015756:	2000      	movs	r0, #0
 8015758:	4770      	bx	lr

0801575a <USBH_Disconnected>:
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 0;
 801575a:	2300      	movs	r3, #0
 801575c:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;  
}
 8015760:	4618      	mov	r0, r3
 8015762:	4770      	bx	lr

08015764 <USBH_SOF>:

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
  /* This callback could be used to implement a scheduler process */
  return 0;  
}
 8015764:	2000      	movs	r0, #0
 8015766:	4770      	bx	lr

08015768 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015768:	b570      	push	{r4, r5, r6, lr}
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 801576a:	2301      	movs	r3, #1
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801576c:	2500      	movs	r5, #0
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 801576e:	2240      	movs	r2, #64	; 0x40
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015770:	460c      	mov	r4, r1
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8015772:	70cb      	strb	r3, [r1, #3]
  
  phost->Control.state = CTRL_SETUP;
 8015774:	770b      	strb	r3, [r1, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8015776:	718a      	strb	r2, [r1, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8015778:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 801577c:	4606      	mov	r6, r0
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801577e:	700d      	strb	r5, [r1, #0]
  phost->gStateBkp = HOST_IDLE; 
 8015780:	704d      	strb	r5, [r1, #1]
  phost->EnumState = ENUM_IDLE;
 8015782:	708d      	strb	r5, [r1, #2]
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8015784:	f881 5020 	strb.w	r5, [r1, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8015788:	7909      	ldrb	r1, [r1, #4]
 801578a:	f000 fb1b 	bl	8015dc4 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 801578e:	4630      	mov	r0, r6
 8015790:	7961      	ldrb	r1, [r4, #5]
 8015792:	f000 fb17 	bl	8015dc4 <USBH_Free_Channel>
  return USBH_OK;
}
 8015796:	4628      	mov	r0, r5
 8015798:	bd70      	pop	{r4, r5, r6, pc}

0801579a <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 801579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801579e:	9f06      	ldr	r7, [sp, #24]
 80157a0:	4614      	mov	r4, r2
 80157a2:	4698      	mov	r8, r3
 80157a4:	4605      	mov	r5, r0
 80157a6:	460e      	mov	r6, r1
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 80157a8:	f7fd fed2 	bl	8013550 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 80157ac:	2000      	movs	r0, #0
 80157ae:	f7fd ff3f 	bl	8013630 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 80157b2:	4621      	mov	r1, r4
 80157b4:	4628      	mov	r0, r5
 80157b6:	f7ff ffd7 	bl	8015768 <USBH_DeInit>
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
  phost->usr_cb = usr_cb;  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 80157ba:	4631      	mov	r1, r6
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 80157bc:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 80157c0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 80157c4:	4628      	mov	r0, r5
 80157c6:	f001 fe8b 	bl	80174e0 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 80157ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80157ce:	6818      	ldr	r0, [r3, #0]
 80157d0:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80157d2:	4628      	mov	r0, r5
}
 80157d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80157d8:	f7fd bf08 	b.w	80135ec <USB_OTG_BSP_EnableInterrupt>

080157dc <USBH_ErrorHandle>:
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80157dc:	1f0b      	subs	r3, r1, #4
 80157de:	2b01      	cmp	r3, #1
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 80157e0:	b510      	push	{r4, lr}
 80157e2:	4604      	mov	r4, r0
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80157e4:	d806      	bhi.n	80157f4 <USBH_ErrorHandle+0x18>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 80157e6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80157ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80157ec:	4780      	blx	r0
    phost->gState = HOST_ERROR_STATE;   
 80157ee:	210a      	movs	r1, #10
 80157f0:	7021      	strb	r1, [r4, #0]
 80157f2:	bd10      	pop	{r4, pc}
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 80157f4:	2906      	cmp	r1, #6
 80157f6:	d105      	bne.n	8015804 <USBH_ErrorHandle+0x28>
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
 80157f8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    phost->gState = HOST_ERROR_STATE;   
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
  {
    phost->gState = HOST_ERROR_STATE;  
 80157fc:	200a      	movs	r0, #10
 80157fe:	7020      	strb	r0, [r4, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 8015800:	680a      	ldr	r2, [r1, #0]
 8015802:	4790      	blx	r2
 8015804:	bd10      	pop	{r4, pc}
	...

08015808 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015808:	b570      	push	{r4, r5, r6, lr}
 801580a:	4605      	mov	r5, r0
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;

  
  switch (phost->Control.state)
 801580c:	7f08      	ldrb	r0, [r1, #28]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 801580e:	2300      	movs	r3, #0
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015810:	460c      	mov	r4, r1
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 8015812:	748b      	strb	r3, [r1, #18]

  
  switch (phost->Control.state)
 8015814:	1e41      	subs	r1, r0, #1
 8015816:	290a      	cmp	r1, #10
 8015818:	f200 80cd 	bhi.w	80159b6 <USBH_HandleControl+0x1ae>
 801581c:	e8df f001 	tbb	[pc, r1]
 8015820:	3f370e06 	.word	0x3f370e06
 8015824:	81796759 	.word	0x81796759
 8015828:	aa9a      	.short	0xaa9a
 801582a:	bc          	.byte	0xbc
 801582b:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 801582c:	4628      	mov	r0, r5
 801582e:	f104 0114 	add.w	r1, r4, #20
 8015832:	7962      	ldrb	r2, [r4, #5]
 8015834:	f000 fb05 	bl	8015e42 <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8015838:	2302      	movs	r3, #2
 801583a:	e0b4      	b.n	80159a6 <USBH_HandleControl+0x19e>
    break; 
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 801583c:	4628      	mov	r0, r5
 801583e:	7961      	ldrb	r1, [r4, #5]
 8015840:	f001 fe8e 	bl	8017560 <HCD_GetURB_State>
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8015844:	2801      	cmp	r0, #1
 8015846:	d11a      	bne.n	801587e <USBH_HandleControl+0x76>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015848:	7d22      	ldrb	r2, [r4, #20]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 801584a:	8b61      	ldrh	r1, [r4, #26]
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801584c:	f022 037f 	bic.w	r3, r2, #127	; 0x7f
 8015850:	b2d8      	uxtb	r0, r3
 8015852:	4a5a      	ldr	r2, [pc, #360]	; (80159bc <USBH_HandleControl+0x1b4>)
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8015854:	b139      	cbz	r1, 8015866 <USBH_HandleControl+0x5e>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8015856:	f241 3188 	movw	r1, #5000	; 0x1388
 801585a:	8011      	strh	r1, [r2, #0]
        if (direction == USB_D2H)
 801585c:	b108      	cbz	r0, 8015862 <USBH_HandleControl+0x5a>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 801585e:	2003      	movs	r0, #3
 8015860:	e007      	b.n	8015872 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8015862:	2005      	movs	r0, #5
 8015864:	e005      	b.n	8015872 <USBH_HandleControl+0x6a>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8015866:	2332      	movs	r3, #50	; 0x32
 8015868:	8013      	strh	r3, [r2, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 801586a:	b108      	cbz	r0, 8015870 <USBH_HandleControl+0x68>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 801586c:	2009      	movs	r0, #9
 801586e:	e000      	b.n	8015872 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8015870:	2007      	movs	r0, #7
 8015872:	7720      	strb	r0, [r4, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8015874:	4628      	mov	r0, r5
 8015876:	f001 fe6f 	bl	8017558 <HCD_GetCurrentFrame>
 801587a:	8220      	strh	r0, [r4, #16]
 801587c:	e09b      	b.n	80159b6 <USBH_HandleControl+0x1ae>
    }
    else if(URB_Status == URB_ERROR)
 801587e:	2803      	cmp	r0, #3
 8015880:	f040 8099 	bne.w	80159b6 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;     
 8015884:	210b      	movs	r1, #11
      phost->Control.status = CTRL_XACTERR;
 8015886:	2005      	movs	r0, #5
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
 8015888:	7721      	strb	r1, [r4, #28]
      phost->Control.status = CTRL_XACTERR;
 801588a:	74a0      	strb	r0, [r4, #18]
 801588c:	e093      	b.n	80159b6 <USBH_HandleControl+0x1ae>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 801588e:	7923      	ldrb	r3, [r4, #4]
 8015890:	68a1      	ldr	r1, [r4, #8]
 8015892:	89a2      	ldrh	r2, [r4, #12]
 8015894:	4628      	mov	r0, r5
 8015896:	f000 fb0b 	bl	8015eb0 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 801589a:	2304      	movs	r3, #4
 801589c:	e083      	b.n	80159a6 <USBH_HandleControl+0x19e>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 801589e:	4628      	mov	r0, r5
 80158a0:	7921      	ldrb	r1, [r4, #4]
 80158a2:	f001 fe5d 	bl	8017560 <HCD_GetURB_State>
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 80158a6:	2801      	cmp	r0, #1
 80158a8:	d102      	bne.n	80158b0 <USBH_HandleControl+0xa8>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80158aa:	2309      	movs	r3, #9
 80158ac:	7723      	strb	r3, [r4, #28]
 80158ae:	e006      	b.n	80158be <USBH_HandleControl+0xb6>
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 80158b0:	2804      	cmp	r0, #4
 80158b2:	d102      	bne.n	80158ba <USBH_HandleControl+0xb2>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 80158b4:	7862      	ldrb	r2, [r4, #1]
 80158b6:	7022      	strb	r2, [r4, #0]
 80158b8:	e07d      	b.n	80159b6 <USBH_HandleControl+0x1ae>
    }   
    else if (URB_Status == URB_ERROR)
 80158ba:	2803      	cmp	r0, #3
 80158bc:	d06a      	beq.n	8015994 <USBH_HandleControl+0x18c>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 80158be:	4628      	mov	r0, r5
 80158c0:	f001 fe4a 	bl	8017558 <HCD_GetCurrentFrame>
 80158c4:	4a3d      	ldr	r2, [pc, #244]	; (80159bc <USBH_HandleControl+0x1b4>)
 80158c6:	8a21      	ldrh	r1, [r4, #16]
 80158c8:	8813      	ldrh	r3, [r2, #0]
 80158ca:	1a40      	subs	r0, r0, r1
 80158cc:	4298      	cmp	r0, r3
 80158ce:	d972      	bls.n	80159b6 <USBH_HandleControl+0x1ae>
 80158d0:	e060      	b.n	8015994 <USBH_HandleControl+0x18c>
    }   
    break;
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 80158d2:	7963      	ldrb	r3, [r4, #5]
 80158d4:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 80158d8:	2001      	movs	r0, #1
 80158da:	f881 08a9 	strb.w	r0, [r1, #2217]	; 0x8a9
        
    USBH_CtlSendData (pdev,
 80158de:	7963      	ldrb	r3, [r4, #5]
 80158e0:	68a1      	ldr	r1, [r4, #8]
 80158e2:	89a2      	ldrh	r2, [r4, #12]
 80158e4:	4628      	mov	r0, r5
 80158e6:	f000 fac3 	bl	8015e70 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80158ea:	2306      	movs	r3, #6
 80158ec:	e05b      	b.n	80159a6 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 80158ee:	4628      	mov	r0, r5
 80158f0:	7961      	ldrb	r1, [r4, #5]
 80158f2:	f001 fe35 	bl	8017560 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 80158f6:	2801      	cmp	r0, #1
 80158f8:	d101      	bne.n	80158fe <USBH_HandleControl+0xf6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80158fa:	2307      	movs	r3, #7
 80158fc:	e053      	b.n	80159a6 <USBH_HandleControl+0x19e>
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 80158fe:	2804      	cmp	r0, #4
 8015900:	d103      	bne.n	801590a <USBH_HandleControl+0x102>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015902:	7862      	ldrb	r2, [r4, #1]
      phost->Control.state = CTRL_STALLED;  
 8015904:	230c      	movs	r3, #12
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015906:	7022      	strb	r2, [r4, #0]
 8015908:	e04d      	b.n	80159a6 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_STALLED;  
    } 
    else if  (URB_Status == URB_NOTREADY)
 801590a:	2802      	cmp	r0, #2
 801590c:	d140      	bne.n	8015990 <USBH_HandleControl+0x188>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 801590e:	2305      	movs	r3, #5
 8015910:	e049      	b.n	80159a6 <USBH_HandleControl+0x19e>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8015912:	2100      	movs	r1, #0
 8015914:	7923      	ldrb	r3, [r4, #4]
 8015916:	4628      	mov	r0, r5
 8015918:	460a      	mov	r2, r1
 801591a:	f000 fac9 	bl	8015eb0 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801591e:	2308      	movs	r3, #8
 8015920:	e041      	b.n	80159a6 <USBH_HandleControl+0x19e>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015922:	4628      	mov	r0, r5
 8015924:	7921      	ldrb	r1, [r4, #4]
 8015926:	f001 fe1b 	bl	8017560 <HCD_GetURB_State>
    
    if  ( URB_Status == URB_DONE)
 801592a:	2801      	cmp	r0, #1
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 801592c:	4606      	mov	r6, r0
    
    if  ( URB_Status == URB_DONE)
 801592e:	d027      	beq.n	8015980 <USBH_HandleControl+0x178>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.state = CTRL_COMPLETE;
    }
    
    else if (URB_Status == URB_ERROR)
 8015930:	2803      	cmp	r0, #3
 8015932:	d02f      	beq.n	8015994 <USBH_HandleControl+0x18c>
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8015934:	4628      	mov	r0, r5
 8015936:	f001 fe0f 	bl	8017558 <HCD_GetCurrentFrame>
      - phost->Control.timer) > timeout)
 801593a:	4a20      	ldr	r2, [pc, #128]	; (80159bc <USBH_HandleControl+0x1b4>)
 801593c:	8a21      	ldrh	r1, [r4, #16]
 801593e:	8813      	ldrh	r3, [r2, #0]
 8015940:	1a40      	subs	r0, r0, r1
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8015942:	4298      	cmp	r0, r3
 8015944:	d826      	bhi.n	8015994 <USBH_HandleControl+0x18c>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 8015946:	2e04      	cmp	r6, #4
 8015948:	d135      	bne.n	80159b6 <USBH_HandleControl+0x1ae>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801594a:	7861      	ldrb	r1, [r4, #1]
      phost->Control.status = CTRL_STALL;
 801594c:	74a6      	strb	r6, [r4, #18]
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801594e:	7021      	strb	r1, [r4, #0]
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
 8015950:	2003      	movs	r0, #3
 8015952:	bd70      	pop	{r4, r5, r6, pc}
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8015954:	7960      	ldrb	r0, [r4, #5]
 8015956:	3045      	adds	r0, #69	; 0x45
 8015958:	eb05 1140 	add.w	r1, r5, r0, lsl #5
    USBH_CtlSendData (pdev,
 801595c:	4628      	mov	r0, r5
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 801595e:	7a4a      	ldrb	r2, [r1, #9]
 8015960:	f082 0301 	eor.w	r3, r2, #1
 8015964:	724b      	strb	r3, [r1, #9]
    USBH_CtlSendData (pdev,
 8015966:	2100      	movs	r1, #0
 8015968:	7963      	ldrb	r3, [r4, #5]
 801596a:	460a      	mov	r2, r1
 801596c:	f000 fa80 	bl	8015e70 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015970:	230a      	movs	r3, #10
 8015972:	e018      	b.n	80159a6 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8015974:	4628      	mov	r0, r5
 8015976:	7961      	ldrb	r1, [r4, #5]
 8015978:	f001 fdf2 	bl	8017560 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 801597c:	2801      	cmp	r0, #1
 801597e:	d103      	bne.n	8015988 <USBH_HandleControl+0x180>
    { 
      phost->gState =   phost->gStateBkp; 
 8015980:	7860      	ldrb	r0, [r4, #1]
      phost->Control.state = CTRL_COMPLETE; 
 8015982:	230d      	movs	r3, #13
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp; 
 8015984:	7020      	strb	r0, [r4, #0]
 8015986:	e00e      	b.n	80159a6 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_COMPLETE; 
    }
    else if  (URB_Status == URB_NOTREADY)
 8015988:	2802      	cmp	r0, #2
 801598a:	d101      	bne.n	8015990 <USBH_HandleControl+0x188>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 801598c:	2309      	movs	r3, #9
 801598e:	e00a      	b.n	80159a6 <USBH_HandleControl+0x19e>
    }      
    else if (URB_Status == URB_ERROR)
 8015990:	2803      	cmp	r0, #3
 8015992:	d110      	bne.n	80159b6 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;      
 8015994:	230b      	movs	r3, #11
 8015996:	e006      	b.n	80159a6 <USBH_HandleControl+0x19e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015998:	7ba2      	ldrb	r2, [r4, #14]
 801599a:	1c53      	adds	r3, r2, #1
 801599c:	b2d8      	uxtb	r0, r3
 801599e:	2802      	cmp	r0, #2
 80159a0:	73a0      	strb	r0, [r4, #14]
 80159a2:	d802      	bhi.n	80159aa <USBH_HandleControl+0x1a2>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 80159a4:	2301      	movs	r3, #1
 80159a6:	7723      	strb	r3, [r4, #28]
 80159a8:	e005      	b.n	80159b6 <USBH_HandleControl+0x1ae>
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
 80159aa:	7862      	ldrb	r2, [r4, #1]
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 80159ac:	2108      	movs	r1, #8
 80159ae:	74a1      	strb	r1, [r4, #18]
      phost->gState =   phost->gStateBkp;
 80159b0:	7022      	strb	r2, [r4, #0]
      
      status = USBH_FAIL;
 80159b2:	2002      	movs	r0, #2
 80159b4:	bd70      	pop	{r4, r5, r6, pc}
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 80159b6:	2000      	movs	r0, #0
    
  default:
    break;
  }
  return status;
}
 80159b8:	bd70      	pop	{r4, r5, r6, pc}
 80159ba:	bf00      	nop
 80159bc:	2000060c 	.word	0x2000060c

080159c0 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 80159c0:	b570      	push	{r4, r5, r6, lr}
 80159c2:	b094      	sub	sp, #80	; 0x50
  volatile USBH_Status status = USBH_FAIL;
 80159c4:	2602      	movs	r6, #2
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 80159c6:	4605      	mov	r5, r0
 80159c8:	460c      	mov	r4, r1
  volatile USBH_Status status = USBH_FAIL;
 80159ca:	f88d 600f 	strb.w	r6, [sp, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 80159ce:	f001 fdc0 	bl	8017552 <HCD_IsDeviceConnected>
 80159d2:	b920      	cbnz	r0, 80159de <USBH_Process+0x1e>
 80159d4:	7823      	ldrb	r3, [r4, #0]
 80159d6:	b113      	cbz	r3, 80159de <USBH_Process+0x1e>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 80159d8:	42b3      	cmp	r3, r6
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80159da:	bf18      	it	ne
 80159dc:	7026      	strbne	r6, [r4, #0]
    }
  }
    
  switch (phost->gState)
 80159de:	7820      	ldrb	r0, [r4, #0]
 80159e0:	280a      	cmp	r0, #10
 80159e2:	f200 818b 	bhi.w	8015cfc <USBH_Process+0x33c>
 80159e6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80159ea:	000b      	.short	0x000b
 80159ec:	01720017 	.word	0x01720017
 80159f0:	00530189 	.word	0x00530189
 80159f4:	01510145 	.word	0x01510145
 80159f8:	0136015e 	.word	0x0136015e
 80159fc:	01630189 	.word	0x01630189
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8015a00:	4628      	mov	r0, r5
 8015a02:	f001 fda6 	bl	8017552 <HCD_IsDeviceConnected>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	f000 8178 	beq.w	8015cfc <USBH_Process+0x33c>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	7022      	strb	r2, [r4, #0]
      USB_OTG_BSP_mDelay(100);
 8015a10:	2064      	movs	r0, #100	; 0x64
 8015a12:	f7fd fe06 	bl	8013622 <USB_OTG_BSP_mDelay>
 8015a16:	e171      	b.n	8015cfc <USBH_Process+0x33c>
    }
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8015a18:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8015a1c:	68b0      	ldr	r0, [r6, #8]
 8015a1e:	4780      	blx	r0
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8015a20:	2100      	movs	r1, #0
 8015a22:	4628      	mov	r0, r5
 8015a24:	f000 f9b5 	bl	8015d92 <USBH_Alloc_Channel>
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8015a28:	2180      	movs	r1, #128	; 0x80
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8015a2a:	7160      	strb	r0, [r4, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	f000 f9b0 	bl	8015d92 <USBH_Alloc_Channel>
 8015a32:	7120      	strb	r0, [r4, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8015a34:	4628      	mov	r0, r5
 8015a36:	f001 fd87 	bl	8017548 <HCD_ResetPort>
 8015a3a:	4606      	mov	r6, r0
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	f040 815d 	bne.w	8015cfc <USBH_Process+0x33c>
    {
      phost->usr_cb->ResetDevice();
 8015a42:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015a46:	68cb      	ldr	r3, [r1, #12]
 8015a48:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	f001 fd76 	bl	801753c <HCD_GetCurrentSpeed>
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015a50:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
      phost->usr_cb->ResetDevice();
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8015a54:	b2c0      	uxtb	r0, r0
 8015a56:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8015a5a:	2204      	movs	r2, #4
 8015a5c:	7022      	strb	r2, [r4, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015a5e:	698b      	ldr	r3, [r1, #24]
 8015a60:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015a62:	79a0      	ldrb	r0, [r4, #6]
 8015a64:	7921      	ldrb	r1, [r4, #4]
 8015a66:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015a6a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015a6e:	9001      	str	r0, [sp, #4]
 8015a70:	9600      	str	r6, [sp, #0]
 8015a72:	4628      	mov	r0, r5
 8015a74:	f000 f946 	bl	8015d04 <USBH_Open_Channel>
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015a78:	79a0      	ldrb	r0, [r4, #6]
 8015a7a:	7961      	ldrb	r1, [r4, #5]
 8015a7c:	9001      	str	r0, [sp, #4]
 8015a7e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015a82:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015a86:	9600      	str	r6, [sp, #0]
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f000 f93b 	bl	8015d04 <USBH_Open_Channel>
 8015a8e:	e135      	b.n	8015cfc <USBH_Process+0x33c>
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  USBH_Status Status = USBH_BUSY;  
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8015a90:	78a3      	ldrb	r3, [r4, #2]
 8015a92:	2b09      	cmp	r3, #9
 8015a94:	f200 8132 	bhi.w	8015cfc <USBH_Process+0x33c>
 8015a98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015a9c:	002c000a 	.word	0x002c000a
 8015aa0:	0064003c 	.word	0x0064003c
 8015aa4:	0082006e 	.word	0x0082006e
 8015aa8:	00b4009b 	.word	0x00b4009b
 8015aac:	00d700cc 	.word	0x00d700cc
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	4621      	mov	r1, r4
 8015ab4:	2208      	movs	r2, #8
 8015ab6:	f000 fa87 	bl	8015fc8 <USBH_Get_DevDesc>
 8015aba:	4606      	mov	r6, r0
 8015abc:	2800      	cmp	r0, #0
 8015abe:	f040 811d 	bne.w	8015cfc <USBH_Process+0x33c>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 8015ac2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8015ac6:	71a0      	strb	r0, [r4, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8015ac8:	4628      	mov	r0, r5
 8015aca:	f001 fd3d 	bl	8017548 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8015ace:	79a2      	ldrb	r2, [r4, #6]
 8015ad0:	7961      	ldrb	r1, [r4, #5]
 8015ad2:	9201      	str	r2, [sp, #4]
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8015ad8:	4632      	mov	r2, r6
 8015ada:	4633      	mov	r3, r6
 8015adc:	9600      	str	r6, [sp, #0]
 8015ade:	4628      	mov	r0, r5
 8015ae0:	f000 f93a 	bl	8015d58 <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8015ae4:	79a0      	ldrb	r0, [r4, #6]
 8015ae6:	7921      	ldrb	r1, [r4, #4]
 8015ae8:	9001      	str	r0, [sp, #4]
 8015aea:	9600      	str	r6, [sp, #0]
 8015aec:	4628      	mov	r0, r5
 8015aee:	4632      	mov	r2, r6
 8015af0:	4633      	mov	r3, r6
 8015af2:	e034      	b.n	8015b5e <USBH_Process+0x19e>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8015af4:	4628      	mov	r0, r5
 8015af6:	4621      	mov	r1, r4
 8015af8:	2212      	movs	r2, #18
 8015afa:	f000 fa65 	bl	8015fc8 <USBH_Get_DevDesc>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	f040 80fc 	bne.w	8015cfc <USBH_Process+0x33c>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8015b04:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015b08:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8015b0c:	69ca      	ldr	r2, [r1, #28]
 8015b0e:	4790      	blx	r2
      phost->EnumState = ENUM_SET_ADDR;
 8015b10:	2002      	movs	r0, #2
 8015b12:	e098      	b.n	8015c46 <USBH_Process+0x286>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8015b14:	4628      	mov	r0, r5
 8015b16:	4621      	mov	r1, r4
 8015b18:	2201      	movs	r2, #1
 8015b1a:	f000 fb99 	bl	8016250 <USBH_SetAddress>
 8015b1e:	4606      	mov	r6, r0
 8015b20:	2800      	cmp	r0, #0
 8015b22:	f040 80eb 	bne.w	8015cfc <USBH_Process+0x33c>
    {
      USB_OTG_BSP_mDelay(2);
 8015b26:	2002      	movs	r0, #2
 8015b28:	f7fd fd7b 	bl	8013622 <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8015b2c:	2101      	movs	r1, #1
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8015b2e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
    {
      USB_OTG_BSP_mDelay(2);
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8015b32:	f884 1020 	strb.w	r1, [r4, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8015b36:	6a02      	ldr	r2, [r0, #32]
 8015b38:	4790      	blx	r2
      phost->EnumState = ENUM_GET_CFG_DESC;
 8015b3a:	2303      	movs	r3, #3
 8015b3c:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 8015b3e:	7921      	ldrb	r1, [r4, #4]
 8015b40:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015b44:	9600      	str	r6, [sp, #0]
 8015b46:	4633      	mov	r3, r6
 8015b48:	9601      	str	r6, [sp, #4]
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	f000 f904 	bl	8015d58 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8015b50:	7961      	ldrb	r1, [r4, #5]
 8015b52:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015b56:	9600      	str	r6, [sp, #0]
 8015b58:	9601      	str	r6, [sp, #4]
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	4633      	mov	r3, r6
 8015b5e:	f000 f8fb 	bl	8015d58 <USBH_Modify_Channel>
 8015b62:	e0cb      	b.n	8015cfc <USBH_Process+0x33c>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8015b64:	4628      	mov	r0, r5
 8015b66:	4621      	mov	r1, r4
 8015b68:	2209      	movs	r2, #9
 8015b6a:	f000 fa83 	bl	8016074 <USBH_Get_CfgDesc>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	f040 80c4 	bne.w	8015cfc <USBH_Process+0x33c>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015b74:	2004      	movs	r0, #4
 8015b76:	e066      	b.n	8015c46 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8015b78:	4628      	mov	r0, r5
 8015b7a:	4621      	mov	r1, r4
 8015b7c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015b7e:	f000 fa79 	bl	8016074 <USBH_Get_CfgDesc>
 8015b82:	2800      	cmp	r0, #0
 8015b84:	f040 80ba 	bne.w	8015cfc <USBH_Process+0x33c>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8015b88:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015b8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b92:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8015b96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b9a:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015b9c:	2005      	movs	r0, #5
 8015b9e:	e052      	b.n	8015c46 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 8015ba0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8015ba4:	b172      	cbz	r2, 8015bc4 <USBH_Process+0x204>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8015ba6:	20ff      	movs	r0, #255	; 0xff
 8015ba8:	9000      	str	r0, [sp, #0]
 8015baa:	4621      	mov	r1, r4
 8015bac:	4628      	mov	r0, r5
 8015bae:	ab04      	add	r3, sp, #16
 8015bb0:	f000 f9e2 	bl	8015f78 <USBH_Get_StringDesc>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	f040 80a1 	bne.w	8015cfc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 8015bba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015bbe:	a804      	add	r0, sp, #16
 8015bc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8015bc2:	e003      	b.n	8015bcc <USBH_Process+0x20c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 8015bc4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015bc8:	484d      	ldr	r0, [pc, #308]	; (8015d00 <USBH_Process+0x340>)
 8015bca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8015bcc:	4788      	blx	r1
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015bce:	2006      	movs	r0, #6
 8015bd0:	e039      	b.n	8015c46 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 8015bd2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015bd6:	b172      	cbz	r2, 8015bf6 <USBH_Process+0x236>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 8015bd8:	20ff      	movs	r0, #255	; 0xff
 8015bda:	9000      	str	r0, [sp, #0]
 8015bdc:	4621      	mov	r1, r4
 8015bde:	4628      	mov	r0, r5
 8015be0:	ab04      	add	r3, sp, #16
 8015be2:	f000 f9c9 	bl	8015f78 <USBH_Get_StringDesc>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f040 8088 	bne.w	8015cfc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8015bec:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015bf0:	a804      	add	r0, sp, #16
 8015bf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015bf4:	e003      	b.n	8015bfe <USBH_Process+0x23e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 8015bf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015bfa:	4841      	ldr	r0, [pc, #260]	; (8015d00 <USBH_Process+0x340>)
 8015bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015bfe:	4788      	blx	r1
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015c00:	2007      	movs	r0, #7
 8015c02:	e020      	b.n	8015c46 <USBH_Process+0x286>
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8015c04:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8015c08:	b16a      	cbz	r2, 8015c26 <USBH_Process+0x266>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8015c0a:	20ff      	movs	r0, #255	; 0xff
 8015c0c:	9000      	str	r0, [sp, #0]
 8015c0e:	4621      	mov	r1, r4
 8015c10:	4628      	mov	r0, r5
 8015c12:	ab04      	add	r3, sp, #16
 8015c14:	f000 f9b0 	bl	8015f78 <USBH_Get_StringDesc>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d16f      	bne.n	8015cfc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8015c1c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015c20:	a804      	add	r0, sp, #16
 8015c22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8015c24:	e003      	b.n	8015c2e <USBH_Process+0x26e>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 8015c26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015c2a:	4835      	ldr	r0, [pc, #212]	; (8015d00 <USBH_Process+0x340>)
 8015c2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015c2e:	4788      	blx	r1
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8015c30:	2008      	movs	r0, #8
 8015c32:	e008      	b.n	8015c46 <USBH_Process+0x286>
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 8015c34:	4628      	mov	r0, r5
 8015c36:	4621      	mov	r1, r4
 8015c38:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8015c3c:	f000 fb16 	bl	801626c <USBH_SetCfg>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d15b      	bne.n	8015cfc <USBH_Process+0x33c>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8015c44:	2009      	movs	r0, #9
 8015c46:	70a0      	strb	r0, [r4, #2]
 8015c48:	e058      	b.n	8015cfc <USBH_Process+0x33c>
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8015c4a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015c4e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8015c50:	4790      	blx	r2
      
      phost->gState  = HOST_USR_INPUT;    
 8015c52:	2208      	movs	r2, #8
 8015c54:	e051      	b.n	8015cfa <USBH_Process+0x33a>
    }
    break;
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8015c56:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015c5a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8015c5c:	4790      	blx	r2
 8015c5e:	2801      	cmp	r0, #1
 8015c60:	d14c      	bne.n	8015cfc <USBH_Process+0x33c>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8015c62:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8015c64:	4628      	mov	r0, r5
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	4621      	mov	r1, r4
 8015c6a:	4790      	blx	r2
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d145      	bne.n	8015cfc <USBH_Process+0x33c>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8015c70:	2205      	movs	r2, #5
 8015c72:	e042      	b.n	8015cfa <USBH_Process+0x33a>
    }   
    break;
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8015c74:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8015c76:	4628      	mov	r0, r5
 8015c78:	688a      	ldr	r2, [r1, #8]
 8015c7a:	4621      	mov	r1, r4
 8015c7c:	4790      	blx	r2
 8015c7e:	f88d 000f 	strb.w	r0, [sp, #15]
    
     if(status == USBH_OK)
 8015c82:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8015c86:	b940      	cbnz	r0, 8015c9a <USBH_Process+0x2da>
     {
       phost->gState  = HOST_CLASS;
 8015c88:	2206      	movs	r2, #6
 8015c8a:	e036      	b.n	8015cfa <USBH_Process+0x33a>
 
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8015c8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8015c8e:	4621      	mov	r1, r4
 8015c90:	68c3      	ldr	r3, [r0, #12]
 8015c92:	4628      	mov	r0, r5
 8015c94:	4798      	blx	r3
 8015c96:	f88d 000f 	strb.w	r0, [sp, #15]
    USBH_ErrorHandle(phost, status);
 8015c9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f7ff fd9c 	bl	80157dc <USBH_ErrorHandle>
    break;       
 8015ca4:	e02a      	b.n	8015cfc <USBH_Process+0x33c>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	4621      	mov	r1, r4
 8015caa:	f7ff fdad 	bl	8015808 <USBH_HandleControl>
    break;
 8015cae:	e025      	b.n	8015cfc <USBH_Process+0x33c>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8015cb0:	4621      	mov	r1, r4
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f7ff fd58 	bl	8015768 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8015cb8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015cbc:	684b      	ldr	r3, [r1, #4]
 8015cbe:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8015cc0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8015cc2:	f104 0120 	add.w	r1, r4, #32
 8015cc6:	6842      	ldr	r2, [r0, #4]
 8015cc8:	4628      	mov	r0, r5
 8015cca:	4790      	blx	r2
    break;
 8015ccc:	e016      	b.n	8015cfc <USBH_Process+0x33c>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8015cce:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015cd2:	690b      	ldr	r3, [r1, #16]
 8015cd4:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8015cd6:	4621      	mov	r1, r4
 8015cd8:	4628      	mov	r0, r5
 8015cda:	f7ff fd45 	bl	8015768 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8015cde:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015ce2:	6850      	ldr	r0, [r2, #4]
 8015ce4:	4780      	blx	r0
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8015ce6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8015ce8:	4628      	mov	r0, r5
 8015cea:	684b      	ldr	r3, [r1, #4]
 8015cec:	f104 0120 	add.w	r1, r4, #32
 8015cf0:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8015cf2:	4628      	mov	r0, r5
 8015cf4:	f000 f872 	bl	8015ddc <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	7022      	strb	r2, [r4, #0]
    
  default :
    break;
  }

}
 8015cfc:	b014      	add	sp, #80	; 0x50
 8015cfe:	bd70      	pop	{r4, r5, r6, pc}
 8015d00:	0801bafb 	.word	0x0801bafb

08015d04 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015d04:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8015d06:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 8015d0a:	f8b4 5a70 	ldrh.w	r5, [r4, #2672]	; 0xa70
 8015d0e:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 8015d12:	f005 067f 	and.w	r6, r5, #127	; 0x7f
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015d16:	f884 2890 	strb.w	r2, [r4, #2192]	; 0x890
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8015d1a:	f89d 2010 	ldrb.w	r2, [sp, #16]
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8015d1e:	f884 6891 	strb.w	r6, [r4, #2193]	; 0x891
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8015d22:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 8015d26:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8015d2a:	f884 2895 	strb.w	r2, [r4, #2197]	; 0x895
  pdev->host.hc[hc_num].max_packet = mps; 
 8015d2e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  pdev->host.hc[hc_num].speed = speed; 
 8015d32:	f884 3893 	strb.w	r3, [r4, #2195]	; 0x893
  pdev->host.hc[hc_num].toggle_in = 0; 
 8015d36:	f101 0245 	add.w	r2, r1, #69	; 0x45
 8015d3a:	eb00 1242 	add.w	r2, r0, r2, lsl #5

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
  pdev->host.hc[hc_num].max_packet = mps; 
 8015d3e:	f8a4 5896 	strh.w	r5, [r4, #2198]	; 0x896
  pdev->host.hc[hc_num].speed = speed; 
  pdev->host.hc[hc_num].toggle_in = 0; 
 8015d42:	2500      	movs	r5, #0
 8015d44:	7215      	strb	r5, [r2, #8]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8015d46:	7255      	strb	r5, [r2, #9]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8015d48:	b913      	cbnz	r3, 8015d50 <USBH_Open_Channel+0x4c>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	f884 3894 	strb.w	r3, [r4, #2196]	; 0x894
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8015d50:	f000 fcde 	bl	8016710 <USB_OTG_HC_Init>
  
  return HC_OK; 

}
 8015d54:	2000      	movs	r0, #0
 8015d56:	bd70      	pop	{r4, r5, r6, pc}

08015d58 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8015d58:	b570      	push	{r4, r5, r6, lr}
 8015d5a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  
  if(dev_address != 0)
 8015d5e:	b11a      	cbz	r2, 8015d68 <USBH_Modify_Channel+0x10>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8015d60:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8015d64:	f885 2890 	strb.w	r2, [r5, #2192]	; 0x890
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8015d68:	014a      	lsls	r2, r1, #5
 8015d6a:	1885      	adds	r5, r0, r2
 8015d6c:	f8b5 6896 	ldrh.w	r6, [r5, #2198]	; 0x896
 8015d70:	42a6      	cmp	r6, r4
 8015d72:	d002      	beq.n	8015d7a <USBH_Modify_Channel+0x22>
 8015d74:	b10c      	cbz	r4, 8015d7a <USBH_Modify_Channel+0x22>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8015d76:	f8a5 4896 	strh.w	r4, [r5, #2198]	; 0x896
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8015d7a:	1882      	adds	r2, r0, r2
 8015d7c:	f892 4893 	ldrb.w	r4, [r2, #2195]	; 0x893
 8015d80:	429c      	cmp	r4, r3
 8015d82:	d002      	beq.n	8015d8a <USBH_Modify_Channel+0x32>
 8015d84:	b10b      	cbz	r3, 8015d8a <USBH_Modify_Channel+0x32>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8015d86:	f882 3893 	strb.w	r3, [r2, #2195]	; 0x893
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8015d8a:	f000 fcc1 	bl	8016710 <USB_OTG_HC_Init>
  return HC_OK; 

}
 8015d8e:	2000      	movs	r0, #0
 8015d90:	bd70      	pop	{r4, r5, r6, pc}

08015d92 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8015d92:	b510      	push	{r4, lr}
 8015d94:	2300      	movs	r3, #0
  * @brief  USBH_Alloc_Channel
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
 8015d96:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8015d9a:	b2da      	uxtb	r2, r3
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8015d9c:	f9b4 4a70 	ldrsh.w	r4, [r4, #2672]	; 0xa70
 8015da0:	2c00      	cmp	r4, #0
 8015da2:	db08      	blt.n	8015db6 <USBH_Alloc_Channel+0x24>
  
  hc_num =  USBH_GetFreeChannel(pdev);

  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8015da4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015da8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8015dac:	ea6f 4351 	mvn.w	r3, r1, lsr #17
 8015db0:	f8a0 3a70 	strh.w	r3, [r0, #2672]	; 0xa70
 8015db4:	e004      	b.n	8015dc0 <USBH_Alloc_Channel+0x2e>
 8015db6:	3301      	adds	r3, #1
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8015db8:	2b08      	cmp	r3, #8
 8015dba:	d1ec      	bne.n	8015d96 <USBH_Alloc_Channel+0x4>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8015dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
  }
  return hc_num;
}
 8015dc0:	b2d0      	uxtb	r0, r2
 8015dc2:	bd10      	pop	{r4, pc}

08015dc4 <USBH_Free_Channel>:
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
   if(idx < HC_MAX)
 8015dc4:	2907      	cmp	r1, #7
 8015dc6:	d807      	bhi.n	8015dd8 <USBH_Free_Channel+0x14>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8015dc8:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8015dcc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8015dd0:	8903      	ldrh	r3, [r0, #8]
 8015dd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015dd6:	8102      	strh	r2, [r0, #8]
   }
   return USBH_OK;
}
 8015dd8:	2000      	movs	r0, #0
 8015dda:	4770      	bx	lr

08015ddc <USBH_DeAllocate_AllChannel>:
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
   {
	 pdev->host.channel[idx] = 0;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	f8a0 3a74 	strh.w	r3, [r0, #2676]	; 0xa74
 8015de2:	f8a0 3a76 	strh.w	r3, [r0, #2678]	; 0xa76
 8015de6:	f8a0 3a78 	strh.w	r3, [r0, #2680]	; 0xa78
 8015dea:	f8a0 3a7a 	strh.w	r3, [r0, #2682]	; 0xa7a
 8015dee:	f8a0 3a7c 	strh.w	r3, [r0, #2684]	; 0xa7c
 8015df2:	f8a0 3a7e 	strh.w	r3, [r0, #2686]	; 0xa7e
   }
   return USBH_OK;
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	4770      	bx	lr

08015dfa <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8015dfa:	78c8      	ldrb	r0, [r1, #3]
 8015dfc:	2801      	cmp	r0, #1
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8015dfe:	b510      	push	{r4, lr}
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8015e00:	d004      	beq.n	8015e0c <USBH_CtlReq+0x12>
 8015e02:	2802      	cmp	r0, #2
 8015e04:	f04f 0301 	mov.w	r3, #1
 8015e08:	d119      	bne.n	8015e3e <USBH_CtlReq+0x44>
 8015e0a:	e008      	b.n	8015e1e <USBH_CtlReq+0x24>
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8015e0c:	780c      	ldrb	r4, [r1, #0]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
  phost->Control.buff = buff; 
  phost->Control.length = length;
 8015e0e:	818b      	strh	r3, [r1, #12]
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8015e10:	704c      	strb	r4, [r1, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8015e12:	2407      	movs	r4, #7
 8015e14:	700c      	strb	r4, [r1, #0]
  phost->Control.buff = buff; 
 8015e16:	608a      	str	r2, [r1, #8]
  phost->Control.length = length;
  phost->Control.state = CTRL_SETUP;  
 8015e18:	7708      	strb	r0, [r1, #28]
  switch (phost->RequestState)
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
    phost->RequestState = CMD_WAIT;
 8015e1a:	2302      	movs	r3, #2
 8015e1c:	e008      	b.n	8015e30 <USBH_CtlReq+0x36>
    status = USBH_BUSY;
    break;
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
 8015e1e:	7f0a      	ldrb	r2, [r1, #28]
 8015e20:	2a0d      	cmp	r2, #13
 8015e22:	d103      	bne.n	8015e2c <USBH_CtlReq+0x32>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      phost->Control.state =CTRL_IDLE;  
 8015e24:	2000      	movs	r0, #0
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8015e26:	70cb      	strb	r3, [r1, #3]
      phost->Control.state =CTRL_IDLE;  
 8015e28:	7708      	strb	r0, [r1, #28]
 8015e2a:	bd10      	pop	{r4, pc}
      status = USBH_OK;      
    }
    else if  (phost->Control.state == CTRL_ERROR)
 8015e2c:	2a0b      	cmp	r2, #11
 8015e2e:	d101      	bne.n	8015e34 <USBH_CtlReq+0x3a>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 8015e30:	70cb      	strb	r3, [r1, #3]
 8015e32:	bd10      	pop	{r4, pc}
      status = USBH_FAIL;
    }   
     else if  (phost->Control.state == CTRL_STALLED )
 8015e34:	2a0c      	cmp	r2, #12
 8015e36:	d102      	bne.n	8015e3e <USBH_CtlReq+0x44>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8015e38:	70cb      	strb	r3, [r1, #3]
      status = USBH_NOT_SUPPORTED;
 8015e3a:	2003      	movs	r0, #3
 8015e3c:	bd10      	pop	{r4, pc}
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
 8015e3e:	4618      	mov	r0, r3
    
  default:
    break; 
  }
  return status;
}
 8015e40:	bd10      	pop	{r4, pc}

08015e42 <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8015e42:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8015e44:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8015e48:	2500      	movs	r5, #0
 8015e4a:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8015e4e:	f102 0515 	add.w	r5, r2, #21
 8015e52:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 8015e56:	2503      	movs	r5, #3
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015e58:	f8c3 15fc 	str.w	r1, [r3, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 8015e5c:	2108      	movs	r1, #8
 8015e5e:	f8c4 18a0 	str.w	r1, [r4, #2208]	; 0x8a0
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8015e62:	f883 55f8 	strb.w	r5, [r3, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 8015e66:	4611      	mov	r1, r2
 8015e68:	f001 fb7e 	bl	8017568 <HCD_SubmitRequest>
}
 8015e6c:	b2c0      	uxtb	r0, r0
 8015e6e:	bd38      	pop	{r3, r4, r5, pc}

08015e70 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8015e70:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8015e72:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8015e76:	2500      	movs	r5, #0
 8015e78:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015e7c:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
 8015e80:	4625      	mov	r5, r4
  pdev->host.hc[hc_num].xfer_len = length;
 8015e82:	f8c4 28a0 	str.w	r2, [r4, #2208]	; 0x8a0
 
  if ( length == 0 )
 8015e86:	b912      	cbnz	r2, 8015e8e <USBH_CtlSendData+0x1e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8015e88:	2101      	movs	r1, #1
 8015e8a:	f884 18a9 	strb.w	r1, [r4, #2217]	; 0x8a9
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8015e8e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8015e92:	f892 18a9 	ldrb.w	r1, [r2, #2217]	; 0x8a9
 8015e96:	f103 0215 	add.w	r2, r3, #21
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8015e9a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8015e9e:	b101      	cbz	r1, 8015ea2 <USBH_CtlSendData+0x32>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8015ea0:	2102      	movs	r1, #2
 8015ea2:	f882 15f8 	strb.w	r1, [r2, #1528]	; 0x5f8
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	f001 fb5e 	bl	8017568 <HCD_SubmitRequest>
   
  return USBH_OK;
}
 8015eac:	2000      	movs	r0, #0
 8015eae:	bd38      	pop	{r3, r4, r5, pc}

08015eb0 <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8015eb0:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;
 8015eb2:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8015eb6:	2601      	movs	r6, #1
 8015eb8:	f885 6892 	strb.w	r6, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8015ebc:	f103 0615 	add.w	r6, r3, #21
 8015ec0:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8015ec4:	2602      	movs	r6, #2
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015ec6:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
                                uint16_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8015eca:	f884 65f8 	strb.w	r6, [r4, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = length;  
 8015ece:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0

  HCD_SubmitRequest (pdev , hc_num);   
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	f001 fb48 	bl	8017568 <HCD_SubmitRequest>
  
  return USBH_OK;
  
}
 8015ed8:	2000      	movs	r0, #0
 8015eda:	bd70      	pop	{r4, r5, r6, pc}

08015edc <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8015edc:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8015ede:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8015ee2:	2400      	movs	r4, #0
 8015ee4:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015ee8:	f103 0415 	add.w	r4, r3, #21
 8015eec:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;  
 8015ef0:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015ef4:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;  

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8015ef8:	f895 18a9 	ldrb.w	r1, [r5, #2217]	; 0x8a9
 8015efc:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8015f00:	b101      	cbz	r1, 8015f04 <USBH_BulkSendData+0x28>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8015f02:	2102      	movs	r1, #2
 8015f04:	7221      	strb	r1, [r4, #8]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8015f06:	4619      	mov	r1, r3
 8015f08:	f001 fb2e 	bl	8017568 <HCD_SubmitRequest>
  return USBH_OK;
}
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	bd38      	pop	{r3, r4, r5, pc}

08015f10 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8015f10:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8015f12:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8015f16:	2401      	movs	r4, #1
 8015f18:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015f1c:	f103 0415 	add.w	r4, r3, #21
 8015f20:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 8015f24:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
  pdev->host.hc[hc_num].ep_is_in = 1;   
  pdev->host.hc[hc_num].xfer_buff = buff;
 8015f28:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8015f2c:	f895 18a8 	ldrb.w	r1, [r5, #2216]	; 0x8a8
 8015f30:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8015f34:	b101      	cbz	r1, 8015f38 <USBH_BulkReceiveData+0x28>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8015f36:	2102      	movs	r1, #2
 8015f38:	7221      	strb	r1, [r4, #8]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	f001 fb14 	bl	8017568 <HCD_SubmitRequest>
  return USBH_OK;
}
 8015f40:	2000      	movs	r0, #0
 8015f42:	bd38      	pop	{r3, r4, r5, pc}

08015f44 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8015f44:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
  phost->Control.setup.b.wValue.w = value_idx;
 8015f4a:	82cb      	strh	r3, [r1, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8015f4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8015f50:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8015f54:	9d03      	ldr	r5, [sp, #12]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015f56:	750a      	strb	r2, [r1, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015f58:	2206      	movs	r2, #6
  phost->Control.setup.b.wValue.w = value_idx;
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8015f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8015f5e:	bf0c      	ite	eq
 8015f60:	f240 4309 	movweq	r3, #1033	; 0x409
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8015f64:	2300      	movne	r3, #0
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015f66:	754a      	strb	r2, [r1, #21]
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8015f68:	830b      	strh	r3, [r1, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8015f6a:	462a      	mov	r2, r5
 8015f6c:	4623      	mov	r3, r4
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
 8015f6e:	834c      	strh	r4, [r1, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
}
 8015f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8015f74:	f7ff bf41 	b.w	8015dfa <USBH_CtlReq>

08015f78 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8015f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f7a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8015f7e:	461d      	mov	r5, r3
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8015f80:	f442 7340 	orr.w	r3, r2, #768	; 0x300
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8015f84:	f200 52f4 	addw	r2, r0, #1524	; 0x5f4
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8015f88:	e88d 0044 	stmia.w	sp, {r2, r6}
 8015f8c:	2200      	movs	r2, #0
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8015f8e:	4604      	mov	r4, r0
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8015f90:	f7ff ffd8 	bl	8015f44 <USBH_GetDescriptor>
 8015f94:	b9b8      	cbnz	r0, 8015fc6 <USBH_Get_StringDesc+0x4e>
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8015f96:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 8015f9a:	2b03      	cmp	r3, #3
 8015f9c:	d113      	bne.n	8015fc6 <USBH_Get_StringDesc+0x4e>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8015f9e:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8015fa2:	1e8a      	subs	r2, r1, #2
 8015fa4:	4296      	cmp	r6, r2
 8015fa6:	bfa8      	it	ge
 8015fa8:	4616      	movge	r6, r2
 8015faa:	b2b6      	uxth	r6, r6
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8015fac:	f204 54f6 	addw	r4, r4, #1526	; 0x5f6
    
    for (idx = 0; idx < strlength; idx+=2 )
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	42b3      	cmp	r3, r6
 8015fb4:	d205      	bcs.n	8015fc2 <USBH_Get_StringDesc+0x4a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015fb6:	5ce1      	ldrb	r1, [r4, r3]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8015fb8:	1c9a      	adds	r2, r3, #2
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015fba:	f805 1b01 	strb.w	r1, [r5], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8015fbe:	b293      	uxth	r3, r2
 8015fc0:	e7f7      	b.n	8015fb2 <USBH_Get_StringDesc+0x3a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	702b      	strb	r3, [r5, #0]
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
  }
  return status;
}
 8015fc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08015fc8 <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8015fc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8015fca:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8015fce:	4616      	mov	r6, r2
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8015fd0:	e88d 0048 	stmia.w	sp, {r3, r6}
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8015fda:	4604      	mov	r4, r0
 8015fdc:	460d      	mov	r5, r1
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8015fde:	f7ff ffb1 	bl	8015f44 <USBH_GetDescriptor>
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	d145      	bne.n	8016072 <USBH_Get_DevDesc+0xaa>
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8015fe6:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8015fea:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8015fee:	f894 15f5 	ldrb.w	r1, [r4, #1525]	; 0x5f5
 8015ff2:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8015ff6:	f894 25f7 	ldrb.w	r2, [r4, #1527]	; 0x5f7
 8015ffa:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 8015ffe:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8016002:	84a9      	strh	r1, [r5, #36]	; 0x24
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8016004:	f894 25f8 	ldrb.w	r2, [r4, #1528]	; 0x5f8
 8016008:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 801600c:	f894 35f9 	ldrb.w	r3, [r4, #1529]	; 0x5f9
 8016010:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8016014:	f894 15fa 	ldrb.w	r1, [r4, #1530]	; 0x5fa
 8016018:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 801601c:	f894 25fb 	ldrb.w	r2, [r4, #1531]	; 0x5fb
  
  if (length > 8)
 8016020:	2e08      	cmp	r6, #8
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
  dev_desc->bcdUSB             = LE16 (buf +  2);
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8016022:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  
  if (length > 8)
 8016026:	d924      	bls.n	8016072 <USBH_Get_DevDesc+0xaa>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8016028:	f894 15fd 	ldrb.w	r1, [r4, #1533]	; 0x5fd
 801602c:	f894 35fc 	ldrb.w	r3, [r4, #1532]	; 0x5fc
 8016030:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016034:	856a      	strh	r2, [r5, #42]	; 0x2a
    dev_desc->idProduct          = LE16 (buf + 10);
 8016036:	f894 15ff 	ldrb.w	r1, [r4, #1535]	; 0x5ff
 801603a:	f894 35fe 	ldrb.w	r3, [r4, #1534]	; 0x5fe
 801603e:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016042:	85aa      	strh	r2, [r5, #44]	; 0x2c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8016044:	f894 1601 	ldrb.w	r1, [r4, #1537]	; 0x601
 8016048:	f894 3600 	ldrb.w	r3, [r4, #1536]	; 0x600
 801604c:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8016050:	85ea      	strh	r2, [r5, #46]	; 0x2e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8016052:	f894 1602 	ldrb.w	r1, [r4, #1538]	; 0x602
 8016056:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 801605a:	f894 3603 	ldrb.w	r3, [r4, #1539]	; 0x603
 801605e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8016062:	f894 2604 	ldrb.w	r2, [r4, #1540]	; 0x604
 8016066:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801606a:	f894 1605 	ldrb.w	r1, [r4, #1541]	; 0x605
 801606e:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
  }
  return status;      
}
 8016072:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08016074 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016078:	4617      	mov	r7, r2
 801607a:	b08d      	sub	sp, #52	; 0x34
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 801607c:	f200 54f4 	addw	r4, r0, #1524	; 0x5f4

{
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8016080:	e88d 0090 	stmia.w	sp, {r4, r7}
 8016084:	2200      	movs	r2, #0
 8016086:	f44f 7300 	mov.w	r3, #512	; 0x200
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 801608a:	4606      	mov	r6, r0
 801608c:	460d      	mov	r5, r1
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 801608e:	f7ff ff59 	bl	8015f44 <USBH_GetDescriptor>
 8016092:	9002      	str	r0, [sp, #8]
 8016094:	2800      	cmp	r0, #0
 8016096:	f040 80d1 	bne.w	801623c <USBH_Get_CfgDesc+0x1c8>
 801609a:	9b02      	ldr	r3, [sp, #8]
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 801609c:	b29a      	uxth	r2, r3
 801609e:	42ba      	cmp	r2, r7
 80160a0:	d206      	bcs.n	80160b0 <USBH_Get_CfgDesc+0x3c>
* @param  itf_desc: Interface Descriptor address
* @param  ep_desc: Endpoint Descriptor address
* @param  length: Length of the descriptor
* @retval Status
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
 80160a2:	18f2      	adds	r2, r6, r3
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 80160a4:	4867      	ldr	r0, [pc, #412]	; (8016244 <USBH_Get_CfgDesc+0x1d0>)
 80160a6:	f892 15f4 	ldrb.w	r1, [r2, #1524]	; 0x5f4
 80160aa:	5419      	strb	r1, [r3, r0]
 80160ac:	3301      	adds	r3, #1
 80160ae:	e7f5      	b.n	801609c <USBH_Get_CfgDesc+0x28>
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80160b0:	f896 05f4 	ldrb.w	r0, [r6, #1524]	; 0x5f4
 80160b4:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80160b8:	f896 15f5 	ldrb.w	r1, [r6, #1525]	; 0x5f5
 80160bc:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80160c0:	f896 25f7 	ldrb.w	r2, [r6, #1527]	; 0x5f7
 80160c4:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 80160c8:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 80160cc:	86e8      	strh	r0, [r5, #54]	; 0x36
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80160ce:	f896 15f8 	ldrb.w	r1, [r6, #1528]	; 0x5f8
 80160d2:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80160d6:	f896 25f9 	ldrb.w	r2, [r6, #1529]	; 0x5f9
 80160da:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80160de:	f896 35fa 	ldrb.w	r3, [r6, #1530]	; 0x5fa
 80160e2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80160e6:	f896 05fb 	ldrb.w	r0, [r6, #1531]	; 0x5fb
 80160ea:	f885 003b 	strb.w	r0, [r5, #59]	; 0x3b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80160ee:	f896 25fc 	ldrb.w	r2, [r6, #1532]	; 0x5fc
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80160f2:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80160f4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80160f8:	f240 80a0 	bls.w	801623c <USBH_Get_CfgDesc+0x1c8>
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80160fc:	2902      	cmp	r1, #2
 80160fe:	d905      	bls.n	801610c <USBH_Get_CfgDesc+0x98>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8016100:	4851      	ldr	r0, [pc, #324]	; (8016248 <USBH_Get_CfgDesc+0x1d4>)
    prev_itf = 0; 
 8016102:	4952      	ldr	r1, [pc, #328]	; (801624c <USBH_Get_CfgDesc+0x1d8>)
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 8016104:	2300      	movs	r3, #0
 8016106:	8003      	strh	r3, [r0, #0]
    prev_itf = 0; 
 8016108:	700b      	strb	r3, [r1, #0]
 801610a:	e097      	b.n	801623c <USBH_Get_CfgDesc+0x1c8>
 801610c:	494f      	ldr	r1, [pc, #316]	; (801624c <USBH_Get_CfgDesc+0x1d8>)
 801610e:	484e      	ldr	r0, [pc, #312]	; (8016248 <USBH_Get_CfgDesc+0x1d4>)
 8016110:	780b      	ldrb	r3, [r1, #0]
 8016112:	f8b0 9000 	ldrh.w	r9, [r0]
 8016116:	930a      	str	r3, [sp, #40]	; 0x28
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 8016118:	2209      	movs	r2, #9
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
 801611a:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 801611c:	4291      	cmp	r1, r2
 801611e:	d9ef      	bls.n	8016100 <USBH_Get_CfgDesc+0x8c>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016120:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8016122:	18e4      	adds	r4, r4, r3
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016124:	18d2      	adds	r2, r2, r3
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8016126:	7860      	ldrb	r0, [r4, #1]
 8016128:	2804      	cmp	r0, #4
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801612a:	b292      	uxth	r2, r2
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 801612c:	d1f5      	bne.n	801611a <USBH_Get_CfgDesc+0xa6>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 801612e:	f894 b003 	ldrb.w	fp, [r4, #3]
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8016132:	78a7      	ldrb	r7, [r4, #2]
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 8016134:	f1bb 0f02 	cmp.w	fp, #2
 8016138:	d8ef      	bhi.n	801611a <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801613a:	7826      	ldrb	r6, [r4, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801613c:	7961      	ldrb	r1, [r4, #5]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801613e:	9605      	str	r6, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8016140:	7926      	ldrb	r6, [r4, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016142:	9106      	str	r1, [sp, #24]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8016144:	79a3      	ldrb	r3, [r4, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8016146:	79e0      	ldrb	r0, [r4, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016148:	7a21      	ldrb	r1, [r4, #8]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801614a:	9307      	str	r3, [sp, #28]
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 801614c:	2e02      	cmp	r6, #2
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801614e:	9008      	str	r0, [sp, #32]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016150:	9109      	str	r1, [sp, #36]	; 0x24
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8016152:	d8e2      	bhi.n	801611a <USBH_Get_CfgDesc+0xa6>
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8016154:	b2fb      	uxtb	r3, r7
          pif               = &itf_desc[if_ix];
 8016156:	b258      	sxtb	r0, r3
 8016158:	2109      	movs	r1, #9
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 801615a:	9303      	str	r3, [sp, #12]
          pif               = &itf_desc[if_ix];
 801615c:	fb01 5300 	mla	r3, r1, r0, r5
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016160:	3005      	adds	r0, #5
 8016162:	eb05 1100 	add.w	r1, r5, r0, lsl #4
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
 8016166:	333e      	adds	r3, #62	; 0x3e
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016168:	9104      	str	r1, [sp, #16]
 801616a:	f04f 0800 	mov.w	r8, #0
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 801616e:	fa4f fc88 	sxtb.w	ip, r8
 8016172:	45b4      	cmp	ip, r6
 8016174:	dad1      	bge.n	801611a <USBH_Get_CfgDesc+0xa6>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016176:	7820      	ldrb	r0, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8016178:	1824      	adds	r4, r4, r0
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801617a:	1812      	adds	r2, r2, r0
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 801617c:	7861      	ldrb	r1, [r4, #1]
 801617e:	2905      	cmp	r1, #5
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016180:	b292      	uxth	r2, r2
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8016182:	d1f4      	bne.n	801616e <USBH_Get_CfgDesc+0xfa>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016184:	9804      	ldr	r0, [sp, #16]
 8016186:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
                
                if(prev_itf != if_ix)
 801618a:	9803      	ldr	r0, [sp, #12]
 801618c:	fa4f fa80 	sxtb.w	sl, r0
 8016190:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016192:	4550      	cmp	r0, sl
 8016194:	d013      	beq.n	80161be <USBH_Get_CfgDesc+0x14a>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8016196:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8016198:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801619a:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801619c:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 801619e:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80161a2:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80161a4:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80161a6:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80161a8:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80161aa:	9808      	ldr	r0, [sp, #32]
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
                {
                  prev_itf = if_ix;
 80161ac:	970a      	str	r7, [sp, #40]	; 0x28
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80161ae:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80161b0:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80161b2:	f04f 0e04 	mov.w	lr, #4
 80161b6:	f883 e001 	strb.w	lr, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80161ba:	7218      	strb	r0, [r3, #8]
 80161bc:	e018      	b.n	80161f0 <USBH_Get_CfgDesc+0x17c>
                  prev_itf = if_ix;
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 80161be:	f894 a004 	ldrb.w	sl, [r4, #4]
 80161c2:	7960      	ldrb	r0, [r4, #5]
 80161c4:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
 80161c8:	45d1      	cmp	r9, sl
 80161ca:	dca6      	bgt.n	801611a <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80161cc:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80161ce:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80161d0:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80161d2:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80161d4:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80161d8:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80161da:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80161dc:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80161de:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80161e0:	9808      	ldr	r0, [sp, #32]
 80161e2:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80161e4:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80161e6:	f04f 0904 	mov.w	r9, #4
 80161ea:	f883 9001 	strb.w	r9, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80161ee:	7218      	strb	r0, [r3, #8]
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80161f0:	f894 9000 	ldrb.w	r9, [r4]
 80161f4:	9804      	ldr	r0, [sp, #16]
 80161f6:	f800 903c 	strb.w	r9, [r0, ip, lsl #3]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80161fa:	f894 c001 	ldrb.w	ip, [r4, #1]
 80161fe:	f881 c001 	strb.w	ip, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8016202:	78a0      	ldrb	r0, [r4, #2]
 8016204:	7088      	strb	r0, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8016206:	f894 e003 	ldrb.w	lr, [r4, #3]
 801620a:	f881 e003 	strb.w	lr, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 801620e:	f894 9005 	ldrb.w	r9, [r4, #5]
 8016212:	f894 c004 	ldrb.w	ip, [r4, #4]
 8016216:	eb0c 2009 	add.w	r0, ip, r9, lsl #8
 801621a:	8088      	strh	r0, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 801621c:	f894 e006 	ldrb.w	lr, [r4, #6]
 8016220:	f881 e006 	strb.w	lr, [r1, #6]
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 8016224:	f894 9005 	ldrb.w	r9, [r4, #5]
 8016228:	7921      	ldrb	r1, [r4, #4]
                ep_ix++;
 801622a:	f108 0801 	add.w	r8, r8, #1
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 801622e:	eb01 2009 	add.w	r0, r1, r9, lsl #8
 8016232:	fa1f f980 	uxth.w	r9, r0
                ep_ix++;
 8016236:	fa5f f888 	uxtb.w	r8, r8
 801623a:	e798      	b.n	801616e <USBH_Get_CfgDesc+0xfa>
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
}
 801623c:	9802      	ldr	r0, [sp, #8]
 801623e:	b00d      	add	sp, #52	; 0x34
 8016240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016244:	200043ac 	.word	0x200043ac
 8016248:	2000060e 	.word	0x2000060e
 801624c:	20000610 	.word	0x20000610

08016250 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8016250:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016252:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016254:	2505      	movs	r5, #5
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016256:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8016258:	4623      	mov	r3, r4
 801625a:	4622      	mov	r2, r4
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801625c:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801625e:	754d      	strb	r5, [r1, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
 8016260:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016262:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
}
 8016264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8016268:	f7ff bdc7 	b.w	8015dfa <USBH_CtlReq>

0801626c <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 801626c:	b530      	push	{r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 801626e:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016270:	2509      	movs	r5, #9
  phost->Control.setup.b.wValue.w = cfg_idx;
 8016272:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016274:	4623      	mov	r3, r4
 8016276:	4622      	mov	r2, r4
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8016278:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801627a:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
 801627c:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;           
 801627e:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
}
 8016280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016284:	f7ff bdb9 	b.w	8015dfa <USBH_CtlReq>

08016288 <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 8016288:	b530      	push	{r4, r5, lr}
 801628a:	f103 0345 	add.w	r3, r3, #69	; 0x45
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 801628e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8016292:	2402      	movs	r4, #2
 8016294:	750c      	strb	r4, [r1, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016296:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016298:	2400      	movs	r4, #0
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 801629a:	f012 0f80 	tst.w	r2, #128	; 0x80
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801629e:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
  phost->Control.setup.b.wIndex.w = ep_num;
 80162a0:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80162a2:	82cc      	strh	r4, [r1, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
 80162a4:	834c      	strh	r4, [r1, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 80162a6:	bf14      	ite	ne
 80162a8:	721c      	strbne	r4, [r3, #8]
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 80162aa:	725c      	strbeq	r4, [r3, #9]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 80162ac:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80162ae:	4625      	mov	r5, r4
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 80162b0:	4613      	mov	r3, r2
}
 80162b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 80162b6:	f7ff bda0 	b.w	8015dfa <USBH_CtlReq>
	...

080162bc <USB_OTG_EnableCommonInt>:
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 80162bc:	68c3      	ldr	r3, [r0, #12]
  int_mask.b.usbsuspend = 1; 
  
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
 80162be:	4803      	ldr	r0, [pc, #12]	; (80162cc <USB_OTG_EnableCommonInt+0x10>)
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 80162c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80162c4:	615a      	str	r2, [r3, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 80162c6:	6198      	str	r0, [r3, #24]
 80162c8:	4770      	bx	lr
 80162ca:	bf00      	nop
 80162cc:	d0000804 	.word	0xd0000804

080162d0 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80162d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80162d2:	2300      	movs	r3, #0
 80162d4:	4c10      	ldr	r4, [pc, #64]	; (8016318 <USB_OTG_CoreReset+0x48>)
 80162d6:	9301      	str	r3, [sp, #4]
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80162d8:	4605      	mov	r5, r0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80162da:	2003      	movs	r0, #3
 80162dc:	f7fd f99e 	bl	801361c <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80162e0:	68e8      	ldr	r0, [r5, #12]
 80162e2:	6902      	ldr	r2, [r0, #16]
    if (++count > 200000)
 80162e4:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80162e6:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80162e8:	d013      	beq.n	8016312 <USB_OTG_CoreReset+0x42>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 80162ea:	9901      	ldr	r1, [sp, #4]
 80162ec:	2900      	cmp	r1, #0
 80162ee:	daf4      	bge.n	80162da <USB_OTG_CoreReset+0xa>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 80162f0:	9b01      	ldr	r3, [sp, #4]
 80162f2:	f043 0201 	orr.w	r2, r3, #1
 80162f6:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80162f8:	9901      	ldr	r1, [sp, #4]
 80162fa:	4a07      	ldr	r2, [pc, #28]	; (8016318 <USB_OTG_CoreReset+0x48>)
 80162fc:	6101      	str	r1, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80162fe:	6903      	ldr	r3, [r0, #16]
    if (++count > 200000)
 8016300:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8016302:	9301      	str	r3, [sp, #4]
    if (++count > 200000)
 8016304:	d002      	beq.n	801630c <USB_OTG_CoreReset+0x3c>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8016306:	9901      	ldr	r1, [sp, #4]
 8016308:	07c9      	lsls	r1, r1, #31
 801630a:	d4f8      	bmi.n	80162fe <USB_OTG_CoreReset+0x2e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 801630c:	2003      	movs	r0, #3
 801630e:	f7fd f985 	bl	801361c <USB_OTG_BSP_uDelay>
  return status;
}
 8016312:	2000      	movs	r0, #0
 8016314:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8016316:	bf00      	nop
 8016318:	00030d41 	.word	0x00030d41

0801631c <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 801631c:	b530      	push	{r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 801631e:	78c4      	ldrb	r4, [r0, #3]
 8016320:	b96c      	cbnz	r4, 801633e <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8016322:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8016326:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8016328:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 801632c:	109b      	asrs	r3, r3, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 801632e:	4622      	mov	r2, r4
 8016330:	429a      	cmp	r2, r3
 8016332:	d004      	beq.n	801633e <USB_OTG_WritePacket+0x22>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8016334:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8016338:	3201      	adds	r2, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 801633a:	6028      	str	r0, [r5, #0]
 801633c:	e7f8      	b.n	8016330 <USB_OTG_WritePacket+0x14>
    }
  }
  return status;
}
 801633e:	2000      	movs	r0, #0
 8016340:	bd30      	pop	{r4, r5, pc}

08016342 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8016342:	b510      	push	{r4, lr}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 8016344:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8016346:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 801634a:	1092      	asrs	r2, r2, #2
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 801634c:	2300      	movs	r3, #0
 801634e:	4293      	cmp	r3, r2
 8016350:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8016354:	d004      	beq.n	8016360 <USB_OTG_ReadPacket+0x1e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8016356:	6820      	ldr	r0, [r4, #0]
 8016358:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 801635c:	3301      	adds	r3, #1
 801635e:	e7f6      	b.n	801634e <USB_OTG_ReadPacket+0xc>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 8016360:	1808      	adds	r0, r1, r0
 8016362:	bd10      	pop	{r4, pc}

08016364 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8016364:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8016366:	2300      	movs	r3, #0
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8016368:	2201      	movs	r2, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 801636a:	2440      	movs	r4, #64	; 0x40
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 801636c:	2901      	cmp	r1, #1
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 801636e:	70c3      	strb	r3, [r0, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8016370:	7082      	strb	r2, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8016372:	8084      	strh	r4, [r0, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8016374:	d10c      	bne.n	8016390 <USB_OTG_SelectCore+0x2c>
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8016376:	2302      	movs	r3, #2
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 8016378:	2608      	movs	r6, #8
    pdev->cfg.dev_endpoints    = 4 ;
 801637a:	2204      	movs	r2, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 801637c:	f44f 74a0 	mov.w	r4, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8016380:	7203      	strb	r3, [r0, #8]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8016382:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 8016384:	7006      	strb	r6, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8016386:	7042      	strb	r2, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8016388:	80c4      	strh	r4, [r0, #6]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 801638a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801638e:	e009      	b.n	80163a4 <USB_OTG_SelectCore+0x40>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8016390:	b941      	cbnz	r1, 80163a4 <USB_OTG_SelectCore+0x40>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8016392:	230c      	movs	r3, #12
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8016394:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 12 ;
 8016396:	7003      	strb	r3, [r0, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8016398:	2106      	movs	r1, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 801639a:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 801639e:	4b20      	ldr	r3, [pc, #128]	; (8016420 <USB_OTG_SelectCore+0xbc>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
 80163a0:	7041      	strb	r1, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 80163a2:	80c5      	strh	r5, [r0, #6]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 80163a4:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80163a8:	7845      	ldrb	r5, [r0, #1]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 80163aa:	6101      	str	r1, [r0, #16]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 80163ac:	60c3      	str	r3, [r0, #12]
 80163ae:	4602      	mov	r2, r0
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80163b0:	4619      	mov	r1, r3
 80163b2:	2400      	movs	r4, #0
 80163b4:	3204      	adds	r2, #4
 80163b6:	42ac      	cmp	r4, r5
 80163b8:	f101 0620 	add.w	r6, r1, #32
 80163bc:	d208      	bcs.n	80163d0 <USB_OTG_SelectCore+0x6c>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80163be:	f501 6710 	add.w	r7, r1, #2304	; 0x900
 80163c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80163c6:	6511      	str	r1, [r2, #80]	; 0x50
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 80163c8:	6157      	str	r7, [r2, #20]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80163ca:	3401      	adds	r4, #1
 80163cc:	4631      	mov	r1, r6
 80163ce:	e7f1      	b.n	80163b4 <USB_OTG_SelectCore+0x50>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80163d0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80163d4:	f503 6188 	add.w	r1, r3, #1088	; 0x440
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80163d8:	6144      	str	r4, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80163da:	7804      	ldrb	r4, [r0, #0]
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80163dc:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80163e0:	2200      	movs	r2, #0
 80163e2:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 80163e6:	42a2      	cmp	r2, r4
 80163e8:	d206      	bcs.n	80163f8 <USB_OTG_SelectCore+0x94>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80163ea:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80163ee:	3201      	adds	r2, #1
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80163f0:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 80163f4:	3120      	adds	r1, #32
 80163f6:	e7f6      	b.n	80163e6 <USB_OTG_SelectCore+0x82>
 80163f8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80163fc:	2200      	movs	r2, #0
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80163fe:	42a2      	cmp	r2, r4
 8016400:	d207      	bcs.n	8016412 <USB_OTG_SelectCore+0xae>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 8016402:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016406:	3201      	adds	r2, #1
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8016408:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 801640c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8016410:	e7f5      	b.n	80163fe <USB_OTG_SelectCore+0x9a>
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8016412:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016416:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  
  return status;
}
 801641a:	2000      	movs	r0, #0
 801641c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801641e:	bf00      	nop
 8016420:	40040000 	.word	0x40040000

08016424 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8016424:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016426:	7a03      	ldrb	r3, [r0, #8]
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 8016428:	2500      	movs	r5, #0
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 801642a:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 801642c:	4604      	mov	r4, r0
 801642e:	68c3      	ldr	r3, [r0, #12]
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016430:	d11f      	bne.n	8016472 <USB_OTG_CoreInit+0x4e>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8016432:	6b98      	ldr	r0, [r3, #56]	; 0x38
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 8016434:	7a61      	ldrb	r1, [r4, #9]
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
    gccfg.b.pwdn = 0;
 8016436:	f365 4010 	bfi	r0, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 801643a:	b109      	cbz	r1, 8016440 <USB_OTG_CoreInit+0x1c>
    {
      gccfg.b.sofouten = 1;   
 801643c:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8016440:	6398      	str	r0, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8016442:	68da      	ldr	r2, [r3, #12]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8016444:	f36f 1286 	bfc	r2, #6, #1
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8016448:	f36f 5296 	bfc	r2, #22, #1
    
    usbcfg.b.ulpi_fsls = 0;
 801644c:	f36f 4251 	bfc	r2, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 8016450:	f36f 42d3 	bfc	r2, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8016454:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8016456:	4620      	mov	r0, r4
 8016458:	f7ff ff3a 	bl	80162d0 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 801645c:	78e3      	ldrb	r3, [r4, #3]
 801645e:	2b01      	cmp	r3, #1
 8016460:	d119      	bne.n	8016496 <USB_OTG_CoreInit+0x72>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8016462:	2105      	movs	r1, #5
 8016464:	f361 0544 	bfi	r5, r1, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8016468:	68e0      	ldr	r0, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 801646a:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 801646e:	6085      	str	r5, [r0, #8]
 8016470:	e011      	b.n	8016496 <USB_OTG_CoreInit+0x72>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8016472:	68da      	ldr	r2, [r3, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 8016474:	f042 0140 	orr.w	r1, r2, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8016478:	60d9      	str	r1, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 801647a:	f7ff ff29 	bl	80162d0 <USB_OTG_CoreReset>
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 801647e:	7a60      	ldrb	r0, [r4, #9]
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8016480:	68e3      	ldr	r3, [r4, #12]
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
 8016482:	2800      	cmp	r0, #0
 8016484:	bf0c      	ite	eq
 8016486:	f44f 1234 	moveq.w	r2, #2949120	; 0x2d0000
 801648a:	f44f 1274 	movne.w	r2, #3997696	; 0x3d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 801648e:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8016490:	2014      	movs	r0, #20
 8016492:	f7fd f8c6 	bl	8013622 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8016496:	78e2      	ldrb	r2, [r4, #3]
 8016498:	2a01      	cmp	r2, #1
 801649a:	d106      	bne.n	80164aa <USB_OTG_CoreInit+0x86>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 801649c:	68e3      	ldr	r3, [r4, #12]
 801649e:	6899      	ldr	r1, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80164a0:	f021 003e 	bic.w	r0, r1, #62	; 0x3e
    ahbcfg.b.dmaenable = 1;
 80164a4:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80164a8:	609a      	str	r2, [r3, #8]
    
  }
  /* initialize OTG features */
#ifdef  USE_OTG_MODE
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80164aa:	68e3      	ldr	r3, [r4, #12]
 80164ac:	68d9      	ldr	r1, [r3, #12]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
 80164ae:	f441 7040 	orr.w	r0, r1, #768	; 0x300
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80164b2:	60d8      	str	r0, [r3, #12]
  USB_OTG_EnableCommonInt(pdev);
 80164b4:	4620      	mov	r0, r4
 80164b6:	f7ff ff01 	bl	80162bc <USB_OTG_EnableCommonInt>
#endif
  return status;
}
 80164ba:	2000      	movs	r0, #0
 80164bc:	bd38      	pop	{r3, r4, r5, pc}

080164be <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 80164be:	68c3      	ldr	r3, [r0, #12]
 80164c0:	689a      	ldr	r2, [r3, #8]
 80164c2:	f042 0001 	orr.w	r0, r2, #1
 80164c6:	6098      	str	r0, [r3, #8]
  return status;
}
 80164c8:	2000      	movs	r0, #0
 80164ca:	4770      	bx	lr

080164cc <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 80164cc:	68c3      	ldr	r3, [r0, #12]
 80164ce:	689a      	ldr	r2, [r3, #8]
 80164d0:	f022 0001 	bic.w	r0, r2, #1
 80164d4:	6098      	str	r0, [r3, #8]
  return status;
}
 80164d6:	2000      	movs	r0, #0
 80164d8:	4770      	bx	lr
	...

080164dc <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 80164dc:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 80164de:	2300      	movs	r3, #0
 80164e0:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 80164e2:	9a01      	ldr	r2, [sp, #4]
 80164e4:	f042 0320 	orr.w	r3, r2, #32
 80164e8:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 80164ea:	9a01      	ldr	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80164ec:	4b09      	ldr	r3, [pc, #36]	; (8016514 <USB_OTG_FlushTxFifo+0x38>)
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
 80164ee:	f361 128a 	bfi	r2, r1, #6, #5
 80164f2:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80164f4:	68c2      	ldr	r2, [r0, #12]
 80164f6:	9801      	ldr	r0, [sp, #4]
 80164f8:	6110      	str	r0, [r2, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80164fa:	6911      	ldr	r1, [r2, #16]
    if (++count > 200000)
 80164fc:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80164fe:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 8016500:	d002      	beq.n	8016508 <USB_OTG_FlushTxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8016502:	9801      	ldr	r0, [sp, #4]
 8016504:	0680      	lsls	r0, r0, #26
 8016506:	d4f8      	bmi.n	80164fa <USB_OTG_FlushTxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8016508:	2003      	movs	r0, #3
 801650a:	f7fd f887 	bl	801361c <USB_OTG_BSP_uDelay>
  return status;
}
 801650e:	2000      	movs	r0, #0
 8016510:	bd0e      	pop	{r1, r2, r3, pc}
 8016512:	bf00      	nop
 8016514:	00030d41 	.word	0x00030d41

08016518 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8016518:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 801651a:	2300      	movs	r3, #0
 801651c:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 801651e:	9901      	ldr	r1, [sp, #4]
 8016520:	f041 0210 	orr.w	r2, r1, #16
 8016524:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8016526:	68c0      	ldr	r0, [r0, #12]
 8016528:	9b01      	ldr	r3, [sp, #4]
 801652a:	4a07      	ldr	r2, [pc, #28]	; (8016548 <USB_OTG_FlushRxFifo+0x30>)
 801652c:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 801652e:	6901      	ldr	r1, [r0, #16]
    if (++count > 200000)
 8016530:	3a01      	subs	r2, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8016532:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 8016534:	d002      	beq.n	801653c <USB_OTG_FlushRxFifo+0x24>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8016536:	9b01      	ldr	r3, [sp, #4]
 8016538:	06d9      	lsls	r1, r3, #27
 801653a:	d4f8      	bmi.n	801652e <USB_OTG_FlushRxFifo+0x16>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 801653c:	2003      	movs	r0, #3
 801653e:	f7fd f86d 	bl	801361c <USB_OTG_BSP_uDelay>
  return status;
}
 8016542:	2000      	movs	r0, #0
 8016544:	bd0e      	pop	{r1, r2, r3, pc}
 8016546:	bf00      	nop
 8016548:	00030d41 	.word	0x00030d41

0801654c <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801654c:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 801654e:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8016550:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 8016552:	2901      	cmp	r1, #1
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
 8016554:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 8016558:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 801655c:	d102      	bne.n	8016564 <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_host = 1;
 801655e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016562:	e002      	b.n	801656a <USB_OTG_SetCurrentMode+0x1e>
  }
  else if ( mode == DEVICE_MODE)
 8016564:	b909      	cbnz	r1, 801656a <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 8016566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 801656a:	2032      	movs	r0, #50	; 0x32
  else if ( mode == DEVICE_MODE)
  {
    usbcfg.b.force_dev = 1;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801656c:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 801656e:	f7fd f858 	bl	8013622 <USB_OTG_BSP_mDelay>
  return status;
}
 8016572:	2000      	movs	r0, #0
 8016574:	bd08      	pop	{r3, pc}

08016576 <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8016576:	68c3      	ldr	r3, [r0, #12]
 8016578:	6958      	ldr	r0, [r3, #20]
 801657a:	f000 0101 	and.w	r1, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 801657e:	f081 0001 	eor.w	r0, r1, #1
 8016582:	4770      	bx	lr

08016584 <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8016584:	68c3      	ldr	r3, [r0, #12]
 8016586:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 8016588:	f000 0001 	and.w	r0, r0, #1
 801658c:	4770      	bx	lr

0801658e <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 801658e:	68c3      	ldr	r3, [r0, #12]
 8016590:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8016592:	6998      	ldr	r0, [r3, #24]
  return v;
}
 8016594:	4010      	ands	r0, r2
 8016596:	4770      	bx	lr

08016598 <USB_OTG_IsEvenFrame>:
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8016598:	6943      	ldr	r3, [r0, #20]
 801659a:	6898      	ldr	r0, [r3, #8]
 801659c:	f000 0101 	and.w	r1, r0, #1
}
 80165a0:	f081 0001 	eor.w	r0, r1, #1
 80165a4:	4770      	bx	lr

080165a6 <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 80165a6:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 80165a8:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 80165aa:	4604      	mov	r4, r0
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 80165ac:	2500      	movs	r5, #0
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80165ae:	f04f 32ff 	mov.w	r2, #4294967295
{
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 80165b2:	619d      	str	r5, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80165b4:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 80165b6:	f7ff fe81 	bl	80162bc <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 80165ba:	78e0      	ldrb	r0, [r4, #3]
  {  
    intmsk.b.rxstsqlvl  = 1;
 80165bc:	42a8      	cmp	r0, r5
 80165be:	bf0c      	ite	eq
 80165c0:	2110      	moveq	r1, #16
 80165c2:	4629      	movne	r1, r5
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
 80165c4:	f041 530c 	orr.w	r3, r1, #587202560	; 0x23000000
  intmsk.b.sofintr    = 1;  
 80165c8:	f043 0208 	orr.w	r2, r3, #8
  intmsk.b.incomplisoout  = 1; 
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80165cc:	68e3      	ldr	r3, [r4, #12]
 80165ce:	6999      	ldr	r1, [r3, #24]
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
  intmsk.b.sofintr    = 1;  
  intmsk.b.incomplisoout  = 1; 
 80165d0:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80165d4:	ea21 0100 	bic.w	r1, r1, r0
 80165d8:	ea41 0200 	orr.w	r2, r1, r0
 80165dc:	619a      	str	r2, [r3, #24]
  return status;
}
 80165de:	4628      	mov	r0, r5
 80165e0:	bd38      	pop	{r3, r4, r5, pc}

080165e2 <USB_OTG_InitFSLSPClkSel>:
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80165e2:	6943      	ldr	r3, [r0, #20]
 80165e4:	681a      	ldr	r2, [r3, #0]
  hcfg.b.fslspclksel = freq;
 80165e6:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 80165ea:	601a      	str	r2, [r3, #0]
 80165ec:	4770      	bx	lr

080165ee <USB_OTG_ReadHPRT0>:
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80165ee:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80165f2:	6818      	ldr	r0, [r3, #0]
  hprt0.b.prtena = 0;
  hprt0.b.prtconndet = 0;
  hprt0.b.prtenchng = 0;
  hprt0.b.prtovrcurrchng = 0;
  return hprt0.d32;
}
 80165f4:	f020 002e 	bic.w	r0, r0, #46	; 0x2e
 80165f8:	4770      	bx	lr

080165fa <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 80165fa:	b538      	push	{r3, r4, r5, lr}
 80165fc:	4604      	mov	r4, r0
 80165fe:	460d      	mov	r5, r1
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 8016600:	f7fd f838 	bl	8013674 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8016604:	4620      	mov	r0, r4
 8016606:	f7ff fff2 	bl	80165ee <USB_OTG_ReadHPRT0>
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 801660a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801660e:	f002 0110 	and.w	r1, r2, #16
 8016612:	b2cb      	uxtb	r3, r1
 8016614:	b933      	cbnz	r3, 8016624 <USB_OTG_DriveVbus+0x2a>
 8016616:	2d01      	cmp	r5, #1
 8016618:	d104      	bne.n	8016624 <USB_OTG_DriveVbus+0x2a>
  {
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801661a:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
  {
    hprt0.b.prtpwr = 1;
 801661e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016622:	6010      	str	r0, [r2, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 8016624:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8016628:	f001 0310 	and.w	r3, r1, #16
 801662c:	b2da      	uxtb	r2, r3
 801662e:	b12a      	cbz	r2, 801663c <USB_OTG_DriveVbus+0x42>
 8016630:	b925      	cbnz	r5, 801663c <USB_OTG_DriveVbus+0x42>
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016632:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
  {
    hprt0.b.prtpwr = 0;
 8016636:	f365 300c 	bfi	r0, r5, #12, #1
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801663a:	6008      	str	r0, [r1, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 801663c:	20c8      	movs	r0, #200	; 0xc8
}
 801663e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  
  USB_OTG_BSP_mDelay(200);
 8016642:	f7fc bfee 	b.w	8013622 <USB_OTG_BSP_mDelay>

08016646 <USB_OTG_ReadHostAllChannels_intr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 8016646:	6943      	ldr	r3, [r0, #20]
 8016648:	6958      	ldr	r0, [r3, #20]
}
 801664a:	4770      	bx	lr

0801664c <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 801664c:	b538      	push	{r3, r4, r5, lr}
 801664e:	4605      	mov	r5, r0
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8016650:	f7ff ffcd 	bl	80165ee <USB_OTG_ReadHPRT0>
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016654:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
 8016658:	f440 7480 	orr.w	r4, r0, #256	; 0x100
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801665c:	601c      	str	r4, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 801665e:	200a      	movs	r0, #10
 8016660:	f7fc ffdf 	bl	8013622 <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016664:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
  hprt0.b.prtrst = 0;
 8016668:	f36f 2408 	bfc	r4, #8, #1
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801666c:	6004      	str	r4, [r0, #0]
  USB_OTG_BSP_mDelay (20);   
 801666e:	2014      	movs	r0, #20
 8016670:	f7fc ffd7 	bl	8013622 <USB_OTG_BSP_mDelay>
  return 1;
}
 8016674:	2001      	movs	r0, #1
 8016676:	bd38      	pop	{r3, r4, r5, pc}

08016678 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8016678:	b570      	push	{r4, r5, r6, lr}
 801667a:	4604      	mov	r4, r0
#endif
  hcfg.d32 = 0;
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 801667c:	f7fc ffd8 	bl	8013630 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016680:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  //USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
 8016684:	2500      	movs	r5, #0
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016686:	601d      	str	r5, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016688:	7a21      	ldrb	r1, [r4, #8]
 801668a:	2901      	cmp	r1, #1
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 801668c:	bf08      	it	eq
 801668e:	4629      	moveq	r1, r5
 8016690:	4620      	mov	r0, r4
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 8016692:	bf18      	it	ne
 8016694:	2101      	movne	r1, #1
 8016696:	f7ff ffa4 	bl	80165e2 <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 801669a:	4620      	mov	r0, r4
 801669c:	f7ff ffd6 	bl	801664c <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80166a0:	6960      	ldr	r0, [r4, #20]
 80166a2:	6802      	ldr	r2, [r0, #0]
  hcfg.b.fslssupp = 0;
 80166a4:	f36f 0282 	bfc	r2, #2, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 80166a8:	6002      	str	r2, [r0, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 80166aa:	7ae3      	ldrb	r3, [r4, #11]
 80166ac:	2b01      	cmp	r3, #1
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
  ptxfifosize.d32 = 0;
 80166ae:	462e      	mov	r6, r5
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 80166b0:	d10e      	bne.n	80166d0 <USB_OTG_CoreInitHost+0x58>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80166b2:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 80166b4:	22e0      	movs	r2, #224	; 0xe0
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80166b6:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 80166b8:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 80166bc:	f362 060f 	bfi	r6, r2, #0, #16
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 80166c0:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 80166c4:	f2c0 0660 	movt	r6, #96	; 0x60
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80166c8:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 80166ca:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 80166cc:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  
#ifdef USE_OTG_MODE
  /* Clear Host Set HNP Enable in the USB_OTG Control Register */
  //gotgctl.b.hstsethnpen = 1;
  //USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, (1 << 11), 0);
 80166d0:	68e3      	ldr	r3, [r4, #12]
 80166d2:	6819      	ldr	r1, [r3, #0]
 80166d4:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 80166d8:	6018      	str	r0, [r3, #0]
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80166da:	2110      	movs	r1, #16
 80166dc:	4620      	mov	r0, r4
 80166de:	f7ff fefd 	bl	80164dc <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80166e2:	4620      	mov	r0, r4
 80166e4:	f7ff ff18 	bl	8016518 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80166e8:	2300      	movs	r3, #0
 80166ea:	7822      	ldrb	r2, [r4, #0]
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d20a      	bcs.n	8016706 <USB_OTG_CoreInitHost+0x8e>
/**
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
 80166f0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80166f4:	f04f 32ff 	mov.w	r2, #4294967295
 80166f8:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80166fc:	2100      	movs	r1, #0
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80166fe:	6082      	str	r2, [r0, #8]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016700:	3301      	adds	r3, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 8016702:	60c1      	str	r1, [r0, #12]
 8016704:	e7f1      	b.n	80166ea <USB_OTG_CoreInitHost+0x72>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
#endif
  
  USB_OTG_EnableHostInt(pdev);
 8016706:	4620      	mov	r0, r4
 8016708:	f7ff ff4d 	bl	80165a6 <USB_OTG_EnableHostInt>
  return status;
}
 801670c:	2000      	movs	r0, #0
 801670e:	bd70      	pop	{r4, r5, r6, pc}

08016710 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016710:	b5f0      	push	{r4, r5, r6, r7, lr}
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 8016712:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8016716:	f04f 35ff 	mov.w	r5, #4294967295
 801671a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 801671e:	60a5      	str	r5, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
 8016720:	78c6      	ldrb	r6, [r0, #3]
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
 8016722:	2200      	movs	r2, #0
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
  {
    hcintmsk.b.ahberr = 1;
 8016724:	2e01      	cmp	r6, #1
 8016726:	bf0c      	ite	eq
 8016728:	2304      	moveq	r3, #4
 801672a:	4613      	movne	r3, r2
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 801672c:	014e      	lsls	r6, r1, #5
 801672e:	1987      	adds	r7, r0, r6
 8016730:	f897 5895 	ldrb.w	r5, [r7, #2197]	; 0x895
 8016734:	2d03      	cmp	r5, #3
 8016736:	d82b      	bhi.n	8016790 <USB_OTG_HC_Init+0x80>
 8016738:	e8df f005 	tbb	[pc, r5]
 801673c:	14022002 	.word	0x14022002
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016740:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8016744:	f043 0789 	orr.w	r7, r3, #137	; 0x89
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016748:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
 801674c:	b115      	cbz	r5, 8016754 <USB_OTG_HC_Init+0x44>
    {
      hcintmsk.b.bblerr = 1;
 801674e:	f447 63a2 	orr.w	r3, r7, #1296	; 0x510
 8016752:	e01d      	b.n	8016790 <USB_OTG_HC_Init+0x80>
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
      if (pdev->host.hc[hc_num].do_ping) 
 8016754:	f896 6894 	ldrb.w	r6, [r6, #2196]	; 0x894
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 8016758:	f447 638a 	orr.w	r3, r7, #1104	; 0x450
      if (pdev->host.hc[hc_num].do_ping) 
 801675c:	b1c6      	cbz	r6, 8016790 <USB_OTG_HC_Init+0x80>
      {
        hcintmsk.b.ack = 1;
 801675e:	f447 638e 	orr.w	r3, r7, #1136	; 0x470
 8016762:	e015      	b.n	8016790 <USB_OTG_HC_Init+0x80>
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016764:	eb00 1641 	add.w	r6, r0, r1, lsl #5
    break;
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8016768:	f043 0799 	orr.w	r7, r3, #153	; 0x99
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801676c:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
 8016770:	f447 63c0 	orr.w	r3, r7, #1536	; 0x600
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016774:	b165      	cbz	r5, 8016790 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.bblerr = 1;
 8016776:	f447 63e0 	orr.w	r3, r7, #1792	; 0x700
 801677a:	e009      	b.n	8016790 <USB_OTG_HC_Init+0x80>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801677c:	1986      	adds	r6, r0, r6
      hcintmsk.b.bblerr = 1;
    }
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 801677e:	f043 0701 	orr.w	r7, r3, #1
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016782:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
 8016786:	f447 7308 	orr.w	r3, r7, #544	; 0x220
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801678a:	b10d      	cbz	r5, 8016790 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
 801678c:	f447 7368 	orr.w	r3, r7, #928	; 0x3a0
    }
    break;
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 8016790:	60e3      	str	r3, [r4, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8016792:	6943      	ldr	r3, [r0, #20]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8016794:	2701      	movs	r7, #1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8016796:	699e      	ldr	r6, [r3, #24]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8016798:	fa07 f701 	lsl.w	r7, r7, r1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 801679c:	4337      	orrs	r7, r6
 801679e:	619f      	str	r7, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 80167a0:	68c3      	ldr	r3, [r0, #12]
 80167a2:	699d      	ldr	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 80167a4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 80167a8:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 80167ac:	619d      	str	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 80167ae:	f890 1890 	ldrb.w	r1, [r0, #2192]	; 0x890
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 80167b2:	f890 7891 	ldrb.w	r7, [r0, #2193]	; 0x891
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80167b6:	f890 3892 	ldrb.w	r3, [r0, #2194]	; 0x892
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 80167ba:	f361 529c 	bfi	r2, r1, #22, #7
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80167be:	f890 1893 	ldrb.w	r1, [r0, #2195]	; 0x893
 80167c2:	f1b1 0c02 	subs.w	ip, r1, #2
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 80167c6:	f367 22ce 	bfi	r2, r7, #11, #4
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80167ca:	f1dc 0700 	rsbs	r7, ip, #0
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 80167ce:	f363 32cf 	bfi	r2, r3, #15, #1
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80167d2:	eb57 030c 	adcs.w	r3, r7, ip
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80167d6:	f890 7895 	ldrb.w	r7, [r0, #2197]	; 0x895
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80167da:	f8b0 0896 	ldrh.w	r0, [r0, #2198]	; 0x896
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80167de:	f363 4251 	bfi	r2, r3, #17, #1
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80167e2:	f367 4293 	bfi	r2, r7, #18, #2
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80167e6:	f360 020a 	bfi	r2, r0, #0, #11
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 80167ea:	2f03      	cmp	r7, #3
  {
    hcchar.b.oddfrm  = 1;
 80167ec:	bf08      	it	eq
 80167ee:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80167f2:	6022      	str	r2, [r4, #0]
  return status;
}
 80167f4:	2000      	movs	r0, #0
 80167f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167f8 <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80167f8:	b570      	push	{r4, r5, r6, lr}
 80167fa:	460d      	mov	r5, r1
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80167fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016800:	b086      	sub	sp, #24
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 8016802:	f8d1 38a0 	ldr.w	r3, [r1, #2208]	; 0x8a0
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016806:	4604      	mov	r4, r0
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
  hctsiz.d32 = 0;
 8016808:	2200      	movs	r2, #0
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 801680a:	b17b      	cbz	r3, 801682c <USB_OTG_HC_StartXfer+0x34>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 801680c:	f8b1 0896 	ldrh.w	r0, [r1, #2198]	; 0x896
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8016810:	1e5e      	subs	r6, r3, #1
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 8016812:	1833      	adds	r3, r6, r0
 8016814:	fbb3 f6f0 	udiv	r6, r3, r0
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8016818:	b2b3      	uxth	r3, r6
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 801681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801681e:	d906      	bls.n	801682e <USB_OTG_HC_StartXfer+0x36>
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8016820:	0200      	lsls	r0, r0, #8
 8016822:	f8c1 08a0 	str.w	r0, [r1, #2208]	; 0x8a0
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
 8016826:	f44f 7380 	mov.w	r3, #256	; 0x100
 801682a:	e000      	b.n	801682e <USB_OTG_HC_StartXfer+0x36>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 801682c:	2301      	movs	r3, #1
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 801682e:	0168      	lsls	r0, r5, #5
 8016830:	1821      	adds	r1, r4, r0
 8016832:	f891 6892 	ldrb.w	r6, [r1, #2194]	; 0x892
 8016836:	b126      	cbz	r6, 8016842 <USB_OTG_HC_StartXfer+0x4a>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8016838:	f8b1 6896 	ldrh.w	r6, [r1, #2198]	; 0x896
 801683c:	435e      	muls	r6, r3
 801683e:	f8c1 68a0 	str.w	r6, [r1, #2208]	; 0x8a0
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8016842:	1820      	adds	r0, r4, r0
 8016844:	f8d0 18a0 	ldr.w	r1, [r0, #2208]	; 0x8a0
 8016848:	f361 0212 	bfi	r2, r1, #0, #19
  hctsiz.b.pktcnt = num_packets;
 801684c:	f363 42dc 	bfi	r2, r3, #19, #10
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8016850:	f105 0315 	add.w	r3, r5, #21
 8016854:	eb04 1643 	add.w	r6, r4, r3, lsl #5
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016858:	eb04 0185 	add.w	r1, r4, r5, lsl #2
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 801685c:	f896 05f8 	ldrb.w	r0, [r6, #1528]	; 0x5f8
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016860:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8016864:	f360 725e 	bfi	r2, r0, #29, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016868:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 801686a:	78e2      	ldrb	r2, [r4, #3]
 801686c:	2a01      	cmp	r2, #1
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 801686e:	bf08      	it	eq
 8016870:	f8d6 25fc 	ldreq.w	r2, [r6, #1532]	; 0x5fc
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8016874:	4620      	mov	r0, r4
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  if (pdev->cfg.dma_enable == 1)
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8016876:	bf08      	it	eq
 8016878:	615a      	streq	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 801687a:	681e      	ldr	r6, [r3, #0]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 801687c:	f7ff fe8c 	bl	8016598 <USB_OTG_IsEvenFrame>
 8016880:	f360 765d 	bfi	r6, r0, #29, #1
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016884:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8016888:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801688c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
 8016890:	f36f 769e 	bfc	r6, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016894:	600e      	str	r6, [r1, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8016896:	78e3      	ldrb	r3, [r4, #3]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d134      	bne.n	8016906 <USB_OTG_HC_StartXfer+0x10e>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 801689c:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80168a0:	f892 0892 	ldrb.w	r0, [r2, #2194]	; 0x892
 80168a4:	2800      	cmp	r0, #0
 80168a6:	d12e      	bne.n	8016906 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
 80168a8:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 80168ac:	b35b      	cbz	r3, 8016906 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 80168ae:	f892 2895 	ldrb.w	r2, [r2, #2197]	; 0x895
 80168b2:	2a03      	cmp	r2, #3
 80168b4:	d81e      	bhi.n	80168f4 <USB_OTG_HC_StartXfer+0xfc>
 80168b6:	e8df f002 	tbb	[pc, r2]
 80168ba:	0f02      	.short	0x0f02
 80168bc:	0f02      	.short	0x0f02
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80168be:	68e2      	ldr	r2, [r4, #12]
 80168c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80168c2:	1cd8      	adds	r0, r3, #3
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80168c4:	9103      	str	r1, [sp, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 80168c6:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80168ca:	b289      	uxth	r1, r1
 80168cc:	4281      	cmp	r1, r0
 80168ce:	d211      	bcs.n	80168f4 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80168d0:	6991      	ldr	r1, [r2, #24]
 80168d2:	f041 0020 	orr.w	r0, r1, #32
 80168d6:	e00c      	b.n	80168f2 <USB_OTG_HC_StartXfer+0xfa>
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80168d8:	6961      	ldr	r1, [r4, #20]
 80168da:	6908      	ldr	r0, [r1, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80168dc:	1cd9      	adds	r1, r3, #3
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80168de:	b282      	uxth	r2, r0
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80168e0:	9001      	str	r0, [sp, #4]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80168e2:	f3c1 008f 	ubfx	r0, r1, #2, #16
 80168e6:	4282      	cmp	r2, r0
 80168e8:	d204      	bcs.n	80168f4 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80168ea:	68e2      	ldr	r2, [r4, #12]
 80168ec:	6991      	ldr	r1, [r2, #24]
 80168ee:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80168f2:	6190      	str	r0, [r2, #24]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 80168f4:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80168f8:	4620      	mov	r0, r4
 80168fa:	f8d2 189c 	ldr.w	r1, [r2, #2204]	; 0x89c
 80168fe:	b29b      	uxth	r3, r3
 8016900:	462a      	mov	r2, r5
 8016902:	f7ff fd0b 	bl	801631c <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
}
 8016906:	2000      	movs	r0, #0
 8016908:	b006      	add	sp, #24
 801690a:	bd70      	pop	{r4, r5, r6, pc}

0801690c <USB_OTG_HC_Halt>:
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 801690c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016910:	b086      	sub	sp, #24
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8016912:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8016916:	6813      	ldr	r3, [r2, #0]
  hcchar.b.chen = 1;
  hcchar.b.chdis = 1;
 8016918:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 801691c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8016920:	f011 010c 	ands.w	r1, r1, #12
 8016924:	d001      	beq.n	801692a <USB_OTG_HC_Halt+0x1e>
 8016926:	2908      	cmp	r1, #8
 8016928:	d102      	bne.n	8016930 <USB_OTG_HC_Halt+0x24>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 801692a:	68c0      	ldr	r0, [r0, #12]
 801692c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801692e:	e001      	b.n	8016934 <USB_OTG_HC_Halt+0x28>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8016930:	6940      	ldr	r0, [r0, #20]
 8016932:	6901      	ldr	r1, [r0, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8016934:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8016938:	b909      	cbnz	r1, 801693e <USB_OTG_HC_Halt+0x32>
    {
      hcchar.b.chen = 0;
 801693a:	f361 73df 	bfi	r3, r1, #31, #1
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801693e:	6013      	str	r3, [r2, #0]
  return status;
}
 8016940:	2000      	movs	r0, #0
 8016942:	b006      	add	sp, #24
 8016944:	4770      	bx	lr

08016946 <USB_OTG_HC_DoPing>:
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 801694a:	b510      	push	{r4, lr}
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801694c:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
 8016950:	2301      	movs	r3, #1
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
 8016952:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  hctsiz.b.pktcnt = 1;
 8016956:	f363 44dc 	bfi	r4, r3, #19, #10
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801695a:	6104      	str	r4, [r0, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 801695c:	6803      	ldr	r3, [r0, #0]
{
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 801695e:	2200      	movs	r2, #0
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.chen = 1;
 8016960:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
 8016964:	f362 719e 	bfi	r1, r2, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016968:	6001      	str	r1, [r0, #0]
  return status;  
}
 801696a:	4610      	mov	r0, r2
 801696c:	bd10      	pop	{r4, pc}

0801696e <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 801696e:	6903      	ldr	r3, [r0, #16]
 8016970:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 8016972:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8016976:	601a      	str	r2, [r3, #0]
 8016978:	4770      	bx	lr

0801697a <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 801697a:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 801697c:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 801697e:	4604      	mov	r4, r0
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8016980:	2500      	movs	r5, #0
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016982:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8016986:	619d      	str	r5, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016988:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 801698a:	f7ff fc97 	bl	80162bc <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 801698e:	78e0      	ldrb	r0, [r4, #3]
  {
    intmsk.b.rxstsqlvl = 1;
 8016990:	42a8      	cmp	r0, r5
 8016992:	bf0c      	ite	eq
 8016994:	2110      	moveq	r1, #16
 8016996:	4629      	movne	r1, r5
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
  intmsk.b.usbreset   = 1;
  intmsk.b.enumdone   = 1;
  intmsk.b.inepintr   = 1;
 8016998:	f441 2387 	orr.w	r3, r1, #276480	; 0x43800
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
 801699c:	f043 1208 	orr.w	r2, r3, #524296	; 0x80008
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80169a0:	68e3      	ldr	r3, [r4, #12]
 80169a2:	6999      	ldr	r1, [r3, #24]
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 80169a4:	f442 1040 	orr.w	r0, r2, #3145728	; 0x300000
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80169a8:	ea21 0100 	bic.w	r1, r1, r0
 80169ac:	ea41 0200 	orr.w	r2, r1, r0
 80169b0:	619a      	str	r2, [r3, #24]
  return status;
}
 80169b2:	4628      	mov	r0, r5
 80169b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080169b8 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 80169b8:	b538      	push	{r3, r4, r5, lr}
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 80169ba:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80169be:	6901      	ldr	r1, [r0, #16]
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 80169c0:	2200      	movs	r2, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 80169c2:	601a      	str	r2, [r3, #0]
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 80169c4:	4615      	mov	r5, r2
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80169c6:	680a      	ldr	r2, [r1, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 80169c8:	f365 22cc 	bfi	r2, r5, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 80169cc:	600a      	str	r2, [r1, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 80169ce:	7ac3      	ldrb	r3, [r0, #11]
 80169d0:	2b01      	cmp	r3, #1
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 80169d2:	4604      	mov	r4, r0
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 80169d4:	d11b      	bne.n	8016a0e <USB_OTG_CoreInitDev+0x56>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 80169d6:	2103      	movs	r1, #3
 80169d8:	f7ff ffc9 	bl	801696e <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80169dc:	68e0      	ldr	r0, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80169de:	23c0      	movs	r3, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80169e0:	2180      	movs	r1, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 80169e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80169e6:	f363 050f 	bfi	r5, r3, #0, #16
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80169ea:	6241      	str	r1, [r0, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 80169ec:	f361 451f 	bfi	r5, r1, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 80169f0:	f361 020f 	bfi	r2, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80169f4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 80169f8:	6282      	str	r2, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 80169fa:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80169fe:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8016a02:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8016a06:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8016a0a:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8016a0e:	2110      	movs	r1, #16
 8016a10:	4620      	mov	r0, r4
 8016a12:	f7ff fd63 	bl	80164dc <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8016a16:	4620      	mov	r0, r4
 8016a18:	f7ff fd7e 	bl	8016518 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8016a1c:	6920      	ldr	r0, [r4, #16]
 8016a1e:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8016a20:	f04f 32ff 	mov.w	r2, #4294967295
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8016a24:	6103      	str	r3, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8016a26:	6143      	str	r3, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8016a28:	6182      	str	r2, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8016a2a:	61c3      	str	r3, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016a2c:	7861      	ldrb	r1, [r4, #1]
 8016a2e:	428b      	cmp	r3, r1
 8016a30:	d214      	bcs.n	8016a5c <USB_OTG_CoreInitDev+0xa4>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8016a32:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016a36:	3301      	adds	r3, #1
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8016a38:	6990      	ldr	r0, [r2, #24]
 8016a3a:	6801      	ldr	r1, [r0, #0]
    if (depctl.b.epena)
 8016a3c:	f3c1 6207 	ubfx	r2, r1, #24, #8
 8016a40:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8016a44:	b2ca      	uxtb	r2, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8016a46:	2a00      	cmp	r2, #0
 8016a48:	bf14      	ite	ne
 8016a4a:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8016a4e:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8016a50:	6001      	str	r1, [r0, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8016a52:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8016a54:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8016a56:	6102      	str	r2, [r0, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8016a58:	6081      	str	r1, [r0, #8]
 8016a5a:	e7e7      	b.n	8016a2c <USB_OTG_CoreInitDev+0x74>
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016a5c:	2300      	movs	r3, #0
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8016a5e:	7860      	ldrb	r0, [r4, #1]
 8016a60:	4283      	cmp	r3, r0
 8016a62:	d214      	bcs.n	8016a8e <USB_OTG_CoreInitDev+0xd6>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8016a64:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8016a68:	3301      	adds	r3, #1
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8016a6a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8016a6c:	6811      	ldr	r1, [r2, #0]
    if (depctl.b.epena)
 8016a6e:	f3c1 6007 	ubfx	r0, r1, #24, #8
 8016a72:	f000 0180 	and.w	r1, r0, #128	; 0x80
 8016a76:	b2c8      	uxtb	r0, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8016a78:	2800      	cmp	r0, #0
 8016a7a:	bf14      	ite	ne
 8016a7c:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8016a80:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8016a82:	6011      	str	r1, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8016a84:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8016a86:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8016a88:	6110      	str	r0, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8016a8a:	6091      	str	r1, [r2, #8]
 8016a8c:	e7e7      	b.n	8016a5e <USB_OTG_CoreInitDev+0xa6>
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8016a8e:	6923      	ldr	r3, [r4, #16]
 8016a90:	691a      	ldr	r2, [r3, #16]
 8016a92:	f442 7180 	orr.w	r1, r2, #256	; 0x100
 8016a96:	6119      	str	r1, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8016a98:	78e0      	ldrb	r0, [r4, #3]
 8016a9a:	2801      	cmp	r0, #1
 8016a9c:	d104      	bne.n	8016aa8 <USB_OTG_CoreInitDev+0xf0>
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 8016a9e:	4a05      	ldr	r2, [pc, #20]	; (8016ab4 <USB_OTG_CoreInitDev+0xfc>)
    dthrctl.b.rx_thr_len = 64;
 8016aa0:	2140      	movs	r1, #64	; 0x40
 8016aa2:	f361 4259 	bfi	r2, r1, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8016aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f7ff ff66 	bl	801697a <USB_OTG_EnableDevInt>
  return status;
}
 8016aae:	2000      	movs	r0, #0
 8016ab0:	bd38      	pop	{r3, r4, r5, pc}
 8016ab2:	bf00      	nop
 8016ab4:	00010103 	.word	0x00010103

08016ab8 <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016ab8:	6903      	ldr	r3, [r0, #16]
 8016aba:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 8016abc:	f3c0 0141 	ubfx	r1, r0, #1, #2
 8016ac0:	1e4b      	subs	r3, r1, #1
 8016ac2:	2b02      	cmp	r3, #2
 8016ac4:	d802      	bhi.n	8016acc <USB_OTG_GetDeviceSpeed+0x14>
 8016ac6:	4a02      	ldr	r2, [pc, #8]	; (8016ad0 <USB_OTG_GetDeviceSpeed+0x18>)
 8016ac8:	5cd0      	ldrb	r0, [r2, r3]
 8016aca:	4770      	bx	lr
 8016acc:	2003      	movs	r0, #3
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 8016ace:	4770      	bx	lr
 8016ad0:	0801baff 	.word	0x0801baff

08016ad4 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016ad4:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8016ad6:	6981      	ldr	r1, [r0, #24]
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8016ad8:	b510      	push	{r4, lr}
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016ada:	689c      	ldr	r4, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8016adc:	680a      	ldr	r2, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8016ade:	f3c4 0041 	ubfx	r0, r4, #1, #2
 8016ae2:	2802      	cmp	r0, #2
 8016ae4:	d002      	beq.n	8016aec <USB_OTG_EP0Activate+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8016ae6:	f36f 020a 	bfc	r2, #0, #11
    break;
 8016aea:	e002      	b.n	8016af2 <USB_OTG_EP0Activate+0x1e>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8016aec:	2003      	movs	r0, #3
 8016aee:	f360 020a 	bfi	r2, r0, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8016af2:	600a      	str	r2, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8016af4:	6859      	ldr	r1, [r3, #4]
 8016af6:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8016afa:	605a      	str	r2, [r3, #4]
  return status;
}
 8016afc:	2000      	movs	r0, #0
 8016afe:	bd10      	pop	{r4, pc}

08016b00 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016b00:	b530      	push	{r4, r5, lr}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b02:	784d      	ldrb	r5, [r1, #1]
 8016b04:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 8016b06:	2200      	movs	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b08:	2d01      	cmp	r5, #1
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016b0a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b0e:	d105      	bne.n	8016b1c <USB_OTG_EPActivate+0x1c>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8016b10:	fa05 f503 	lsl.w	r5, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016b14:	69a4      	ldr	r4, [r4, #24]
    daintmsk.ep.in = 1 << ep->num;
 8016b16:	f365 020f 	bfi	r2, r5, #0, #16
 8016b1a:	e005      	b.n	8016b28 <USB_OTG_EPActivate+0x28>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8016b1c:	2501      	movs	r5, #1
 8016b1e:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8016b22:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8016b24:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8016b28:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8016b2a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8016b2e:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8016b32:	b2ed      	uxtb	r5, r5
 8016b34:	b96d      	cbnz	r5, 8016b52 <USB_OTG_EPActivate+0x52>
  {
    depctl.b.mps    = ep->maxpacket;
 8016b36:	688d      	ldr	r5, [r1, #8]
 8016b38:	f365 030a 	bfi	r3, r5, #0, #11
    depctl.b.eptype = ep->type;
 8016b3c:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 8016b3e:	88c9      	ldrh	r1, [r1, #6]
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
  if (!depctl.b.usbactep)
  {
    depctl.b.mps    = ep->maxpacket;
    depctl.b.eptype = ep->type;
 8016b40:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8016b44:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
 8016b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 8016b4c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8016b50:	6021      	str	r1, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8016b52:	6900      	ldr	r0, [r0, #16]
 8016b54:	69c3      	ldr	r3, [r0, #28]
 8016b56:	431a      	orrs	r2, r3
 8016b58:	61c2      	str	r2, [r0, #28]
  return status;
}
 8016b5a:	2000      	movs	r0, #0
 8016b5c:	bd30      	pop	{r4, r5, pc}

08016b5e <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016b5e:	b530      	push	{r4, r5, lr}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b60:	784d      	ldrb	r5, [r1, #1]
 8016b62:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8016b64:	2400      	movs	r4, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b66:	2d01      	cmp	r5, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 8016b68:	4622      	mov	r2, r4
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016b6a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016b6e:	d105      	bne.n	8016b7c <USB_OTG_EPDeactivate+0x1e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8016b70:	fa05 f303 	lsl.w	r3, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016b74:	6989      	ldr	r1, [r1, #24]
    daintmsk.ep.in = 1 << ep->num;
 8016b76:	f363 020f 	bfi	r2, r3, #0, #16
 8016b7a:	e005      	b.n	8016b88 <USB_OTG_EPDeactivate+0x2a>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8016b7c:	2501      	movs	r5, #1
 8016b7e:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8016b82:	6d49      	ldr	r1, [r1, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8016b84:	f363 421f 	bfi	r2, r3, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8016b88:	6900      	ldr	r0, [r0, #16]
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
  }
  depctl.b.usbactep = 0;
 8016b8a:	f36f 34cf 	bfc	r4, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8016b8e:	600c      	str	r4, [r1, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8016b90:	69c1      	ldr	r1, [r0, #28]
 8016b92:	ea21 0202 	bic.w	r2, r1, r2
 8016b96:	61c2      	str	r2, [r0, #28]
  return status;
}
 8016b98:	2000      	movs	r0, #0
 8016b9a:	bd30      	pop	{r4, r5, pc}

08016b9c <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016b9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8016b9e:	784e      	ldrb	r6, [r1, #1]
 8016ba0:	780a      	ldrb	r2, [r1, #0]
 8016ba2:	2e01      	cmp	r6, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016ba4:	460b      	mov	r3, r1
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016ba6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8016baa:	d148      	bne.n	8016c3e <USB_OTG_EPStartXfer+0xa2>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016bac:	698d      	ldr	r5, [r1, #24]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016bae:	695c      	ldr	r4, [r3, #20]
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016bb0:	6829      	ldr	r1, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8016bb2:	692a      	ldr	r2, [r5, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8016bb4:	f364 0212 	bfi	r2, r4, #0, #19
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016bb8:	b914      	cbnz	r4, 8016bc0 <USB_OTG_EPStartXfer+0x24>
    {
      deptsiz.b.xfersize = 0;
      deptsiz.b.pktcnt = 1;
 8016bba:	f366 42dc 	bfi	r2, r6, #19, #10
 8016bbe:	e00b      	b.n	8016bd8 <USB_OTG_EPStartXfer+0x3c>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8016bc0:	689e      	ldr	r6, [r3, #8]
 8016bc2:	19a4      	adds	r4, r4, r6
 8016bc4:	3c01      	subs	r4, #1
 8016bc6:	fbb4 f6f6 	udiv	r6, r4, r6
      
      if (ep->type == EP_TYPE_ISOC)
 8016bca:	78dc      	ldrb	r4, [r3, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8016bcc:	f366 42dc 	bfi	r2, r6, #19, #10
      
      if (ep->type == EP_TYPE_ISOC)
 8016bd0:	2c01      	cmp	r4, #1
      {
        deptsiz.b.mc = 1;
 8016bd2:	bf08      	it	eq
 8016bd4:	f364 725e 	bfieq	r2, r4, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8016bd8:	612a      	str	r2, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8016bda:	78c2      	ldrb	r2, [r0, #3]
 8016bdc:	2a01      	cmp	r2, #1
 8016bde:	d106      	bne.n	8016bee <USB_OTG_EPStartXfer+0x52>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8016be0:	781a      	ldrb	r2, [r3, #0]
 8016be2:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8016be6:	691a      	ldr	r2, [r3, #16]
 8016be8:	69a4      	ldr	r4, [r4, #24]
 8016bea:	6162      	str	r2, [r4, #20]
 8016bec:	e00c      	b.n	8016c08 <USB_OTG_EPStartXfer+0x6c>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8016bee:	78da      	ldrb	r2, [r3, #3]
 8016bf0:	2a01      	cmp	r2, #1
 8016bf2:	d009      	beq.n	8016c08 <USB_OTG_EPStartXfer+0x6c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8016bf4:	695a      	ldr	r2, [r3, #20]
 8016bf6:	b13a      	cbz	r2, 8016c08 <USB_OTG_EPStartXfer+0x6c>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016bf8:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8016bfa:	781c      	ldrb	r4, [r3, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016bfc:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8016bfe:	2601      	movs	r6, #1
 8016c00:	fa06 f404 	lsl.w	r4, r6, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016c04:	432c      	orrs	r4, r5
 8016c06:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8016c08:	78da      	ldrb	r2, [r3, #3]
 8016c0a:	2a01      	cmp	r2, #1
 8016c0c:	d107      	bne.n	8016c1e <USB_OTG_EPStartXfer+0x82>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016c0e:	6902      	ldr	r2, [r0, #16]
 8016c10:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8016c12:	05d2      	lsls	r2, r2, #23
      {
        depctl.b.setd1pid = 1;
 8016c14:	bf54      	ite	pl
 8016c16:	f041 5100 	orrpl.w	r1, r1, #536870912	; 0x20000000
      }
      else
      {
        depctl.b.setd0pid = 1;
 8016c1a:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8016c1e:	781a      	ldrb	r2, [r3, #0]
 8016c20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8016c24:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8016c28:	6992      	ldr	r2, [r2, #24]
 8016c2a:	6011      	str	r1, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8016c2c:	78d9      	ldrb	r1, [r3, #3]
 8016c2e:	2901      	cmp	r1, #1
 8016c30:	d137      	bne.n	8016ca2 <USB_OTG_EPStartXfer+0x106>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8016c32:	68d9      	ldr	r1, [r3, #12]
 8016c34:	781a      	ldrb	r2, [r3, #0]
 8016c36:	8a9b      	ldrh	r3, [r3, #20]
 8016c38:	f7ff fb70 	bl	801631c <USB_OTG_WritePacket>
 8016c3c:	e031      	b.n	8016ca2 <USB_OTG_EPStartXfer+0x106>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8016c3e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8016c40:	695e      	ldr	r6, [r3, #20]
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8016c42:	682a      	ldr	r2, [r5, #0]
 8016c44:	689c      	ldr	r4, [r3, #8]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8016c46:	6929      	ldr	r1, [r5, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8016c48:	b92e      	cbnz	r6, 8016c56 <USB_OTG_EPStartXfer+0xba>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8016c4a:	f364 0112 	bfi	r1, r4, #0, #19
      deptsiz.b.pktcnt = 1;
 8016c4e:	2401      	movs	r4, #1
 8016c50:	f364 41dc 	bfi	r1, r4, #19, #10
 8016c54:	e00a      	b.n	8016c6c <USB_OTG_EPStartXfer+0xd0>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8016c56:	1936      	adds	r6, r6, r4
 8016c58:	3e01      	subs	r6, #1
 8016c5a:	fbb6 f6f4 	udiv	r6, r6, r4
 8016c5e:	f366 41dc 	bfi	r1, r6, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8016c62:	05b6      	lsls	r6, r6, #22
 8016c64:	0db6      	lsrs	r6, r6, #22
 8016c66:	4374      	muls	r4, r6
 8016c68:	f364 0112 	bfi	r1, r4, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8016c6c:	6129      	str	r1, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8016c6e:	78c1      	ldrb	r1, [r0, #3]
 8016c70:	2901      	cmp	r1, #1
 8016c72:	d105      	bne.n	8016c80 <USB_OTG_EPStartXfer+0xe4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8016c74:	781c      	ldrb	r4, [r3, #0]
 8016c76:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8016c7a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8016c7c:	6919      	ldr	r1, [r3, #16]
 8016c7e:	6161      	str	r1, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8016c80:	78d9      	ldrb	r1, [r3, #3]
 8016c82:	2901      	cmp	r1, #1
 8016c84:	d106      	bne.n	8016c94 <USB_OTG_EPStartXfer+0xf8>
    {
      if (ep->even_odd_frame)
 8016c86:	7959      	ldrb	r1, [r3, #5]
 8016c88:	b111      	cbz	r1, 8016c90 <USB_OTG_EPStartXfer+0xf4>
      {
        depctl.b.setd1pid = 1;
 8016c8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8016c8e:	e001      	b.n	8016c94 <USB_OTG_EPStartXfer+0xf8>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8016c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8016c9a:	f042 4104 	orr.w	r1, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8016c9e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8016ca0:	6011      	str	r1, [r2, #0]
  }
  return status;
}
 8016ca2:	2000      	movs	r0, #0
 8016ca4:	bd70      	pop	{r4, r5, r6, pc}

08016ca6 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8016ca8:	784d      	ldrb	r5, [r1, #1]
 8016caa:	2d01      	cmp	r5, #1
 8016cac:	d13d      	bne.n	8016d2a <USB_OTG_EP0StartXfer+0x84>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8016cae:	6983      	ldr	r3, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016cb0:	694a      	ldr	r2, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8016cb2:	681e      	ldr	r6, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8016cb4:	691c      	ldr	r4, [r3, #16]
 8016cb6:	9400      	str	r4, [sp, #0]
 8016cb8:	b2e4      	uxtb	r4, r4
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016cba:	b942      	cbnz	r2, 8016cce <USB_OTG_EP0StartXfer+0x28>
    {
      deptsiz.b.xfersize = 0;
 8016cbc:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8016cc0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8016cc4:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8016cc8:	f365 02c4 	bfi	r2, r5, #3, #2
 8016ccc:	e00e      	b.n	8016cec <USB_OTG_EP0StartXfer+0x46>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8016cce:	688d      	ldr	r5, [r1, #8]
 8016cd0:	42aa      	cmp	r2, r5
      {
        ep->xfer_len = ep->maxpacket;
 8016cd2:	bf8a      	itet	hi
 8016cd4:	614d      	strhi	r5, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8016cd6:	f362 0406 	bfils	r4, r2, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 8016cda:	f365 0406 	bfihi	r4, r5, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 8016cde:	f89d 2002 	ldrb.w	r2, [sp, #2]
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8016ce2:	f88d 4000 	strb.w	r4, [sp]
      }
      deptsiz.b.pktcnt = 1;
 8016ce6:	2401      	movs	r4, #1
 8016ce8:	f364 02c4 	bfi	r2, r4, #3, #2
 8016cec:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8016cf0:	9a00      	ldr	r2, [sp, #0]
 8016cf2:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8016cf4:	78c2      	ldrb	r2, [r0, #3]
 8016cf6:	2a01      	cmp	r2, #1
 8016cf8:	d105      	bne.n	8016d06 <USB_OTG_EP0StartXfer+0x60>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8016cfa:	780c      	ldrb	r4, [r1, #0]
 8016cfc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8016d00:	6994      	ldr	r4, [r2, #24]
 8016d02:	690a      	ldr	r2, [r1, #16]
 8016d04:	6162      	str	r2, [r4, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8016d06:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8016d0a:	601e      	str	r6, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8016d0c:	78c3      	ldrb	r3, [r0, #3]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d134      	bne.n	8016d7c <USB_OTG_EP0StartXfer+0xd6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8016d12:	694a      	ldr	r2, [r1, #20]
 8016d14:	2a00      	cmp	r2, #0
 8016d16:	d031      	beq.n	8016d7c <USB_OTG_EP0StartXfer+0xd6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016d18:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8016d1a:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016d1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8016d1e:	2101      	movs	r1, #1
 8016d20:	fa01 f202 	lsl.w	r2, r1, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016d24:	4302      	orrs	r2, r0
 8016d26:	635a      	str	r2, [r3, #52]	; 0x34
 8016d28:	e028      	b.n	8016d7c <USB_OTG_EP0StartXfer+0xd6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8016d2a:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8016d2c:	694e      	ldr	r6, [r1, #20]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8016d2e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8016d32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8016d34:	688a      	ldr	r2, [r1, #8]
 8016d36:	681d      	ldr	r5, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8016d38:	691c      	ldr	r4, [r3, #16]
 8016d3a:	9400      	str	r4, [sp, #0]
 8016d3c:	b2e4      	uxtb	r4, r4
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8016d3e:	b106      	cbz	r6, 8016d42 <USB_OTG_EP0StartXfer+0x9c>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8016d40:	614a      	str	r2, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8016d42:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8016d46:	f89d 2002 	ldrb.w	r2, [sp, #2]
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 8016d4a:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8016d4e:	2401      	movs	r4, #1
 8016d50:	f364 02c4 	bfi	r2, r4, #3, #2
 8016d54:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8016d58:	9a00      	ldr	r2, [sp, #0]
 8016d5a:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8016d5c:	78c3      	ldrb	r3, [r0, #3]
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d105      	bne.n	8016d6e <USB_OTG_EP0StartXfer+0xc8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8016d62:	780a      	ldrb	r2, [r1, #0]
 8016d64:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8016d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016d6a:	690b      	ldr	r3, [r1, #16]
 8016d6c:	6153      	str	r3, [r2, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8016d6e:	7809      	ldrb	r1, [r1, #0]
 8016d70:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8016d74:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8016d78:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8016d7a:	6015      	str	r5, [r2, #0]
    
  }
  return status;
}
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08016d80 <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8016d80:	784b      	ldrb	r3, [r1, #1]
 8016d82:	7809      	ldrb	r1, [r1, #0]
 8016d84:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8016d86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8016d8a:	d10d      	bne.n	8016da8 <USB_OTG_EPSetStall+0x28>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8016d8c:	6980      	ldr	r0, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8016d8e:	6803      	ldr	r3, [r0, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8016d90:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8016d94:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8016d98:	b2ca      	uxtb	r2, r1
 8016d9a:	b10a      	cbz	r2, 8016da0 <USB_OTG_EPSetStall+0x20>
    {
      depctl.b.epdis = 1;
 8016d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    }
    depctl.b.stall = 1;
 8016da0:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8016da4:	6001      	str	r1, [r0, #0]
 8016da6:	e004      	b.n	8016db2 <USB_OTG_EPSetStall+0x32>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8016da8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8016daa:	681a      	ldr	r2, [r3, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8016dac:	f442 1100 	orr.w	r1, r2, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8016db0:	6019      	str	r1, [r3, #0]
  }
  return status;
}
 8016db2:	2000      	movs	r0, #0
 8016db4:	4770      	bx	lr

08016db6 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 8016db6:	784b      	ldrb	r3, [r1, #1]
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8016dbc:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8016dbe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016dc2:	bf0c      	ite	eq
 8016dc4:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8016dc6:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8016dc8:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8016dca:	1e88      	subs	r0, r1, #2
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 8016dcc:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8016dd0:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8016dd2:	bf98      	it	ls
 8016dd4:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8016dd8:	6013      	str	r3, [r2, #0]
  return status;
}
 8016dda:	2000      	movs	r0, #0
 8016ddc:	4770      	bx	lr

08016dde <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8016dde:	6903      	ldr	r3, [r0, #16]
 8016de0:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8016de2:	69d8      	ldr	r0, [r3, #28]
 8016de4:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 8016de6:	0c00      	lsrs	r0, r0, #16
 8016de8:	4770      	bx	lr

08016dea <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8016dea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8016dee:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8016df0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8016df2:	6899      	ldr	r1, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8016df4:	6950      	ldr	r0, [r2, #20]
  return v;
}
 8016df6:	4008      	ands	r0, r1
 8016df8:	4770      	bx	lr

08016dfa <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8016dfa:	6903      	ldr	r3, [r0, #16]
 8016dfc:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8016dfe:	69d9      	ldr	r1, [r3, #28]
 8016e00:	4008      	ands	r0, r1
  return (v & 0xffff);
}
 8016e02:	b280      	uxth	r0, r0
 8016e04:	4770      	bx	lr

08016e06 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8016e06:	b082      	sub	sp, #8
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8016e08:	2300      	movs	r3, #0
 8016e0a:	9300      	str	r3, [sp, #0]
  doeptsize0.b.supcnt = 3;
 8016e0c:	21c0      	movs	r1, #192	; 0xc0
  doeptsize0.b.pktcnt = 1;
 8016e0e:	2201      	movs	r2, #1
 8016e10:	2300      	movs	r3, #0
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 8016e12:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
 8016e16:	f362 03c4 	bfi	r3, r2, #3, #2
  doeptsize0.b.xfersize = 8 * 3;
 8016e1a:	2118      	movs	r1, #24
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 8016e1c:	f88d 3002 	strb.w	r3, [sp, #2]
  doeptsize0.b.xfersize = 8 * 3;
 8016e20:	f88d 1000 	strb.w	r1, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8016e24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8016e26:	9a00      	ldr	r2, [sp, #0]
 8016e28:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8016e2a:	78c1      	ldrb	r1, [r0, #3]
 8016e2c:	2901      	cmp	r1, #1
 8016e2e:	d106      	bne.n	8016e3e <USB_OTG_EP0_OutStart+0x38>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8016e30:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 8016e34:	6158      	str	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8016e36:	681a      	ldr	r2, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8016e38:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8016e3c:	601a      	str	r2, [r3, #0]
  }
}
 8016e3e:	b002      	add	sp, #8
 8016e40:	4770      	bx	lr

08016e42 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8016e42:	b510      	push	{r4, lr}
 8016e44:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8016e46:	f7ff fa8d 	bl	8016364 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 8016e50:	2300      	movs	r3, #0
 8016e52:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8016e56:	7862      	ldrb	r2, [r4, #1]
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d213      	bcs.n	8016e84 <DCD_Init+0x42>
  {
    ep = &pdev->dev.in_ep[i];
 8016e5c:	2228      	movs	r2, #40	; 0x28
 8016e5e:	fb02 4103 	mla	r1, r2, r3, r4
 8016e62:	f501 728e 	add.w	r2, r1, #284	; 0x11c
    /* Init ep structure */
    ep->is_in = 1;
 8016e66:	2001      	movs	r0, #1
 8016e68:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    ep->num = i;
 8016e6c:	f881 311c 	strb.w	r3, [r1, #284]	; 0x11c
    ep->tx_fifo_num = i;
 8016e70:	f8a1 3122 	strh.w	r3, [r1, #290]	; 0x122
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8016e74:	2040      	movs	r0, #64	; 0x40
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 8016e76:	2100      	movs	r1, #0
 8016e78:	70d1      	strb	r1, [r2, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8016e7a:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8016e7c:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8016e7e:	6151      	str	r1, [r2, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8016e80:	3301      	adds	r3, #1
 8016e82:	e7e8      	b.n	8016e56 <DCD_Init+0x14>
 8016e84:	2300      	movs	r3, #0
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016e86:	7860      	ldrb	r0, [r4, #1]
 8016e88:	4283      	cmp	r3, r0
 8016e8a:	d213      	bcs.n	8016eb4 <DCD_Init+0x72>
  {
    ep = &pdev->dev.out_ep[i];
 8016e8c:	2128      	movs	r1, #40	; 0x28
 8016e8e:	fb01 4003 	mla	r0, r1, r3, r4
 8016e92:	f500 725d 	add.w	r2, r0, #884	; 0x374
    /* Init ep structure */
    ep->is_in = 0;
 8016e96:	2100      	movs	r1, #0
    ep->num = i;
 8016e98:	f880 3374 	strb.w	r3, [r0, #884]	; 0x374
    ep->tx_fifo_num = i;
 8016e9c:	f8a0 337a 	strh.w	r3, [r0, #890]	; 0x37a
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 8016ea0:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8016ea4:	f880 1377 	strb.w	r1, [r0, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8016ea8:	2040      	movs	r0, #64	; 0x40
 8016eaa:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8016eac:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8016eae:	6151      	str	r1, [r2, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	e7e8      	b.n	8016e86 <DCD_Init+0x44>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f7ff fb09 	bl	80164cc <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f7ff fab2 	bl	8016424 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8016ec0:	2100      	movs	r1, #0
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	f7ff fb42 	bl	801654c <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f7ff fd75 	bl	80169b8 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8016ece:	4620      	mov	r0, r4
}
 8016ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8016ed4:	f7ff baf3 	b.w	80164be <USB_OTG_EnableGlobalInt>

08016ed8 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8016ed8:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8016eda:	b2cd      	uxtb	r5, r1
 8016edc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8016ee0:	f04f 0628 	mov.w	r6, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016ee4:	fb06 0404 	mla	r4, r6, r4, r0
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8016ee8:	f015 0f80 	tst.w	r5, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016eec:	bf14      	ite	ne
 8016eee:	f504 748e 	addne.w	r4, r4, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8016ef2:	f504 745d 	addeq.w	r4, r4, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8016ef6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8016efa:	09ed      	lsrs	r5, r5, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8016efc:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8016efe:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8016f00:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8016f02:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8016f04:	b105      	cbz	r5, 8016f08 <DCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8016f06:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8016f08:	2b02      	cmp	r3, #2
 8016f0a:	d101      	bne.n	8016f10 <DCD_EP_Open+0x38>
  {
    ep->data_pid_start = 0;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	7123      	strb	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8016f10:	4621      	mov	r1, r4
 8016f12:	f7ff fdf5 	bl	8016b00 <USB_OTG_EPActivate>
  return 0;
}
 8016f16:	2000      	movs	r0, #0
 8016f18:	bd70      	pop	{r4, r5, r6, pc}

08016f1a <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8016f1a:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8016f1c:	b2ca      	uxtb	r2, r1
 8016f1e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016f22:	f04f 0428 	mov.w	r4, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016f26:	fb04 0303 	mla	r3, r4, r3, r0
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8016f2a:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016f2e:	bf14      	ite	ne
 8016f30:	f503 738e 	addne.w	r3, r3, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8016f34:	f503 735d 	addeq.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8016f38:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->is_in = (0x80 & ep_addr) != 0;
 8016f3c:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8016f3e:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8016f40:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8016f42:	4619      	mov	r1, r3
 8016f44:	f7ff fe0b 	bl	8016b5e <USB_OTG_EPDeactivate>
  return 0;
}
 8016f48:	2000      	movs	r0, #0
 8016f4a:	bd10      	pop	{r4, pc}

08016f4c <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8016f4c:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8016f4e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8016f52:	2528      	movs	r5, #40	; 0x28
 8016f54:	fb05 0504 	mla	r5, r5, r4, r0
 8016f58:	f505 715d 	add.w	r1, r5, #884	; 0x374
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8016f5c:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
 8016f60:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 8016f62:	2300      	movs	r3, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8016f64:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 8016f66:	618b      	str	r3, [r1, #24]
  ep->is_in = 0;
 8016f68:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
 8016f6a:	78c3      	ldrb	r3, [r0, #3]
 8016f6c:	2b01      	cmp	r3, #1
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8016f6e:	f505 755c 	add.w	r5, r5, #880	; 0x370
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8016f72:	bf08      	it	eq
 8016f74:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 8016f76:	b914      	cbnz	r4, 8016f7e <DCD_EP_PrepareRx+0x32>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8016f78:	f7ff fe95 	bl	8016ca6 <USB_OTG_EP0StartXfer>
 8016f7c:	e001      	b.n	8016f82 <DCD_EP_PrepareRx+0x36>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8016f7e:	f7ff fe0d 	bl	8016b9c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8016f82:	2000      	movs	r0, #0
 8016f84:	bd38      	pop	{r3, r4, r5, pc}

08016f86 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8016f86:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016f88:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8016f8c:	2528      	movs	r5, #40	; 0x28
 8016f8e:	fb05 0504 	mla	r5, r5, r4, r0
 8016f92:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8016f96:	2601      	movs	r6, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
 8016f98:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8016f9a:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
 8016f9c:	2200      	movs	r2, #0
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
 8016f9e:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8016fa2:	704e      	strb	r6, [r1, #1]
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8016fa4:	f505 758c 	add.w	r5, r5, #280	; 0x118
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 8016fa8:	618a      	str	r2, [r1, #24]
  ep->xfer_len  = buf_len;
 8016faa:	614b      	str	r3, [r1, #20]
  
  if ( ep->num == 0 )
 8016fac:	b914      	cbnz	r4, 8016fb4 <DCD_EP_Tx+0x2e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8016fae:	f7ff fe7a 	bl	8016ca6 <USB_OTG_EP0StartXfer>
 8016fb2:	e001      	b.n	8016fb8 <DCD_EP_Tx+0x32>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8016fb4:	f7ff fdf2 	bl	8016b9c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8016fb8:	2000      	movs	r0, #0
 8016fba:	bd70      	pop	{r4, r5, r6, pc}

08016fbc <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8016fbc:	b2ca      	uxtb	r2, r1
 8016fbe:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8016fc2:	b510      	push	{r4, lr}
 8016fc4:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8016fc8:	d006      	beq.n	8016fd8 <DCD_EP_Stall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8016fca:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8016fce:	fb03 0304 	mla	r3, r3, r4, r0
 8016fd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016fd6:	e003      	b.n	8016fe0 <DCD_EP_Stall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8016fd8:	fb03 0401 	mla	r4, r3, r1, r0
 8016fdc:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8016fe0:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8016fe2:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 8016fe4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8016fe8:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8016fea:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8016fec:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8016fee:	4619      	mov	r1, r3
 8016ff0:	f7ff fec6 	bl	8016d80 <USB_OTG_EPSetStall>
  return (0);
}
 8016ff4:	2000      	movs	r0, #0
 8016ff6:	bd10      	pop	{r4, pc}

08016ff8 <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8016ff8:	b2ca      	uxtb	r2, r1
 8016ffa:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8016ffe:	b510      	push	{r4, lr}
 8017000:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017004:	d006      	beq.n	8017014 <DCD_EP_ClrStall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8017006:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 801700a:	fb03 0304 	mla	r3, r3, r4, r0
 801700e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017012:	e003      	b.n	801701c <DCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8017014:	fb03 0401 	mla	r4, r3, r1, r0
 8017018:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 801701c:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 801701e:	09d2      	lsrs	r2, r2, #7
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
 8017020:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017024:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 8017026:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017028:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 801702a:	4619      	mov	r1, r3
 801702c:	f7ff fec3 	bl	8016db6 <USB_OTG_EPClearStall>
  return (0);
}
 8017030:	4620      	mov	r0, r4
 8017032:	bd10      	pop	{r4, pc}

08017034 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8017034:	6902      	ldr	r2, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8017036:	2300      	movs	r3, #0
  dcfg.b.devaddr = address;
 8017038:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 801703c:	6811      	ldr	r1, [r2, #0]
 801703e:	430b      	orrs	r3, r1
 8017040:	6013      	str	r3, [r2, #0]
 8017042:	4770      	bx	lr

08017044 <DCD_DevConnect>:
* @brief  Connect device (enable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
 8017044:	4770      	bx	lr

08017046 <DCD_DevDisconnect>:
* @brief  Disconnect device (disable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
 8017046:	4770      	bx	lr

08017048 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8017048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801704c:	b085      	sub	sp, #20
 801704e:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8017050:	f7ff fa91 	bl	8016576 <USB_OTG_IsDeviceMode>
 8017054:	b908      	cbnz	r0, 801705a <USBD_OTG_ISR_Handler+0x12>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8017056:	2000      	movs	r0, #0
 8017058:	e23a      	b.n	80174d0 <USBD_OTG_ISR_Handler+0x488>
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 801705a:	4620      	mov	r0, r4
 801705c:	f7ff fa97 	bl	801658e <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8017060:	4607      	mov	r7, r0
 8017062:	2800      	cmp	r0, #0
 8017064:	d0f7      	beq.n	8017056 <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 8017066:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801706a:	f00a 0008 	and.w	r0, sl, #8
 801706e:	b2c0      	uxtb	r0, r0
 8017070:	2800      	cmp	r0, #0
 8017072:	d056      	beq.n	8017122 <USBD_OTG_ISR_Handler+0xda>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8017074:	4620      	mov	r0, r4
 8017076:	f7ff feb2 	bl	8016dde <USB_OTG_ReadDevAllOutEp_itr>
 801707a:	46a3      	mov	fp, r4
 801707c:	4680      	mov	r8, r0
 801707e:	4626      	mov	r6, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8017080:	f04f 0900 	mov.w	r9, #0
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8017084:	f1b8 0f00 	cmp.w	r8, #0
 8017088:	d04a      	beq.n	8017120 <USBD_OTG_ISR_Handler+0xd8>
  {
    if (ep_intr&0x1)
 801708a:	f018 0f01 	tst.w	r8, #1
 801708e:	d03f      	beq.n	8017110 <USBD_OTG_ISR_Handler+0xc8>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8017090:	fa5f f389 	uxtb.w	r3, r9
 8017094:	4619      	mov	r1, r3
 8017096:	4620      	mov	r0, r4
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	f7ff fea6 	bl	8016dea <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 801709e:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 80170a2:	4605      	mov	r5, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 80170a4:	9b00      	ldr	r3, [sp, #0]
 80170a6:	d020      	beq.n	80170ea <USBD_OTG_ISR_Handler+0xa2>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 80170a8:	6d70      	ldr	r0, [r6, #84]	; 0x54
 80170aa:	2501      	movs	r5, #1
 80170ac:	6085      	str	r5, [r0, #8]
        if (pdev->cfg.dma_enable == 1)
 80170ae:	78e1      	ldrb	r1, [r4, #3]
 80170b0:	42a9      	cmp	r1, r5
 80170b2:	d107      	bne.n	80170c4 <USBD_OTG_ISR_Handler+0x7c>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 80170b4:	6902      	ldr	r2, [r0, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 80170b6:	f8db 137c 	ldr.w	r1, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 80170ba:	f3c2 0012 	ubfx	r0, r2, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 80170be:	1a0a      	subs	r2, r1, r0
 80170c0:	f8cb 238c 	str.w	r2, [fp, #908]	; 0x38c
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 80170c4:	4871      	ldr	r0, [pc, #452]	; (801728c <USBD_OTG_ISR_Handler+0x244>)
 80170c6:	6801      	ldr	r1, [r0, #0]
 80170c8:	4620      	mov	r0, r4
 80170ca:	680a      	ldr	r2, [r1, #0]
 80170cc:	4619      	mov	r1, r3
 80170ce:	4790      	blx	r2
        
        if (pdev->cfg.dma_enable == 1)
 80170d0:	78e3      	ldrb	r3, [r4, #3]
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	d109      	bne.n	80170ea <USBD_OTG_ISR_Handler+0xa2>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 80170d6:	f1b9 0f00 	cmp.w	r9, #0
 80170da:	d106      	bne.n	80170ea <USBD_OTG_ISR_Handler+0xa2>
 80170dc:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
 80170e0:	2805      	cmp	r0, #5
 80170e2:	d102      	bne.n	80170ea <USBD_OTG_ISR_Handler+0xa2>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80170e4:	4620      	mov	r0, r4
 80170e6:	f7ff fe8e 	bl	8016e06 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80170ea:	f005 0102 	and.w	r1, r5, #2
 80170ee:	b2ca      	uxtb	r2, r1
 80170f0:	b112      	cbz	r2, 80170f8 <USBD_OTG_ISR_Handler+0xb0>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80170f2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80170f4:	2502      	movs	r5, #2
 80170f6:	609d      	str	r5, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 80170f8:	f005 0008 	and.w	r0, r5, #8
 80170fc:	b2c1      	uxtb	r1, r0
 80170fe:	b139      	cbz	r1, 8017110 <USBD_OTG_ISR_Handler+0xc8>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8017100:	4a62      	ldr	r2, [pc, #392]	; (801728c <USBD_OTG_ISR_Handler+0x244>)
 8017102:	6815      	ldr	r5, [r2, #0]
 8017104:	4620      	mov	r0, r4
 8017106:	68ab      	ldr	r3, [r5, #8]
 8017108:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 801710a:	6d70      	ldr	r0, [r6, #84]	; 0x54
 801710c:	2108      	movs	r1, #8
 801710e:	6081      	str	r1, [r0, #8]
      }
    }
    epnum++;
 8017110:	f109 0901 	add.w	r9, r9, #1
    ep_intr >>= 1;
 8017114:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8017118:	3604      	adds	r6, #4
 801711a:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 801711e:	e7b1      	b.n	8017084 <USBD_OTG_ISR_Handler+0x3c>
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8017120:	2001      	movs	r0, #1
    }    
    
    if (gintr_status.b.inepint)
 8017122:	f00a 0a04 	and.w	sl, sl, #4
 8017126:	fa5f f38a 	uxtb.w	r3, sl
 801712a:	2b00      	cmp	r3, #0
 801712c:	f000 80b1 	beq.w	8017292 <USBD_OTG_ISR_Handler+0x24a>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8017130:	4620      	mov	r0, r4
 8017132:	f7ff fe62 	bl	8016dfa <USB_OTG_ReadDevAllInEPItr>
 8017136:	4626      	mov	r6, r4
 8017138:	4681      	mov	r9, r0
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 801713a:	f04f 0800 	mov.w	r8, #0
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 801713e:	f1b9 0f00 	cmp.w	r9, #0
 8017142:	f000 80a5 	beq.w	8017290 <USBD_OTG_ISR_Handler+0x248>
  {
    if (ep_intr&0x1) /* In ITR */
 8017146:	f019 0f01 	tst.w	r9, #1
 801714a:	f000 8099 	beq.w	8017280 <USBD_OTG_ISR_Handler+0x238>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 801714e:	fa5f fa88 	uxtb.w	sl, r8
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8017152:	6923      	ldr	r3, [r4, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8017154:	eb04 008a 	add.w	r0, r4, sl, lsl #2
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8017158:	6919      	ldr	r1, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 801715a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801715c:	6982      	ldr	r2, [r0, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 801715e:	fa25 f50a 	lsr.w	r5, r5, sl
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8017162:	6890      	ldr	r0, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8017164:	01ea      	lsls	r2, r5, #7
 8017166:	b2d5      	uxtb	r5, r2
 8017168:	430d      	orrs	r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801716a:	4005      	ands	r5, r0
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 801716c:	07ea      	lsls	r2, r5, #31
 801716e:	d51b      	bpl.n	80171a8 <USBD_OTG_ISR_Handler+0x160>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017170:	6b58      	ldr	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8017172:	4a46      	ldr	r2, [pc, #280]	; (801728c <USBD_OTG_ISR_Handler+0x244>)
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 8017174:	2501      	movs	r5, #1
 8017176:	fa05 f108 	lsl.w	r1, r5, r8
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801717a:	ea20 0001 	bic.w	r0, r0, r1
 801717e:	6358      	str	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8017180:	69b3      	ldr	r3, [r6, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8017182:	6810      	ldr	r0, [r2, #0]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8017184:	609d      	str	r5, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8017186:	4651      	mov	r1, sl
 8017188:	6843      	ldr	r3, [r0, #4]
 801718a:	4620      	mov	r0, r4
 801718c:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 801718e:	78e1      	ldrb	r1, [r4, #3]
 8017190:	42a9      	cmp	r1, r5
 8017192:	d109      	bne.n	80171a8 <USBD_OTG_ISR_Handler+0x160>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8017194:	f1b8 0f00 	cmp.w	r8, #0
 8017198:	d106      	bne.n	80171a8 <USBD_OTG_ISR_Handler+0x160>
 801719a:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
 801719e:	2a04      	cmp	r2, #4
 80171a0:	d102      	bne.n	80171a8 <USBD_OTG_ISR_Handler+0x160>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80171a2:	4620      	mov	r0, r4
 80171a4:	f7ff fe2f 	bl	8016e06 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 80171a8:	f005 0008 	and.w	r0, r5, #8
 80171ac:	b2c3      	uxtb	r3, r0
 80171ae:	b113      	cbz	r3, 80171b6 <USBD_OTG_ISR_Handler+0x16e>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 80171b0:	69b1      	ldr	r1, [r6, #24]
 80171b2:	2508      	movs	r5, #8
 80171b4:	608d      	str	r5, [r1, #8]
      }
      if (diepint.b.intktxfemp)
 80171b6:	f005 0210 	and.w	r2, r5, #16
 80171ba:	b2d0      	uxtb	r0, r2
 80171bc:	b110      	cbz	r0, 80171c4 <USBD_OTG_ISR_Handler+0x17c>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 80171be:	69b3      	ldr	r3, [r6, #24]
 80171c0:	2510      	movs	r5, #16
 80171c2:	609d      	str	r5, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 80171c4:	f005 0140 	and.w	r1, r5, #64	; 0x40
 80171c8:	b2ca      	uxtb	r2, r1
 80171ca:	b112      	cbz	r2, 80171d2 <USBD_OTG_ISR_Handler+0x18a>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 80171cc:	69b0      	ldr	r0, [r6, #24]
 80171ce:	2540      	movs	r5, #64	; 0x40
 80171d0:	6085      	str	r5, [r0, #8]
      }
      if ( diepint.b.epdisabled )
 80171d2:	f005 0302 	and.w	r3, r5, #2
 80171d6:	b2d9      	uxtb	r1, r3
 80171d8:	b111      	cbz	r1, 80171e0 <USBD_OTG_ISR_Handler+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 80171da:	69b2      	ldr	r2, [r6, #24]
 80171dc:	2502      	movs	r5, #2
 80171de:	6095      	str	r5, [r2, #8]
      }       
      if (diepint.b.emptyintr)
 80171e0:	f025 007f 	bic.w	r0, r5, #127	; 0x7f
 80171e4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80171e8:	d04a      	beq.n	8017280 <USBD_OTG_ISR_Handler+0x238>
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 80171ea:	2328      	movs	r3, #40	; 0x28
 80171ec:	fb03 4108 	mla	r1, r3, r8, r4
 80171f0:	f501 758c 	add.w	r5, r1, #280	; 0x118
 80171f4:	9501      	str	r5, [sp, #4]
 80171f6:	3504      	adds	r5, #4
  
  len = ep->xfer_len - ep->xfer_count;
 80171f8:	6968      	ldr	r0, [r5, #20]
 80171fa:	69ab      	ldr	r3, [r5, #24]
  
  if (len > ep->maxpacket)
 80171fc:	68aa      	ldr	r2, [r5, #8]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 80171fe:	1ac1      	subs	r1, r0, r3
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8017200:	69b0      	ldr	r0, [r6, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 8017202:	4291      	cmp	r1, r2
 8017204:	bf38      	it	cc
 8017206:	460a      	movcc	r2, r1
 8017208:	f102 0c03 	add.w	ip, r2, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801720c:	6982      	ldr	r2, [r0, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 801720e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8017212:	b293      	uxth	r3, r2
 8017214:	4563      	cmp	r3, ip
 8017216:	d930      	bls.n	801727a <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 8017218:	69a9      	ldr	r1, [r5, #24]
 801721a:	696a      	ldr	r2, [r5, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 801721c:	4291      	cmp	r1, r2
 801721e:	d22c      	bcs.n	801727a <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 8017220:	b35a      	cbz	r2, 801727a <USBD_OTG_ISR_Handler+0x232>
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 8017222:	68a8      	ldr	r0, [r5, #8]
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8017224:	ebc1 0b02 	rsb	fp, r1, r2
 8017228:	4583      	cmp	fp, r0
 801722a:	bf28      	it	cs
 801722c:	4683      	movcs	fp, r0
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 801722e:	f10b 0e03 	add.w	lr, fp, #3
 8017232:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8017236:	68e9      	ldr	r1, [r5, #12]
 8017238:	f8cd c000 	str.w	ip, [sp]
 801723c:	4652      	mov	r2, sl
 801723e:	fa1f f38b 	uxth.w	r3, fp
 8017242:	4620      	mov	r0, r4
 8017244:	f7ff f86a 	bl	801631c <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8017248:	68eb      	ldr	r3, [r5, #12]
    ep->xfer_count += len;
 801724a:	69aa      	ldr	r2, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801724c:	f8dd c000 	ldr.w	ip, [sp]
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8017250:	eb03 010b 	add.w	r1, r3, fp
    ep->xfer_count += len;
 8017254:	eb0b 0002 	add.w	r0, fp, r2
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8017258:	60e9      	str	r1, [r5, #12]
    ep->xfer_count += len;
 801725a:	61a8      	str	r0, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801725c:	6969      	ldr	r1, [r5, #20]
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801725e:	69b3      	ldr	r3, [r6, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8017260:	4288      	cmp	r0, r1
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8017262:	699a      	ldr	r2, [r3, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8017264:	d3d5      	bcc.n	8017212 <USBD_OTG_ISR_Handler+0x1ca>
      uint32_t fifoemptymsk = 1 << ep->num;
 8017266:	9801      	ldr	r0, [sp, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017268:	6925      	ldr	r5, [r4, #16]
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801726a:	7902      	ldrb	r2, [r0, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801726c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801726e:	2101      	movs	r1, #1
 8017270:	fa01 f002 	lsl.w	r0, r1, r2
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017274:	ea23 0300 	bic.w	r3, r3, r0
 8017278:	636b      	str	r3, [r5, #52]	; 0x34
      if (diepint.b.emptyintr)
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 801727a:	69b5      	ldr	r5, [r6, #24]
 801727c:	2280      	movs	r2, #128	; 0x80
 801727e:	60aa      	str	r2, [r5, #8]
      }
    }
    epnum++;
 8017280:	f108 0801 	add.w	r8, r8, #1
    ep_intr >>= 1;
 8017284:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8017288:	3604      	adds	r6, #4
 801728a:	e758      	b.n	801713e <USBD_OTG_ISR_Handler+0xf6>
 801728c:	2000001c 	.word	0x2000001c
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8017290:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.modemismatch)
 8017292:	b2fd      	uxtb	r5, r7
 8017294:	f005 0102 	and.w	r1, r5, #2
 8017298:	b2ca      	uxtb	r2, r1
 801729a:	b112      	cbz	r2, 80172a2 <USBD_OTG_ISR_Handler+0x25a>
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801729c:	68e3      	ldr	r3, [r4, #12]
 801729e:	2102      	movs	r1, #2
 80172a0:	6159      	str	r1, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 80172a2:	f3c7 6207 	ubfx	r2, r7, #24, #8
 80172a6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80172aa:	b2d9      	uxtb	r1, r3
 80172ac:	b1c9      	cbz	r1, 80172e2 <USBD_OTG_ISR_Handler+0x29a>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 80172ae:	7aa0      	ldrb	r0, [r4, #10]
 80172b0:	b140      	cbz	r0, 80172c4 <USBD_OTG_ISR_Handler+0x27c>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 80172b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80172b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 80172ba:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 80172be:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80172c2:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 80172c4:	6921      	ldr	r1, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 80172c6:	4a84      	ldr	r2, [pc, #528]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 80172c8:	6848      	ldr	r0, [r1, #4]
 80172ca:	f020 0301 	bic.w	r3, r0, #1
 80172ce:	604b      	str	r3, [r1, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 80172d0:	6811      	ldr	r1, [r2, #0]
 80172d2:	4620      	mov	r0, r4
 80172d4:	698b      	ldr	r3, [r1, #24]
 80172d6:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80172d8:	68e0      	ldr	r0, [r4, #12]
 80172da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80172de:	6142      	str	r2, [r0, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 80172e0:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.usbsuspend)
 80172e2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80172e6:	f008 0108 	and.w	r1, r8, #8
 80172ea:	b2cb      	uxtb	r3, r1
 80172ec:	b36b      	cbz	r3, 801734a <USBD_OTG_ISR_Handler+0x302>
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
 80172ee:	497a      	ldr	r1, [pc, #488]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
 80172f0:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 80172f4:	680b      	ldr	r3, [r1, #0]
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 80172f6:	2000      	movs	r0, #0
 80172f8:	f88d 000f 	strb.w	r0, [sp, #15]
  
  prev_status = pdev->dev.device_status;
 80172fc:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 8017300:	4620      	mov	r0, r4
 8017302:	695a      	ldr	r2, [r3, #20]
 8017304:	4790      	blx	r2
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8017306:	6920      	ldr	r0, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017308:	68e3      	ldr	r3, [r4, #12]
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 801730a:	6882      	ldr	r2, [r0, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801730c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017310:	6159      	str	r1, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8017312:	7aa0      	ldrb	r0, [r4, #10]
 8017314:	b1c0      	cbz	r0, 8017348 <USBD_OTG_ISR_Handler+0x300>
 8017316:	07d3      	lsls	r3, r2, #31
 8017318:	d516      	bpl.n	8017348 <USBD_OTG_ISR_Handler+0x300>
 801731a:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
 801731e:	2a01      	cmp	r2, #1
 8017320:	d112      	bne.n	8017348 <USBD_OTG_ISR_Handler+0x300>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 8017322:	f89d 300f 	ldrb.w	r3, [sp, #15]
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 8017326:	2b03      	cmp	r3, #3
 8017328:	d10e      	bne.n	8017348 <USBD_OTG_ISR_Handler+0x300>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 801732a:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 801732e:	6808      	ldr	r0, [r1, #0]
 8017330:	f040 0201 	orr.w	r2, r0, #1
 8017334:	600a      	str	r2, [r1, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8017336:	680b      	ldr	r3, [r1, #0]
 8017338:	f043 0003 	orr.w	r0, r3, #3
 801733c:	6008      	str	r0, [r1, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 801733e:	4967      	ldr	r1, [pc, #412]	; (80174dc <USBD_OTG_ISR_Handler+0x494>)
 8017340:	690a      	ldr	r2, [r1, #16]
 8017342:	f042 0306 	orr.w	r3, r2, #6
 8017346:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8017348:	2001      	movs	r0, #1
    }
    if (gintr_status.b.sofintr)
 801734a:	f005 0108 	and.w	r1, r5, #8
 801734e:	b2ca      	uxtb	r2, r1
 8017350:	b142      	cbz	r2, 8017364 <USBD_OTG_ISR_Handler+0x31c>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8017352:	4861      	ldr	r0, [pc, #388]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
 8017354:	6803      	ldr	r3, [r0, #0]
 8017356:	4620      	mov	r0, r4
 8017358:	68d9      	ldr	r1, [r3, #12]
 801735a:	4788      	blx	r1
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 801735c:	68e0      	ldr	r0, [r4, #12]
 801735e:	2208      	movs	r2, #8
 8017360:	6142      	str	r2, [r0, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8017362:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8017364:	f005 0510 	and.w	r5, r5, #16
 8017368:	b2ed      	uxtb	r5, r5
 801736a:	2d00      	cmp	r5, #0
 801736c:	d035      	beq.n	80173da <USBD_OTG_ISR_Handler+0x392>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 801736e:	68e6      	ldr	r6, [r4, #12]
 8017370:	69b3      	ldr	r3, [r6, #24]
 8017372:	f023 0110 	bic.w	r1, r3, #16
 8017376:	61b1      	str	r1, [r6, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8017378:	6a36      	ldr	r6, [r6, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801737a:	2228      	movs	r2, #40	; 0x28
 801737c:	f006 000f 	and.w	r0, r6, #15
  
  switch (status.b.pktsts)
 8017380:	f3c6 4343 	ubfx	r3, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8017384:	fb02 4500 	mla	r5, r2, r0, r4
  
  switch (status.b.pktsts)
 8017388:	2b02      	cmp	r3, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801738a:	f505 755d 	add.w	r5, r5, #884	; 0x374
  
  switch (status.b.pktsts)
 801738e:	d00d      	beq.n	80173ac <USBD_OTG_ISR_Handler+0x364>
 8017390:	2b06      	cmp	r3, #6
 8017392:	d11c      	bne.n	80173ce <USBD_OTG_ISR_Handler+0x386>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8017394:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 8017398:	4620      	mov	r0, r4
 801739a:	2208      	movs	r2, #8
 801739c:	f7fe ffd1 	bl	8016342 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 80173a0:	69a9      	ldr	r1, [r5, #24]
 80173a2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80173a6:	1988      	adds	r0, r1, r6
 80173a8:	61a8      	str	r0, [r5, #24]
 80173aa:	e010      	b.n	80173ce <USBD_OTG_ISR_Handler+0x386>
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 80173ac:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80173b0:	4032      	ands	r2, r6
 80173b2:	b162      	cbz	r2, 80173ce <USBD_OTG_ISR_Handler+0x386>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 80173b4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80173b8:	68e9      	ldr	r1, [r5, #12]
 80173ba:	4632      	mov	r2, r6
 80173bc:	4620      	mov	r0, r4
 80173be:	f7fe ffc0 	bl	8016342 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 80173c2:	68eb      	ldr	r3, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 80173c4:	69a8      	ldr	r0, [r5, #24]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 80173c6:	1999      	adds	r1, r3, r6
      ep->xfer_count += status.b.bcnt;
 80173c8:	1986      	adds	r6, r0, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 80173ca:	60e9      	str	r1, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 80173cc:	61ae      	str	r6, [r5, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 80173ce:	68e3      	ldr	r3, [r4, #12]
 80173d0:	699a      	ldr	r2, [r3, #24]
 80173d2:	f042 0110 	orr.w	r1, r2, #16
 80173d6:	6199      	str	r1, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 80173d8:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.usbreset)
 80173da:	f008 0310 	and.w	r3, r8, #16
 80173de:	b2da      	uxtb	r2, r3
 80173e0:	2a00      	cmp	r2, #0
 80173e2:	d034      	beq.n	801744e <USBD_OTG_ISR_Handler+0x406>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80173e4:	6926      	ldr	r6, [r4, #16]
 80173e6:	6870      	ldr	r0, [r6, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 80173e8:	2500      	movs	r5, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80173ea:	f020 0101 	bic.w	r1, r0, #1
 80173ee:	6071      	str	r1, [r6, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 80173f0:	4620      	mov	r0, r4
 80173f2:	4629      	mov	r1, r5
 80173f4:	f7ff f872 	bl	80164dc <USB_OTG_FlushTxFifo>
 80173f8:	4623      	mov	r3, r4
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80173fa:	462a      	mov	r2, r5
 80173fc:	7866      	ldrb	r6, [r4, #1]
 80173fe:	3304      	adds	r3, #4
 8017400:	42b2      	cmp	r2, r6
 8017402:	d206      	bcs.n	8017412 <USBD_OTG_ISR_Handler+0x3ca>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8017404:	695e      	ldr	r6, [r3, #20]
 8017406:	21ff      	movs	r1, #255	; 0xff
 8017408:	60b1      	str	r1, [r6, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 801740a:	6d18      	ldr	r0, [r3, #80]	; 0x50
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 801740c:	3201      	adds	r2, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 801740e:	6081      	str	r1, [r0, #8]
 8017410:	e7f4      	b.n	80173fc <USBD_OTG_ISR_Handler+0x3b4>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 8017412:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8017414:	6920      	ldr	r0, [r4, #16]
  
  daintmsk.ep.in = 1;
 8017416:	f366 050f 	bfi	r5, r6, #0, #16
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 801741a:	210b      	movs	r1, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 801741c:	f04f 32ff 	mov.w	r2, #4294967295
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 8017420:	f366 451f 	bfi	r5, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8017424:	6182      	str	r2, [r0, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8017426:	61c5      	str	r5, [r0, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8017428:	6141      	str	r1, [r0, #20]
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 801742a:	6101      	str	r1, [r0, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 801742c:	6803      	ldr	r3, [r0, #0]
  dcfg.b.devaddr = 0;
 801742e:	f36f 130a 	bfc	r3, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8017432:	6003      	str	r3, [r0, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8017434:	4620      	mov	r0, r4
 8017436:	f7ff fce6 	bl	8016e06 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801743a:	4927      	ldr	r1, [pc, #156]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801743c:	68e0      	ldr	r0, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801743e:	680b      	ldr	r3, [r1, #0]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017444:	6142      	str	r2, [r0, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8017446:	691a      	ldr	r2, [r3, #16]
 8017448:	4620      	mov	r0, r4
 801744a:	4790      	blx	r2
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 801744c:	4630      	mov	r0, r6
      
    }
    if (gintr_status.b.enumdone)
 801744e:	f008 0820 	and.w	r8, r8, #32
 8017452:	fa5f f188 	uxtb.w	r1, r8
 8017456:	b1e9      	cbz	r1, 8017494 <USBD_OTG_ISR_Handler+0x44c>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8017458:	4620      	mov	r0, r4
 801745a:	f7ff fb3b 	bl	8016ad4 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801745e:	68e5      	ldr	r5, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8017460:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8017462:	68ed      	ldr	r5, [r5, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8017464:	f7ff fb28 	bl	8016ab8 <USB_OTG_GetDeviceSpeed>
 8017468:	2803      	cmp	r0, #3
 801746a:	d106      	bne.n	801747a <USBD_OTG_ISR_Handler+0x432>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 801746c:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 801746e:	f44f 7000 	mov.w	r0, #512	; 0x200
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8017472:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8017474:	80a0      	strh	r0, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 8017476:	2209      	movs	r2, #9
 8017478:	e004      	b.n	8017484 <USBD_OTG_ISR_Handler+0x43c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801747a:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 801747c:	2340      	movs	r3, #64	; 0x40
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801747e:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8017480:	80a3      	strh	r3, [r4, #4]
    gusbcfg.b.usbtrdtim = 5;
 8017482:	2205      	movs	r2, #5
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8017484:	68e3      	ldr	r3, [r4, #12]
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 8017486:	f362 258d 	bfi	r5, r2, #10, #4
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 801748a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 801748e:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8017490:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8017492:	615a      	str	r2, [r3, #20]
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 8017494:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017498:	f007 0110 	and.w	r1, r7, #16
 801749c:	b2cb      	uxtb	r3, r1
 801749e:	b14b      	cbz	r3, 80174b4 <USBD_OTG_ISR_Handler+0x46c>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80174a0:	480d      	ldr	r0, [pc, #52]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
 80174a2:	6802      	ldr	r2, [r0, #0]
 80174a4:	4620      	mov	r0, r4
 80174a6:	69d1      	ldr	r1, [r2, #28]
 80174a8:	4788      	blx	r1
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80174aa:	68e3      	ldr	r3, [r4, #12]
 80174ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80174b0:	6158      	str	r0, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 80174b2:	2001      	movs	r0, #1
    }

    if (gintr_status.b.incomplisoout)
 80174b4:	f007 0720 	and.w	r7, r7, #32
 80174b8:	b2ff      	uxtb	r7, r7
 80174ba:	b14f      	cbz	r7, 80174d0 <USBD_OTG_ISR_Handler+0x488>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 80174bc:	4a06      	ldr	r2, [pc, #24]	; (80174d8 <USBD_OTG_ISR_Handler+0x490>)
 80174be:	6811      	ldr	r1, [r2, #0]
 80174c0:	4620      	mov	r0, r4
 80174c2:	6a0b      	ldr	r3, [r1, #32]
 80174c4:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80174c6:	68e0      	ldr	r0, [r4, #12]
 80174c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80174cc:	6142      	str	r2, [r0, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 80174ce:	2001      	movs	r0, #1
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 80174d0:	b005      	add	sp, #20
 80174d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d6:	bf00      	nop
 80174d8:	2000001c 	.word	0x2000001c
 80174dc:	e000ed00 	.word	0xe000ed00

080174e0 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 80174e0:	b538      	push	{r3, r4, r5, lr}
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 80174e2:	2300      	movs	r3, #0
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 80174e4:	4604      	mov	r4, r0
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 80174e6:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 80174ea:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 80174ee:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80174f2:	2500      	movs	r5, #0
  pdev->host.XferCnt[i]   = 0;
 80174f4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 80174f8:	6085      	str	r5, [r0, #8]
  pdev->host.XferCnt[i]   = 0;
 80174fa:	eb04 0082 	add.w	r0, r4, r2, lsl #2
  pdev->host.HC_Status[i]   = HC_IDLE;
 80174fe:	18e2      	adds	r2, r4, r3
 8017500:	3301      	adds	r3, #1
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 8017502:	2b0f      	cmp	r3, #15
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
 8017504:	6045      	str	r5, [r0, #4]
  pdev->host.HC_Status[i]   = HC_IDLE;
 8017506:	f882 5870 	strb.w	r5, [r2, #2160]	; 0x870
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 801750a:	d1ee      	bne.n	80174ea <HCD_Init+0xa>
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
  pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8; 
 801750c:	2008      	movs	r0, #8
 801750e:	f8a4 0896 	strh.w	r0, [r4, #2198]	; 0x896

  USB_OTG_SelectCore(pdev, coreID);
 8017512:	4620      	mov	r0, r4
 8017514:	f7fe ff26 	bl	8016364 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 8017518:	4620      	mov	r0, r4
 801751a:	f7fe ffd7 	bl	80164cc <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 801751e:	4620      	mov	r0, r4
 8017520:	f7fe ff80 	bl	8016424 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 8017524:	2101      	movs	r1, #1
 8017526:	4620      	mov	r0, r4
 8017528:	f7ff f810 	bl	801654c <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 801752c:	4620      	mov	r0, r4
 801752e:	f7ff f8a3 	bl	8016678 <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 8017532:	4620      	mov	r0, r4
 8017534:	f7fe ffc3 	bl	80164be <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
}
 8017538:	4628      	mov	r0, r5
 801753a:	bd38      	pop	{r3, r4, r5, pc}

0801753c <HCD_GetCurrentSpeed>:
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801753c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8017540:	6818      	ldr	r0, [r3, #0]
    
    return HPRT0.b.prtspd;
}
 8017542:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8017546:	4770      	bx	lr

08017548 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8017548:	b508      	push	{r3, lr}
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 801754a:	f7ff f87f 	bl	801664c <USB_OTG_ResetPort>
  return 0;
}
 801754e:	2000      	movs	r0, #0
 8017550:	bd08      	pop	{r3, pc}

08017552 <HCD_IsDeviceConnected>:
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
  return (pdev->host.ConnSts);
 8017552:	f8d0 07f4 	ldr.w	r0, [r0, #2036]	; 0x7f4
}
 8017556:	4770      	bx	lr

08017558 <HCD_GetCurrentFrame>:
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8017558:	6943      	ldr	r3, [r0, #20]
 801755a:	6898      	ldr	r0, [r3, #8]
}
 801755c:	b280      	uxth	r0, r0
 801755e:	4770      	bx	lr

08017560 <HCD_GetURB_State>:
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
  return pdev->host.URB_State[ch_num] ;
 8017560:	1841      	adds	r1, r0, r1
 8017562:	f891 087f 	ldrb.w	r0, [r1, #2175]	; 0x87f
}
 8017566:	4770      	bx	lr

08017568 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8017568:	b538      	push	{r3, r4, r5, lr}
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
 801756a:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 801756e:	1845      	adds	r5, r0, r1
 8017570:	2300      	movs	r3, #0
 8017572:	f885 387f 	strb.w	r3, [r5, #2175]	; 0x87f
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8017576:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 801757a:	460c      	mov	r4, r1
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 801757c:	f7ff f93c 	bl	80167f8 <USB_OTG_HC_StartXfer>
}
 8017580:	bd38      	pop	{r3, r4, r5, pc}
	...

08017584 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 801758c:	f04f 0300 	mov.w	r3, #0
 8017590:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8017592:	f240 034c 	movw	r3, #76	; 0x4c
 8017596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	f043 0308 	orr.w	r3, r3, #8
 80175a8:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	68fa      	ldr	r2, [r7, #12]
 80175b0:	615a      	str	r2, [r3, #20]
  
  return 1;
 80175b2:	f04f 0301 	mov.w	r3, #1
}
 80175b6:	4618      	mov	r0, r3
 80175b8:	f107 0710 	add.w	r7, r7, #16
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b084      	sub	sp, #16
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 80175c8:	f04f 0300 	mov.w	r3, #0
 80175cc:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 80175ce:	f240 034c 	movw	r3, #76	; 0x4c
 80175d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	689b      	ldr	r3, [r3, #8]
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80175e4:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	68fa      	ldr	r2, [r7, #12]
 80175ec:	615a      	str	r2, [r3, #20]
  
  return 1;
 80175ee:	f04f 0301 	mov.w	r3, #1
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	f107 0710 	add.w	r7, r7, #16
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}

080175fc <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b088      	sub	sp, #32
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	68db      	ldr	r3, [r3, #12]
 8017608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801760a:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 801760c:	7c3b      	ldrb	r3, [r7, #16]
 801760e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017612:	b2db      	uxtb	r3, r3
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801761a:	18d3      	adds	r3, r2, r3
 801761c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f103 0303 	add.w	r3, r3, #3
 8017626:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801762a:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 801762c:	e0a4      	b.n	8017778 <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 801762e:	89bb      	ldrh	r3, [r7, #12]
 8017630:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017634:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 8017636:	8bba      	ldrh	r2, [r7, #28]
 8017638:	7c3b      	ldrb	r3, [r7, #16]
 801763a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801763e:	b2db      	uxtb	r3, r3
 8017640:	6879      	ldr	r1, [r7, #4]
 8017642:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017646:	18cb      	adds	r3, r1, r3
 8017648:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	429a      	cmp	r2, r3
 8017650:	d91c      	bls.n	801768c <USB_OTG_USBH_handle_nptxfempty_ISR+0x90>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 8017652:	7c3b      	ldrb	r3, [r7, #16]
 8017654:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017658:	b2db      	uxtb	r3, r3
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017660:	18d3      	adds	r3, r2, r3
 8017662:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 801766a:	f04f 0300 	mov.w	r3, #0
 801766e:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8017670:	69bb      	ldr	r3, [r7, #24]
 8017672:	f043 0320 	orr.w	r3, r3, #32
 8017676:	61bb      	str	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	68db      	ldr	r3, [r3, #12]
 801767c:	687a      	ldr	r2, [r7, #4]
 801767e:	68d2      	ldr	r2, [r2, #12]
 8017680:	6991      	ldr	r1, [r2, #24]
 8017682:	69ba      	ldr	r2, [r7, #24]
 8017684:	ea6f 0202 	mvn.w	r2, r2
 8017688:	400a      	ands	r2, r1
 801768a:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 801768c:	7c3b      	ldrb	r3, [r7, #16]
 801768e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017692:	b2db      	uxtb	r3, r3
 8017694:	687a      	ldr	r2, [r7, #4]
 8017696:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801769a:	18d3      	adds	r3, r2, r3
 801769c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	f103 0303 	add.w	r3, r3, #3
 80176a6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80176aa:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 80176ac:	7c3b      	ldrb	r3, [r7, #16]
 80176ae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	f103 0315 	add.w	r3, r3, #21
 80176ba:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80176be:	18d3      	adds	r3, r2, r3
 80176c0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80176c4:	6819      	ldr	r1, [r3, #0]
 80176c6:	7c3b      	ldrb	r3, [r7, #16]
 80176c8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80176cc:	b2db      	uxtb	r3, r3
 80176ce:	461a      	mov	r2, r3
 80176d0:	8bbb      	ldrh	r3, [r7, #28]
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7fe fe22 	bl	801631c <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 80176d8:	7c3b      	ldrb	r3, [r7, #16]
 80176da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	7c3a      	ldrb	r2, [r7, #16]
 80176e2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80176e6:	b2d2      	uxtb	r2, r2
 80176e8:	6879      	ldr	r1, [r7, #4]
 80176ea:	f102 0215 	add.w	r2, r2, #21
 80176ee:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80176f2:	188a      	adds	r2, r1, r2
 80176f4:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 80176f8:	6811      	ldr	r1, [r2, #0]
 80176fa:	8bba      	ldrh	r2, [r7, #28]
 80176fc:	188a      	adds	r2, r1, r2
 80176fe:	6879      	ldr	r1, [r7, #4]
 8017700:	f103 0315 	add.w	r3, r3, #21
 8017704:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017708:	18cb      	adds	r3, r1, r3
 801770a:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801770e:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 8017710:	7c3b      	ldrb	r3, [r7, #16]
 8017712:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017716:	b2db      	uxtb	r3, r3
 8017718:	7c3a      	ldrb	r2, [r7, #16]
 801771a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801771e:	b2d2      	uxtb	r2, r2
 8017720:	6879      	ldr	r1, [r7, #4]
 8017722:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017726:	188a      	adds	r2, r1, r2
 8017728:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 801772c:	6811      	ldr	r1, [r2, #0]
 801772e:	8bba      	ldrh	r2, [r7, #28]
 8017730:	1a8a      	subs	r2, r1, r2
 8017732:	6879      	ldr	r1, [r7, #4]
 8017734:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017738:	18cb      	adds	r3, r1, r3
 801773a:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801773e:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 8017740:	7c3b      	ldrb	r3, [r7, #16]
 8017742:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017746:	b2db      	uxtb	r3, r3
 8017748:	7c3a      	ldrb	r2, [r7, #16]
 801774a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801774e:	b2d2      	uxtb	r2, r2
 8017750:	6879      	ldr	r1, [r7, #4]
 8017752:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017756:	188a      	adds	r2, r1, r2
 8017758:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801775c:	6811      	ldr	r1, [r2, #0]
 801775e:	8bba      	ldrh	r2, [r7, #28]
 8017760:	188a      	adds	r2, r1, r2
 8017762:	6879      	ldr	r1, [r7, #4]
 8017764:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017768:	18cb      	adds	r3, r1, r3
 801776a:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801776e:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	68db      	ldr	r3, [r3, #12]
 8017774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017776:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8017778:	89bb      	ldrh	r3, [r7, #12]
 801777a:	8bfa      	ldrh	r2, [r7, #30]
 801777c:	429a      	cmp	r2, r3
 801777e:	d20d      	bcs.n	801779c <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a0>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8017780:	7c3b      	ldrb	r3, [r7, #16]
 8017782:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017786:	b2db      	uxtb	r3, r3
 8017788:	687a      	ldr	r2, [r7, #4]
 801778a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801778e:	18d3      	adds	r3, r2, r3
 8017790:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017794:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8017796:	2b00      	cmp	r3, #0
 8017798:	f47f af49 	bne.w	801762e <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  
  
  return 1;
 801779c:	f04f 0301 	mov.w	r3, #1
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	f107 0720 	add.w	r7, r7, #32
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}
 80177aa:	bf00      	nop

080177ac <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b086      	sub	sp, #24
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	695b      	ldr	r3, [r3, #20]
 80177b8:	691b      	ldr	r3, [r3, #16]
 80177ba:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 80177bc:	7b3b      	ldrb	r3, [r7, #12]
 80177be:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	687a      	ldr	r2, [r7, #4]
 80177c6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80177ca:	18d3      	adds	r3, r2, r3
 80177cc:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	f103 0303 	add.w	r3, r3, #3
 80177d6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80177da:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80177dc:	e0a4      	b.n	8017928 <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 80177de:	893b      	ldrh	r3, [r7, #8]
 80177e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80177e4:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 80177e6:	8aba      	ldrh	r2, [r7, #20]
 80177e8:	7b3b      	ldrb	r3, [r7, #12]
 80177ea:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80177ee:	b2db      	uxtb	r3, r3
 80177f0:	6879      	ldr	r1, [r7, #4]
 80177f2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80177f6:	18cb      	adds	r3, r1, r3
 80177f8:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	429a      	cmp	r2, r3
 8017800:	d91c      	bls.n	801783c <USB_OTG_USBH_handle_ptxfempty_ISR+0x90>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8017802:	7b3b      	ldrb	r3, [r7, #12]
 8017804:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017808:	b2db      	uxtb	r3, r3
 801780a:	687a      	ldr	r2, [r7, #4]
 801780c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017810:	18d3      	adds	r3, r2, r3
 8017812:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 801781a:	f04f 0300 	mov.w	r3, #0
 801781e:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017826:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	68d2      	ldr	r2, [r2, #12]
 8017830:	6991      	ldr	r1, [r2, #24]
 8017832:	693a      	ldr	r2, [r7, #16]
 8017834:	ea6f 0202 	mvn.w	r2, r2
 8017838:	400a      	ands	r2, r1
 801783a:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 801783c:	7b3b      	ldrb	r3, [r7, #12]
 801783e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017842:	b2db      	uxtb	r3, r3
 8017844:	687a      	ldr	r2, [r7, #4]
 8017846:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801784a:	18d3      	adds	r3, r2, r3
 801784c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	f103 0303 	add.w	r3, r3, #3
 8017856:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801785a:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 801785c:	7b3b      	ldrb	r3, [r7, #12]
 801785e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017862:	b2db      	uxtb	r3, r3
 8017864:	687a      	ldr	r2, [r7, #4]
 8017866:	f103 0315 	add.w	r3, r3, #21
 801786a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801786e:	18d3      	adds	r3, r2, r3
 8017870:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017874:	6819      	ldr	r1, [r3, #0]
 8017876:	7b3b      	ldrb	r3, [r7, #12]
 8017878:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801787c:	b2db      	uxtb	r3, r3
 801787e:	461a      	mov	r2, r3
 8017880:	8abb      	ldrh	r3, [r7, #20]
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f7fe fd4a 	bl	801631c <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8017888:	7b3b      	ldrb	r3, [r7, #12]
 801788a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801788e:	b2db      	uxtb	r3, r3
 8017890:	7b3a      	ldrb	r2, [r7, #12]
 8017892:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017896:	b2d2      	uxtb	r2, r2
 8017898:	6879      	ldr	r1, [r7, #4]
 801789a:	f102 0215 	add.w	r2, r2, #21
 801789e:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80178a2:	188a      	adds	r2, r1, r2
 80178a4:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 80178a8:	6811      	ldr	r1, [r2, #0]
 80178aa:	8aba      	ldrh	r2, [r7, #20]
 80178ac:	188a      	adds	r2, r1, r2
 80178ae:	6879      	ldr	r1, [r7, #4]
 80178b0:	f103 0315 	add.w	r3, r3, #21
 80178b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80178b8:	18cb      	adds	r3, r1, r3
 80178ba:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80178be:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 80178c0:	7b3b      	ldrb	r3, [r7, #12]
 80178c2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80178c6:	b2db      	uxtb	r3, r3
 80178c8:	7b3a      	ldrb	r2, [r7, #12]
 80178ca:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80178ce:	b2d2      	uxtb	r2, r2
 80178d0:	6879      	ldr	r1, [r7, #4]
 80178d2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80178d6:	188a      	adds	r2, r1, r2
 80178d8:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 80178dc:	6811      	ldr	r1, [r2, #0]
 80178de:	8aba      	ldrh	r2, [r7, #20]
 80178e0:	1a8a      	subs	r2, r1, r2
 80178e2:	6879      	ldr	r1, [r7, #4]
 80178e4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80178e8:	18cb      	adds	r3, r1, r3
 80178ea:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80178ee:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 80178f0:	7b3b      	ldrb	r3, [r7, #12]
 80178f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80178f6:	b2db      	uxtb	r3, r3
 80178f8:	7b3a      	ldrb	r2, [r7, #12]
 80178fa:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80178fe:	b2d2      	uxtb	r2, r2
 8017900:	6879      	ldr	r1, [r7, #4]
 8017902:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017906:	188a      	adds	r2, r1, r2
 8017908:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801790c:	6811      	ldr	r1, [r2, #0]
 801790e:	8aba      	ldrh	r2, [r7, #20]
 8017910:	188a      	adds	r2, r1, r2
 8017912:	6879      	ldr	r1, [r7, #4]
 8017914:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017918:	18cb      	adds	r3, r1, r3
 801791a:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801791e:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	695b      	ldr	r3, [r3, #20]
 8017924:	691b      	ldr	r3, [r3, #16]
 8017926:	60bb      	str	r3, [r7, #8]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8017928:	893b      	ldrh	r3, [r7, #8]
 801792a:	8afa      	ldrh	r2, [r7, #22]
 801792c:	429a      	cmp	r2, r3
 801792e:	d20d      	bcs.n	801794c <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a0>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 8017930:	7b3b      	ldrb	r3, [r7, #12]
 8017932:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017936:	b2db      	uxtb	r3, r3
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801793e:	18d3      	adds	r3, r2, r3
 8017940:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017944:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8017946:	2b00      	cmp	r3, #0
 8017948:	f47f af49 	bne.w	80177de <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 801794c:	f04f 0301 	mov.w	r3, #1
}
 8017950:	4618      	mov	r0, r3
 8017952:	f107 0718 	add.w	r7, r7, #24
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}
 801795a:	bf00      	nop

0801795c <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b088      	sub	sp, #32
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8017964:	f04f 0300 	mov.w	r3, #0
 8017968:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 801796a:	f04f 0300 	mov.w	r3, #0
 801796e:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8017970:	f04f 0300 	mov.w	r3, #0
 8017974:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8017976:	f04f 0300 	mov.w	r3, #0
 801797a:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 801797c:	f04f 0300 	mov.w	r3, #0
 8017980:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	f36f 0382 	bfc	r3, #2, #1
 801799c:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	f36f 0341 	bfc	r3, #1, #1
 80179a4:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	f36f 03c3 	bfc	r3, #3, #1
 80179ac:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	f36f 1345 	bfc	r3, #5, #1
 80179b4:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 80179b6:	7d3b      	ldrb	r3, [r7, #20]
 80179b8:	f003 0302 	and.w	r3, r3, #2
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d00f      	beq.n	80179e2 <USB_OTG_USBH_handle_port_ISR+0x86>
  {

    hprt0_dup.b.prtconndet = 1;
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	f043 0302 	orr.w	r3, r3, #2
 80179c8:	613b      	str	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 80179ca:	f240 034c 	movw	r3, #76	; 0x4c
 80179ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	6878      	ldr	r0, [r7, #4]
 80179d8:	4798      	blx	r3
    retval |= 1;
 80179da:	69bb      	ldr	r3, [r7, #24]
 80179dc:	f043 0301 	orr.w	r3, r3, #1
 80179e0:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 80179e2:	7d3b      	ldrb	r3, [r7, #20]
 80179e4:	f003 0308 	and.w	r3, r3, #8
 80179e8:	b2db      	uxtb	r3, r3
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d058      	beq.n	8017aa0 <USB_OTG_USBH_handle_port_ISR+0x144>
  {
    hprt0_dup.b.prtenchng = 1;
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	f043 0308 	orr.w	r3, r3, #8
 80179f4:	613b      	str	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 80179f6:	7d3b      	ldrb	r3, [r7, #20]
 80179f8:	f003 0304 	and.w	r3, r3, #4
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d04e      	beq.n	8017aa0 <USB_OTG_USBH_handle_port_ISR+0x144>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8017a02:	f240 034c 	movw	r3, #76	; 0x4c
 8017a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8017a12:	7dbb      	ldrb	r3, [r7, #22]
 8017a14:	f003 0306 	and.w	r3, r3, #6
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b04      	cmp	r3, #4
 8017a1c:	d005      	beq.n	8017a2a <USB_OTG_USBH_handle_port_ISR+0xce>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8017a1e:	7dbb      	ldrb	r3, [r7, #22]
 8017a20:	f003 0306 	and.w	r3, r3, #6
 8017a24:	b2db      	uxtb	r3, r3
    if (hprt0.b.prtena == 1)
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8017a26:	2b02      	cmp	r3, #2
 8017a28:	d135      	bne.n	8017a96 <USB_OTG_USBH_handle_port_ISR+0x13a>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	695b      	ldr	r3, [r3, #20]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017a32:	7dbb      	ldrb	r3, [r7, #22]
 8017a34:	f003 0306 	and.w	r3, r3, #6
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	2b04      	cmp	r3, #4
 8017a3c:	d117      	bne.n	8017a6e <USB_OTG_USBH_handle_port_ISR+0x112>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	695b      	ldr	r3, [r3, #20]
 8017a42:	f241 7270 	movw	r2, #6000	; 0x1770
 8017a46:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8017a48:	7b3b      	ldrb	r3, [r7, #12]
 8017a4a:	f003 0303 	and.w	r3, r3, #3
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b02      	cmp	r3, #2
 8017a52:	d024      	beq.n	8017a9e <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	7a1b      	ldrb	r3, [r3, #8]
 8017a58:	2b02      	cmp	r3, #2
 8017a5a:	d104      	bne.n	8017a66 <USB_OTG_USBH_handle_port_ISR+0x10a>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f04f 0102 	mov.w	r1, #2
 8017a62:	f7fe fdbe 	bl	80165e2 <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 8017a66:	f04f 0301 	mov.w	r3, #1
 8017a6a:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017a6c:	e017      	b.n	8017a9e <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	695b      	ldr	r3, [r3, #20]
 8017a72:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8017a76:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8017a78:	7b3b      	ldrb	r3, [r7, #12]
 8017a7a:	f003 0303 	and.w	r3, r3, #3
 8017a7e:	b2db      	uxtb	r3, r3
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d00c      	beq.n	8017a9e <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f04f 0101 	mov.w	r1, #1
 8017a8a:	f7fe fdaa 	bl	80165e2 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8017a8e:	f04f 0301 	mov.w	r3, #1
 8017a92:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017a94:	e003      	b.n	8017a9e <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
      }
      else
      {
        do_reset = 1;
 8017a96:	f04f 0301 	mov.w	r3, #1
 8017a9a:	61fb      	str	r3, [r7, #28]
 8017a9c:	e000      	b.n	8017aa0 <USB_OTG_USBH_handle_port_ISR+0x144>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017a9e:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8017aa0:	7d3b      	ldrb	r3, [r7, #20]
 8017aa2:	f003 0320 	and.w	r3, r3, #32
 8017aa6:	b2db      	uxtb	r3, r3
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d007      	beq.n	8017abc <USB_OTG_USBH_handle_port_ISR+0x160>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	f043 0320 	orr.w	r3, r3, #32
 8017ab2:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8017ab4:	69bb      	ldr	r3, [r7, #24]
 8017ab6:	f043 0301 	orr.w	r3, r3, #1
 8017aba:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d002      	beq.n	8017ac8 <USB_OTG_USBH_handle_port_ISR+0x16c>
  {
    USB_OTG_ResetPort(pdev);
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	f7fe fdc2 	bl	801664c <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017ace:	693a      	ldr	r2, [r7, #16]
 8017ad0:	601a      	str	r2, [r3, #0]
  
  return retval;
 8017ad2:	69bb      	ldr	r3, [r7, #24]
}
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f107 0720 	add.w	r7, r7, #32
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop

08017ae0 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b09a      	sub	sp, #104	; 0x68
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
 8017ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8017aea:	687a      	ldr	r2, [r7, #4]
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017af2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017af6:	18d3      	adds	r3, r2, r3
 8017af8:	689b      	ldr	r3, [r3, #8]
 8017afa:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8017afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017afe:	689b      	ldr	r3, [r3, #8]
 8017b00:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8017b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b04:	68db      	ldr	r3, [r3, #12]
 8017b06:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8017b08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b0c:	4013      	ands	r3, r2
 8017b0e:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017b18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017b1c:	18d3      	adds	r3, r2, r3
 8017b1e:	689b      	ldr	r3, [r3, #8]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 8017b24:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017b28:	f003 0304 	and.w	r3, r3, #4
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d022      	beq.n	8017b78 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8017b32:	f04f 0300 	mov.w	r3, #0
 8017b36:	657b      	str	r3, [r7, #84]	; 0x54
 8017b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b3a:	f043 0304 	orr.w	r3, r3, #4
 8017b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8017b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b44:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017b46:	687a      	ldr	r2, [r7, #4]
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017b4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017b52:	18d3      	adds	r3, r2, r3
 8017b54:	689b      	ldr	r3, [r3, #8]
 8017b56:	68db      	ldr	r3, [r3, #12]
 8017b58:	653b      	str	r3, [r7, #80]	; 0x50
 8017b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b5c:	f043 0302 	orr.w	r3, r3, #2
 8017b60:	653b      	str	r3, [r7, #80]	; 0x50
 8017b62:	687a      	ldr	r2, [r7, #4]
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017b6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017b6e:	18d3      	adds	r3, r2, r3
 8017b70:	689b      	ldr	r3, [r3, #8]
 8017b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017b74:	60da      	str	r2, [r3, #12]
 8017b76:	e28c      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  } 
  else if (hcint.b.ack)
 8017b78:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017b7c:	f003 0320 	and.w	r3, r3, #32
 8017b80:	b2db      	uxtb	r3, r3
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00a      	beq.n	8017b9c <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8017b86:	f04f 0300 	mov.w	r3, #0
 8017b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b8e:	f043 0320 	orr.w	r3, r3, #32
 8017b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b98:	609a      	str	r2, [r3, #8]
 8017b9a:	e27a      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.frmovrun)
 8017b9c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017ba0:	f003 0302 	and.w	r3, r3, #2
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d028      	beq.n	8017bfc <USB_OTG_USBH_handle_hc_n_Out_ISR+0x11c>
  {
    UNMASK_HOST_INT_CHH (num);
 8017baa:	687a      	ldr	r2, [r7, #4]
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017bb6:	18d3      	adds	r3, r2, r3
 8017bb8:	689b      	ldr	r3, [r3, #8]
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bc0:	f043 0302 	orr.w	r3, r3, #2
 8017bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017bce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017bd2:	18d3      	adds	r3, r2, r3
 8017bd4:	689b      	ldr	r3, [r3, #8]
 8017bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bd8:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	b2db      	uxtb	r3, r3
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	4619      	mov	r1, r3
 8017be2:	f7fe fe93 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8017be6:	f04f 0300 	mov.w	r3, #0
 8017bea:	647b      	str	r3, [r7, #68]	; 0x44
 8017bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8017bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017bf8:	609a      	str	r2, [r3, #8]
 8017bfa:	e24a      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.xfercompl)
 8017bfc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017c00:	f003 0301 	and.w	r3, r3, #1
 8017c04:	b2db      	uxtb	r3, r3
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d03a      	beq.n	8017c80 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1a0>
  {
    pdev->host.ErrCnt[num] = 0;
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017c16:	18d3      	adds	r3, r2, r3
 8017c18:	f04f 0200 	mov.w	r2, #0
 8017c1c:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017c26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017c2a:	18d3      	adds	r3, r2, r3
 8017c2c:	689b      	ldr	r3, [r3, #8]
 8017c2e:	68db      	ldr	r3, [r3, #12]
 8017c30:	643b      	str	r3, [r7, #64]	; 0x40
 8017c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c34:	f043 0302 	orr.w	r3, r3, #2
 8017c38:	643b      	str	r3, [r7, #64]	; 0x40
 8017c3a:	687a      	ldr	r2, [r7, #4]
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017c42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017c46:	18d3      	adds	r3, r2, r3
 8017c48:	689b      	ldr	r3, [r3, #8]
 8017c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c4c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	b2db      	uxtb	r3, r3
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	4619      	mov	r1, r3
 8017c56:	f7fe fe59 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8017c5a:	f04f 0300 	mov.w	r3, #0
 8017c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c62:	f043 0301 	orr.w	r3, r3, #1
 8017c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c6c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	683b      	ldr	r3, [r7, #0]
 8017c72:	18d3      	adds	r3, r2, r3
 8017c74:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017c78:	f04f 0201 	mov.w	r2, #1
 8017c7c:	721a      	strb	r2, [r3, #8]
 8017c7e:	e208      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.stall)
 8017c80:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017c84:	f003 0308 	and.w	r3, r3, #8
 8017c88:	b2db      	uxtb	r3, r3
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d030      	beq.n	8017cf0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x210>
  {
    CLEAR_HC_INT(hcreg , stall);
 8017c8e:	f04f 0300 	mov.w	r3, #0
 8017c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c96:	f043 0308 	orr.w	r3, r3, #8
 8017c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ca0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017ca2:	687a      	ldr	r2, [r7, #4]
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017caa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017cae:	18d3      	adds	r3, r2, r3
 8017cb0:	689b      	ldr	r3, [r3, #8]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8017cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cb8:	f043 0302 	orr.w	r3, r3, #2
 8017cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017cc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017cca:	18d3      	adds	r3, r2, r3
 8017ccc:	689b      	ldr	r3, [r3, #8]
 8017cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017cd0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	4619      	mov	r1, r3
 8017cda:	f7fe fe17 	bl	801690c <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8017cde:	687a      	ldr	r2, [r7, #4]
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	18d3      	adds	r3, r2, r3
 8017ce4:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017ce8:	f04f 0205 	mov.w	r2, #5
 8017cec:	721a      	strb	r2, [r3, #8]
 8017cee:	e1d0      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.nak)
 8017cf0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017cf4:	f003 0310 	and.w	r3, r3, #16
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d03a      	beq.n	8017d74 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x294>
  {
    pdev->host.ErrCnt[num] = 0;
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	683b      	ldr	r3, [r7, #0]
 8017d02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017d06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017d0a:	18d3      	adds	r3, r2, r3
 8017d0c:	f04f 0200 	mov.w	r2, #0
 8017d10:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017d12:	687a      	ldr	r2, [r7, #4]
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017d1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017d1e:	18d3      	adds	r3, r2, r3
 8017d20:	689b      	ldr	r3, [r3, #8]
 8017d22:	68db      	ldr	r3, [r3, #12]
 8017d24:	633b      	str	r3, [r7, #48]	; 0x30
 8017d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d28:	f043 0302 	orr.w	r3, r3, #2
 8017d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8017d2e:	687a      	ldr	r2, [r7, #4]
 8017d30:	683b      	ldr	r3, [r7, #0]
 8017d32:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017d36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017d3a:	18d3      	adds	r3, r2, r3
 8017d3c:	689b      	ldr	r3, [r3, #8]
 8017d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d40:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	4619      	mov	r1, r3
 8017d4a:	f7fe fddf 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 8017d4e:	f04f 0300 	mov.w	r3, #0
 8017d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d56:	f043 0310 	orr.w	r3, r3, #16
 8017d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d60:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	18d3      	adds	r3, r2, r3
 8017d68:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017d6c:	f04f 0203 	mov.w	r2, #3
 8017d70:	721a      	strb	r2, [r3, #8]
 8017d72:	e18e      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.xacterr)
 8017d74:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d042      	beq.n	8017e08 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x328>
  {
    UNMASK_HOST_INT_CHH (num);
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017d8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017d8e:	18d3      	adds	r3, r2, r3
 8017d90:	689b      	ldr	r3, [r3, #8]
 8017d92:	68db      	ldr	r3, [r3, #12]
 8017d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d98:	f043 0302 	orr.w	r3, r3, #2
 8017d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d9e:	687a      	ldr	r2, [r7, #4]
 8017da0:	683b      	ldr	r3, [r7, #0]
 8017da2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017da6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017daa:	18d3      	adds	r3, r2, r3
 8017dac:	689b      	ldr	r3, [r3, #8]
 8017dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017db0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	4619      	mov	r1, r3
 8017dba:	f7fe fda7 	bl	801690c <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017dc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017dca:	18d3      	adds	r3, r2, r3
 8017dcc:	689b      	ldr	r3, [r3, #8]
 8017dce:	f103 0201 	add.w	r2, r3, #1
 8017dd2:	6879      	ldr	r1, [r7, #4]
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017dda:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017dde:	18cb      	adds	r3, r1, r3
 8017de0:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	18d3      	adds	r3, r2, r3
 8017de8:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017dec:	f04f 0206 	mov.w	r2, #6
 8017df0:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xacterr);
 8017df2:	f04f 0300 	mov.w	r3, #0
 8017df6:	627b      	str	r3, [r7, #36]	; 0x24
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8017e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017e04:	609a      	str	r2, [r3, #8]
 8017e06:	e144      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.nyet)
 8017e08:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d03a      	beq.n	8017e8c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3ac>
  {
    pdev->host.ErrCnt[num] = 0;
 8017e16:	687a      	ldr	r2, [r7, #4]
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017e1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017e22:	18d3      	adds	r3, r2, r3
 8017e24:	f04f 0200 	mov.w	r2, #0
 8017e28:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017e2a:	687a      	ldr	r2, [r7, #4]
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017e32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017e36:	18d3      	adds	r3, r2, r3
 8017e38:	689b      	ldr	r3, [r3, #8]
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	623b      	str	r3, [r7, #32]
 8017e3e:	6a3b      	ldr	r3, [r7, #32]
 8017e40:	f043 0302 	orr.w	r3, r3, #2
 8017e44:	623b      	str	r3, [r7, #32]
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	683b      	ldr	r3, [r7, #0]
 8017e4a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017e4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017e52:	18d3      	adds	r3, r2, r3
 8017e54:	689b      	ldr	r3, [r3, #8]
 8017e56:	6a3a      	ldr	r2, [r7, #32]
 8017e58:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	4619      	mov	r1, r3
 8017e62:	f7fe fd53 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 8017e66:	f04f 0300 	mov.w	r3, #0
 8017e6a:	61fb      	str	r3, [r7, #28]
 8017e6c:	69fb      	ldr	r3, [r7, #28]
 8017e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e72:	61fb      	str	r3, [r7, #28]
 8017e74:	69fa      	ldr	r2, [r7, #28]
 8017e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017e78:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 8017e7a:	687a      	ldr	r2, [r7, #4]
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	18d3      	adds	r3, r2, r3
 8017e80:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017e84:	f04f 0204 	mov.w	r2, #4
 8017e88:	721a      	strb	r2, [r3, #8]
 8017e8a:	e102      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.datatglerr)
 8017e8c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017e90:	f003 0304 	and.w	r3, r3, #4
 8017e94:	b2db      	uxtb	r3, r3
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d03a      	beq.n	8017f10 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x430>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017ea2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ea6:	18d3      	adds	r3, r2, r3
 8017ea8:	689b      	ldr	r3, [r3, #8]
 8017eaa:	68db      	ldr	r3, [r3, #12]
 8017eac:	61bb      	str	r3, [r7, #24]
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	f043 0302 	orr.w	r3, r3, #2
 8017eb4:	61bb      	str	r3, [r7, #24]
 8017eb6:	687a      	ldr	r2, [r7, #4]
 8017eb8:	683b      	ldr	r3, [r7, #0]
 8017eba:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017ebe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ec2:	18d3      	adds	r3, r2, r3
 8017ec4:	689b      	ldr	r3, [r3, #8]
 8017ec6:	69ba      	ldr	r2, [r7, #24]
 8017ec8:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f7fe fd1b 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8017ed6:	f04f 0300 	mov.w	r3, #0
 8017eda:	617b      	str	r3, [r7, #20]
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	f043 0310 	orr.w	r3, r3, #16
 8017ee2:	617b      	str	r3, [r7, #20]
 8017ee4:	697a      	ldr	r2, [r7, #20]
 8017ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ee8:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	18d3      	adds	r3, r2, r3
 8017ef0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017ef4:	f04f 0208 	mov.w	r2, #8
 8017ef8:	721a      	strb	r2, [r3, #8]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 8017efa:	f04f 0300 	mov.w	r3, #0
 8017efe:	613b      	str	r3, [r7, #16]
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017f06:	613b      	str	r3, [r7, #16]
 8017f08:	693a      	ldr	r2, [r7, #16]
 8017f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f0c:	609a      	str	r2, [r3, #8]
 8017f0e:	e0c0      	b.n	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }  
  else if (hcint.b.chhltd)
 8017f10:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017f14:	f003 0302 	and.w	r3, r3, #2
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	f000 80b9 	beq.w	8018092 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  {
    MASK_HOST_INT_CHH (num);
 8017f20:	687a      	ldr	r2, [r7, #4]
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017f28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017f2c:	18d3      	adds	r3, r2, r3
 8017f2e:	689b      	ldr	r3, [r3, #8]
 8017f30:	68db      	ldr	r3, [r3, #12]
 8017f32:	60fb      	str	r3, [r7, #12]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	f36f 0341 	bfc	r3, #1, #1
 8017f3a:	60fb      	str	r3, [r7, #12]
 8017f3c:	687a      	ldr	r2, [r7, #4]
 8017f3e:	683b      	ldr	r3, [r7, #0]
 8017f40:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017f44:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017f48:	18d3      	adds	r3, r2, r3
 8017f4a:	689b      	ldr	r3, [r3, #8]
 8017f4c:	68fa      	ldr	r2, [r7, #12]
 8017f4e:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8017f50:	687a      	ldr	r2, [r7, #4]
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	18d3      	adds	r3, r2, r3
 8017f56:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017f5a:	7a1b      	ldrb	r3, [r3, #8]
 8017f5c:	b2db      	uxtb	r3, r3
 8017f5e:	2b01      	cmp	r3, #1
 8017f60:	d122      	bne.n	8017fa8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c8>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8017f62:	687a      	ldr	r2, [r7, #4]
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	18d3      	adds	r3, r2, r3
 8017f68:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8017f6c:	f04f 0201 	mov.w	r2, #1
 8017f70:	71da      	strb	r2, [r3, #7]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8017f72:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8017f76:	f003 030c 	and.w	r3, r3, #12
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	2b08      	cmp	r3, #8
 8017f7e:	d17e      	bne.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8017f80:	687a      	ldr	r2, [r7, #4]
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8017f88:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017f8c:	18d3      	adds	r3, r2, r3
 8017f8e:	7a5b      	ldrb	r3, [r3, #9]
 8017f90:	f083 0301 	eor.w	r3, r3, #1
 8017f94:	b2da      	uxtb	r2, r3
 8017f96:	6879      	ldr	r1, [r7, #4]
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8017f9e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017fa2:	18cb      	adds	r3, r1, r3
 8017fa4:	725a      	strb	r2, [r3, #9]
 8017fa6:	e06a      	b.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8017fa8:	687a      	ldr	r2, [r7, #4]
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	18d3      	adds	r3, r2, r3
 8017fae:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017fb2:	7a1b      	ldrb	r3, [r3, #8]
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d108      	bne.n	8017fcc <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4ec>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	18d3      	adds	r3, r2, r3
 8017fc0:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8017fc4:	f04f 0202 	mov.w	r2, #2
 8017fc8:	71da      	strb	r2, [r3, #7]
 8017fca:	e058      	b.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	18d3      	adds	r3, r2, r3
 8017fd2:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017fd6:	7a1b      	ldrb	r3, [r3, #8]
 8017fd8:	b2db      	uxtb	r3, r3
 8017fda:	2b04      	cmp	r3, #4
 8017fdc:	d118      	bne.n	8018010 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x530>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8017fde:	687a      	ldr	r2, [r7, #4]
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017fe6:	18d3      	adds	r3, r2, r3
 8017fe8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8017fec:	7b1b      	ldrb	r3, [r3, #12]
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	d105      	bne.n	8017ffe <USB_OTG_USBH_handle_hc_n_Out_ISR+0x51e>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	f7fe fca4 	bl	8016946 <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8017ffe:	687a      	ldr	r2, [r7, #4]
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	18d3      	adds	r3, r2, r3
 8018004:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018008:	f04f 0202 	mov.w	r2, #2
 801800c:	71da      	strb	r2, [r3, #7]
 801800e:	e036      	b.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 8018010:	687a      	ldr	r2, [r7, #4]
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	18d3      	adds	r3, r2, r3
 8018016:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801801a:	7a1b      	ldrb	r3, [r3, #8]
 801801c:	b2db      	uxtb	r3, r3
 801801e:	2b05      	cmp	r3, #5
 8018020:	d108      	bne.n	8018034 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x554>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	18d3      	adds	r3, r2, r3
 8018028:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801802c:	f04f 0204 	mov.w	r2, #4
 8018030:	71da      	strb	r2, [r3, #7]
 8018032:	e024      	b.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	18d3      	adds	r3, r2, r3
 801803a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801803e:	7a1b      	ldrb	r3, [r3, #8]
 8018040:	b2db      	uxtb	r3, r3
 8018042:	2b06      	cmp	r3, #6
 8018044:	d11b      	bne.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801804e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018052:	18d3      	adds	r3, r2, r3
 8018054:	689b      	ldr	r3, [r3, #8]
 8018056:	2b03      	cmp	r3, #3
 8018058:	d111      	bne.n	801807e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	18d3      	adds	r3, r2, r3
 8018060:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018064:	f04f 0203 	mov.w	r2, #3
 8018068:	71da      	strb	r2, [r3, #7]
        pdev->host.ErrCnt[num] = 0;
 801806a:	687a      	ldr	r2, [r7, #4]
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018072:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018076:	18d3      	adds	r3, r2, r3
 8018078:	f04f 0200 	mov.w	r2, #0
 801807c:	609a      	str	r2, [r3, #8]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 801807e:	f04f 0300 	mov.w	r3, #0
 8018082:	60bb      	str	r3, [r7, #8]
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	f043 0302 	orr.w	r3, r3, #2
 801808a:	60bb      	str	r3, [r7, #8]
 801808c:	68ba      	ldr	r2, [r7, #8]
 801808e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018090:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8018092:	f04f 0301 	mov.w	r3, #1
}
 8018096:	4618      	mov	r0, r3
 8018098:	f107 0768 	add.w	r7, r7, #104	; 0x68
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}

080180a0 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b09c      	sub	sp, #112	; 0x70
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80180b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80180b6:	18d3      	adds	r3, r2, r3
 80180b8:	689b      	ldr	r3, [r3, #8]
 80180ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 80180bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180be:	689b      	ldr	r3, [r3, #8]
 80180c0:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 80180c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 80180c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80180ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80180cc:	4013      	ands	r3, r2
 80180ce:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 80180d0:	687a      	ldr	r2, [r7, #4]
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80180d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80180dc:	18d3      	adds	r3, r2, r3
 80180de:	689b      	ldr	r3, [r3, #8]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 80180e4:	f04f 0300 	mov.w	r3, #0
 80180e8:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 80180ea:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80180ee:	f003 0304 	and.w	r3, r3, #4
 80180f2:	b2db      	uxtb	r3, r3
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d022      	beq.n	801813e <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 80180f8:	f04f 0300 	mov.w	r3, #0
 80180fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80180fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018100:	f043 0304 	orr.w	r3, r3, #4
 8018104:	65bb      	str	r3, [r7, #88]	; 0x58
 8018106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801810a:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018114:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018118:	18d3      	adds	r3, r2, r3
 801811a:	689b      	ldr	r3, [r3, #8]
 801811c:	68db      	ldr	r3, [r3, #12]
 801811e:	657b      	str	r3, [r7, #84]	; 0x54
 8018120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018122:	f043 0302 	orr.w	r3, r3, #2
 8018126:	657b      	str	r3, [r7, #84]	; 0x54
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018130:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018134:	18d3      	adds	r3, r2, r3
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801813a:	60da      	str	r2, [r3, #12]
 801813c:	e098      	b.n	8018270 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 801813e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018142:	f003 0320 	and.w	r3, r3, #32
 8018146:	b2db      	uxtb	r3, r3
 8018148:	2b00      	cmp	r3, #0
 801814a:	d00a      	beq.n	8018162 <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 801814c:	f04f 0300 	mov.w	r3, #0
 8018150:	653b      	str	r3, [r7, #80]	; 0x50
 8018152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018154:	f043 0320 	orr.w	r3, r3, #32
 8018158:	653b      	str	r3, [r7, #80]	; 0x50
 801815a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801815c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801815e:	609a      	str	r2, [r3, #8]
 8018160:	e086      	b.n	8018270 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 8018162:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018166:	f003 0308 	and.w	r3, r3, #8
 801816a:	b2db      	uxtb	r3, r3
 801816c:	2b00      	cmp	r3, #0
 801816e:	d03e      	beq.n	80181ee <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 8018170:	687a      	ldr	r2, [r7, #4]
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018178:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801817c:	18d3      	adds	r3, r2, r3
 801817e:	689b      	ldr	r3, [r3, #8]
 8018180:	68db      	ldr	r3, [r3, #12]
 8018182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018186:	f043 0302 	orr.w	r3, r3, #2
 801818a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018194:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018198:	18d3      	adds	r3, r2, r3
 801819a:	689b      	ldr	r3, [r3, #8]
 801819c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801819e:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 80181a0:	687a      	ldr	r2, [r7, #4]
 80181a2:	683b      	ldr	r3, [r7, #0]
 80181a4:	18d3      	adds	r3, r2, r3
 80181a6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80181aa:	f04f 0205 	mov.w	r2, #5
 80181ae:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 80181b0:	f04f 0300 	mov.w	r3, #0
 80181b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80181b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181b8:	f043 0310 	orr.w	r3, r3, #16
 80181bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80181be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80181c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181c2:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 80181c4:	f04f 0300 	mov.w	r3, #0
 80181c8:	647b      	str	r3, [r7, #68]	; 0x44
 80181ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181cc:	f043 0308 	orr.w	r3, r3, #8
 80181d0:	647b      	str	r3, [r7, #68]	; 0x44
 80181d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80181d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181d6:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 80181d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80181da:	f36f 1304 	bfc	r3, #4, #1
 80181de:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	b2db      	uxtb	r3, r3
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	4619      	mov	r1, r3
 80181e8:	f7fe fb90 	bl	801690c <USB_OTG_HC_Halt>
 80181ec:	e040      	b.n	8018270 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 80181ee:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80181f2:	f003 0304 	and.w	r3, r3, #4
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d039      	beq.n	8018270 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018204:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018208:	18d3      	adds	r3, r2, r3
 801820a:	689b      	ldr	r3, [r3, #8]
 801820c:	68db      	ldr	r3, [r3, #12]
 801820e:	643b      	str	r3, [r7, #64]	; 0x40
 8018210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018212:	f043 0302 	orr.w	r3, r3, #2
 8018216:	643b      	str	r3, [r7, #64]	; 0x40
 8018218:	687a      	ldr	r2, [r7, #4]
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018220:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018224:	18d3      	adds	r3, r2, r3
 8018226:	689b      	ldr	r3, [r3, #8]
 8018228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801822a:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	b2db      	uxtb	r3, r3
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	4619      	mov	r1, r3
 8018234:	f7fe fb6a 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8018238:	f04f 0300 	mov.w	r3, #0
 801823c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018240:	f043 0310 	orr.w	r3, r3, #16
 8018244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801824a:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	18d3      	adds	r3, r2, r3
 8018252:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018256:	f04f 0208 	mov.w	r2, #8
 801825a:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , datatglerr);
 801825c:	f04f 0300 	mov.w	r3, #0
 8018260:	63bb      	str	r3, [r7, #56]	; 0x38
 8018262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018268:	63bb      	str	r3, [r7, #56]	; 0x38
 801826a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801826c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801826e:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8018270:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8018274:	f003 0302 	and.w	r3, r3, #2
 8018278:	b2db      	uxtb	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	d028      	beq.n	80182d0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018286:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801828a:	18d3      	adds	r3, r2, r3
 801828c:	689b      	ldr	r3, [r3, #8]
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	637b      	str	r3, [r7, #52]	; 0x34
 8018292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018294:	f043 0302 	orr.w	r3, r3, #2
 8018298:	637b      	str	r3, [r7, #52]	; 0x34
 801829a:	687a      	ldr	r2, [r7, #4]
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80182a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80182a6:	18d3      	adds	r3, r2, r3
 80182a8:	689b      	ldr	r3, [r3, #8]
 80182aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182ac:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	b2db      	uxtb	r3, r3
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	4619      	mov	r1, r3
 80182b6:	f7fe fb29 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 80182ba:	f04f 0300 	mov.w	r3, #0
 80182be:	633b      	str	r3, [r7, #48]	; 0x30
 80182c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80182c6:	633b      	str	r3, [r7, #48]	; 0x30
 80182c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182cc:	609a      	str	r2, [r3, #8]
 80182ce:	e1e7      	b.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  }
  
  else if (hcint.b.xfercompl)
 80182d0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80182d4:	f003 0301 	and.w	r3, r3, #1
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 80a7 	beq.w	801842e <USB_OTG_USBH_handle_hc_n_In_ISR+0x38e>
  {
    
    if (pdev->cfg.dma_enable == 1)
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	78db      	ldrb	r3, [r3, #3]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d11d      	bne.n	8018324 <USB_OTG_USBH_handle_hc_n_In_ISR+0x284>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80182f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80182f4:	18d3      	adds	r3, r2, r3
 80182f6:	689b      	ldr	r3, [r3, #8]
 80182f8:	691b      	ldr	r3, [r3, #16]
 80182fa:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 80182fc:	687a      	ldr	r2, [r7, #4]
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018304:	18d3      	adds	r3, r2, r3
 8018306:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801830e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018312:	1ad2      	subs	r2, r2, r3
 8018314:	6879      	ldr	r1, [r7, #4]
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 801831c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018320:	18cb      	adds	r3, r1, r3
 8018322:	605a      	str	r2, [r3, #4]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	18d3      	adds	r3, r2, r3
 801832a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801832e:	f04f 0201 	mov.w	r2, #1
 8018332:	721a      	strb	r2, [r3, #8]
    pdev->host.ErrCnt [num]= 0;
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801833c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018340:	18d3      	adds	r3, r2, r3
 8018342:	f04f 0200 	mov.w	r2, #0
 8018346:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xfercompl);
 8018348:	f04f 0300 	mov.w	r3, #0
 801834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018350:	f043 0301 	orr.w	r3, r3, #1
 8018354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801835a:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801835c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018360:	f003 030c 	and.w	r3, r3, #12
 8018364:	b2db      	uxtb	r3, r3
 8018366:	2b00      	cmp	r3, #0
 8018368:	d006      	beq.n	8018378 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d8>
        (hcchar.b.eptype == EP_TYPE_BULK))
 801836a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801836e:	f003 030c 	and.w	r3, r3, #12
 8018372:	b2db      	uxtb	r3, r3
    
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8018374:	2b08      	cmp	r3, #8
 8018376:	d13b      	bne.n	80183f0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x350>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018380:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018384:	18d3      	adds	r3, r2, r3
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	68db      	ldr	r3, [r3, #12]
 801838a:	62bb      	str	r3, [r7, #40]	; 0x28
 801838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801838e:	f043 0302 	orr.w	r3, r3, #2
 8018392:	62bb      	str	r3, [r7, #40]	; 0x28
 8018394:	687a      	ldr	r2, [r7, #4]
 8018396:	683b      	ldr	r3, [r7, #0]
 8018398:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801839c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80183a0:	18d3      	adds	r3, r2, r3
 80183a2:	689b      	ldr	r3, [r3, #8]
 80183a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183a6:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	b2db      	uxtb	r3, r3
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	4619      	mov	r1, r3
 80183b0:	f7fe faac 	bl	801690c <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 80183b4:	f04f 0300 	mov.w	r3, #0
 80183b8:	627b      	str	r3, [r7, #36]	; 0x24
 80183ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183bc:	f043 0310 	orr.w	r3, r3, #16
 80183c0:	627b      	str	r3, [r7, #36]	; 0x24
 80183c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80183c6:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 80183c8:	687a      	ldr	r2, [r7, #4]
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80183d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80183d4:	18d3      	adds	r3, r2, r3
 80183d6:	7a1b      	ldrb	r3, [r3, #8]
 80183d8:	f083 0301 	eor.w	r3, r3, #1
 80183dc:	b2da      	uxtb	r2, r3
 80183de:	6879      	ldr	r1, [r7, #4]
 80183e0:	683b      	ldr	r3, [r7, #0]
 80183e2:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80183e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80183ea:	18cb      	adds	r3, r1, r3
 80183ec:	721a      	strb	r2, [r3, #8]
 80183ee:	e157      	b.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80183f0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80183f4:	f003 030c 	and.w	r3, r3, #12
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	2b0c      	cmp	r3, #12
 80183fc:	f040 814f 	bne.w	801869e <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    {
      hcchar.b.oddfrm  = 1;
 8018400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018406:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018410:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018414:	18d3      	adds	r3, r2, r3
 8018416:	689b      	ldr	r3, [r3, #8]
 8018418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801841a:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 801841c:	687a      	ldr	r2, [r7, #4]
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	18d3      	adds	r3, r2, r3
 8018422:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018426:	f04f 0201 	mov.w	r2, #1
 801842a:	71da      	strb	r2, [r3, #7]
 801842c:	e137      	b.n	801869e <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    }
    
  }
  else if (hcint.b.chhltd)
 801842e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018432:	f003 0302 	and.w	r3, r3, #2
 8018436:	b2db      	uxtb	r3, r3
 8018438:	2b00      	cmp	r3, #0
 801843a:	f000 8086 	beq.w	801854a <USB_OTG_USBH_handle_hc_n_In_ISR+0x4aa>
  {
    MASK_HOST_INT_CHH (num);
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018446:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801844a:	18d3      	adds	r3, r2, r3
 801844c:	689b      	ldr	r3, [r3, #8]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	623b      	str	r3, [r7, #32]
 8018452:	6a3b      	ldr	r3, [r7, #32]
 8018454:	f36f 0341 	bfc	r3, #1, #1
 8018458:	623b      	str	r3, [r7, #32]
 801845a:	687a      	ldr	r2, [r7, #4]
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018462:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018466:	18d3      	adds	r3, r2, r3
 8018468:	689b      	ldr	r3, [r3, #8]
 801846a:	6a3a      	ldr	r2, [r7, #32]
 801846c:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	18d3      	adds	r3, r2, r3
 8018474:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018478:	7a1b      	ldrb	r3, [r3, #8]
 801847a:	b2db      	uxtb	r3, r3
 801847c:	2b01      	cmp	r3, #1
 801847e:	d108      	bne.n	8018492 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3f2>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8018480:	687a      	ldr	r2, [r7, #4]
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	18d3      	adds	r3, r2, r3
 8018486:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801848a:	f04f 0201 	mov.w	r2, #1
 801848e:	71da      	strb	r2, [r3, #7]
 8018490:	e050      	b.n	8018534 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8018492:	687a      	ldr	r2, [r7, #4]
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	18d3      	adds	r3, r2, r3
 8018498:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801849c:	7a1b      	ldrb	r3, [r3, #8]
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	2b05      	cmp	r3, #5
 80184a2:	d108      	bne.n	80184b6 <USB_OTG_USBH_handle_hc_n_In_ISR+0x416>
    {
      pdev->host.URB_State[num] = URB_STALL;
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	18d3      	adds	r3, r2, r3
 80184aa:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80184ae:	f04f 0204 	mov.w	r2, #4
 80184b2:	71da      	strb	r2, [r3, #7]
 80184b4:	e03e      	b.n	8018534 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 80184b6:	687a      	ldr	r2, [r7, #4]
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	18d3      	adds	r3, r2, r3
 80184bc:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80184c0:	7a1b      	ldrb	r3, [r3, #8]
 80184c2:	b2db      	uxtb	r3, r3
 80184c4:	2b06      	cmp	r3, #6
 80184c6:	d008      	beq.n	80184da <USB_OTG_USBH_handle_hc_n_In_ISR+0x43a>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 80184c8:	687a      	ldr	r2, [r7, #4]
 80184ca:	683b      	ldr	r3, [r7, #0]
 80184cc:	18d3      	adds	r3, r2, r3
 80184ce:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80184d2:	7a1b      	ldrb	r3, [r3, #8]
 80184d4:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
      pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 80184d6:	2b08      	cmp	r3, #8
 80184d8:	d112      	bne.n	8018500 <USB_OTG_USBH_handle_hc_n_In_ISR+0x460>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
      pdev->host.ErrCnt[num] = 0;
 80184da:	687a      	ldr	r2, [r7, #4]
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80184e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80184e6:	18d3      	adds	r3, r2, r3
 80184e8:	f04f 0200 	mov.w	r2, #0
 80184ec:	609a      	str	r2, [r3, #8]
      pdev->host.URB_State[num] = URB_ERROR;  
 80184ee:	687a      	ldr	r2, [r7, #4]
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	18d3      	adds	r3, r2, r3
 80184f4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80184f8:	f04f 0203 	mov.w	r2, #3
 80184fc:	71da      	strb	r2, [r3, #7]
 80184fe:	e019      	b.n	8018534 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8018500:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018504:	f003 030c 	and.w	r3, r3, #12
 8018508:	b2db      	uxtb	r3, r3
 801850a:	2b0c      	cmp	r3, #12
 801850c:	d112      	bne.n	8018534 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8018516:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801851a:	18d3      	adds	r3, r2, r3
 801851c:	7a1b      	ldrb	r3, [r3, #8]
 801851e:	f083 0301 	eor.w	r3, r3, #1
 8018522:	b2da      	uxtb	r2, r3
 8018524:	6879      	ldr	r1, [r7, #4]
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801852c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018530:	18cb      	adds	r3, r1, r3
 8018532:	721a      	strb	r2, [r3, #8]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8018534:	f04f 0300 	mov.w	r3, #0
 8018538:	61fb      	str	r3, [r7, #28]
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	f043 0302 	orr.w	r3, r3, #2
 8018540:	61fb      	str	r3, [r7, #28]
 8018542:	69fa      	ldr	r2, [r7, #28]
 8018544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018546:	609a      	str	r2, [r3, #8]
 8018548:	e0aa      	b.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }    
  else if (hcint.b.xacterr)
 801854a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801854e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018552:	b2db      	uxtb	r3, r3
 8018554:	2b00      	cmp	r3, #0
 8018556:	d042      	beq.n	80185de <USB_OTG_USBH_handle_hc_n_In_ISR+0x53e>
  {
    UNMASK_HOST_INT_CHH (num);
 8018558:	687a      	ldr	r2, [r7, #4]
 801855a:	683b      	ldr	r3, [r7, #0]
 801855c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018560:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018564:	18d3      	adds	r3, r2, r3
 8018566:	689b      	ldr	r3, [r3, #8]
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	61bb      	str	r3, [r7, #24]
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	f043 0302 	orr.w	r3, r3, #2
 8018572:	61bb      	str	r3, [r7, #24]
 8018574:	687a      	ldr	r2, [r7, #4]
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801857c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018580:	18d3      	adds	r3, r2, r3
 8018582:	689b      	ldr	r3, [r3, #8]
 8018584:	69ba      	ldr	r2, [r7, #24]
 8018586:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 8018588:	687a      	ldr	r2, [r7, #4]
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018590:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018594:	18d3      	adds	r3, r2, r3
 8018596:	689b      	ldr	r3, [r3, #8]
 8018598:	f103 0201 	add.w	r2, r3, #1
 801859c:	6879      	ldr	r1, [r7, #4]
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80185a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80185a8:	18cb      	adds	r3, r1, r3
 80185aa:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	18d3      	adds	r3, r2, r3
 80185b2:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80185b6:	f04f 0206 	mov.w	r2, #6
 80185ba:	721a      	strb	r2, [r3, #8]
    USB_OTG_HC_Halt(pdev, num);
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	4619      	mov	r1, r3
 80185c4:	f7fe f9a2 	bl	801690c <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 80185c8:	f04f 0300 	mov.w	r3, #0
 80185cc:	617b      	str	r3, [r7, #20]
 80185ce:	697b      	ldr	r3, [r7, #20]
 80185d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185d4:	617b      	str	r3, [r7, #20]
 80185d6:	697a      	ldr	r2, [r7, #20]
 80185d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185da:	609a      	str	r2, [r3, #8]
 80185dc:	e060      	b.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }
  else if (hcint.b.nak)  
 80185de:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80185e2:	f003 0310 	and.w	r3, r3, #16
 80185e6:	b2db      	uxtb	r3, r3
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d059      	beq.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 80185ec:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80185f0:	f003 030c 	and.w	r3, r3, #12
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	2b0c      	cmp	r3, #12
 80185f8:	d11e      	bne.n	8018638 <USB_OTG_USBH_handle_hc_n_In_ISR+0x598>
    {
      UNMASK_HOST_INT_CHH (num);
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018602:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018606:	18d3      	adds	r3, r2, r3
 8018608:	689b      	ldr	r3, [r3, #8]
 801860a:	68db      	ldr	r3, [r3, #12]
 801860c:	613b      	str	r3, [r7, #16]
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	f043 0302 	orr.w	r3, r3, #2
 8018614:	613b      	str	r3, [r7, #16]
 8018616:	687a      	ldr	r2, [r7, #4]
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801861e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018622:	18d3      	adds	r3, r2, r3
 8018624:	689b      	ldr	r3, [r3, #8]
 8018626:	693a      	ldr	r2, [r7, #16]
 8018628:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	b2db      	uxtb	r3, r3
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	4619      	mov	r1, r3
 8018632:	f7fe f96b 	bl	801690c <USB_OTG_HC_Halt>
 8018636:	e01f      	b.n	8018678 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8018638:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801863c:	f003 030c 	and.w	r3, r3, #12
 8018640:	b2db      	uxtb	r3, r3
 8018642:	2b00      	cmp	r3, #0
 8018644:	d006      	beq.n	8018654 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5b4>
              (hcchar.b.eptype == EP_TYPE_BULK))
 8018646:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801864a:	f003 030c 	and.w	r3, r3, #12
 801864e:	b2db      	uxtb	r3, r3
    if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8018650:	2b08      	cmp	r3, #8
 8018652:	d111      	bne.n	8018678 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
              (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 8018654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801865a:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 801865c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801865e:	f36f 739e 	bfc	r3, #30, #1
 8018662:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801866c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018670:	18d3      	adds	r3, r2, r3
 8018672:	689b      	ldr	r3, [r3, #8]
 8018674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018676:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8018678:	687a      	ldr	r2, [r7, #4]
 801867a:	683b      	ldr	r3, [r7, #0]
 801867c:	18d3      	adds	r3, r2, r3
 801867e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018682:	f04f 0203 	mov.w	r2, #3
 8018686:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   
 8018688:	f04f 0300 	mov.w	r3, #0
 801868c:	60fb      	str	r3, [r7, #12]
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	f043 0310 	orr.w	r3, r3, #16
 8018694:	60fb      	str	r3, [r7, #12]
 8018696:	68fa      	ldr	r2, [r7, #12]
 8018698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801869a:	609a      	str	r2, [r3, #8]
 801869c:	e000      	b.n	80186a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 801869e:	bf00      	nop
    pdev->host.HC_Status[num] = HC_NAK;
    CLEAR_HC_INT(hcreg , nak);   
  }
  
  
  return 1;
 80186a0:	f04f 0301 	mov.w	r3, #1
  
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	f107 0770 	add.w	r7, r7, #112	; 0x70
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}
 80186ae:	bf00      	nop

080186b0 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 80186b8:	f04f 0300 	mov.w	r3, #0
 80186bc:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 80186be:	f04f 0300 	mov.w	r3, #0
 80186c2:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 80186c4:	6878      	ldr	r0, [r7, #4]
 80186c6:	f7fd ffbe 	bl	8016646 <USB_OTG_ReadHostAllChannels_intr>
 80186ca:	4603      	mov	r3, r0
 80186cc:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 80186ce:	f04f 0300 	mov.w	r3, #0
 80186d2:	617b      	str	r3, [r7, #20]
 80186d4:	e02d      	b.n	8018732 <USB_OTG_USBH_handle_hc_ISR+0x82>
  {
    if (haint.b.chint & (1 << i))
 80186d6:	89bb      	ldrh	r3, [r7, #12]
 80186d8:	461a      	mov	r2, r3
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	fa42 f303 	asr.w	r3, r2, r3
 80186e0:	f003 0301 	and.w	r3, r3, #1
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d020      	beq.n	801872a <USB_OTG_USBH_handle_hc_ISR+0x7a>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 80186e8:	687a      	ldr	r2, [r7, #4]
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80186f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	689b      	ldr	r3, [r3, #8]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 80186fc:	7a7b      	ldrb	r3, [r7, #9]
 80186fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018702:	b2db      	uxtb	r3, r3
 8018704:	2b00      	cmp	r3, #0
 8018706:	d008      	beq.n	801871a <USB_OTG_USBH_handle_hc_ISR+0x6a>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 8018708:	6878      	ldr	r0, [r7, #4]
 801870a:	6979      	ldr	r1, [r7, #20]
 801870c:	f7ff fcc8 	bl	80180a0 <USB_OTG_USBH_handle_hc_n_In_ISR>
 8018710:	4603      	mov	r3, r0
 8018712:	693a      	ldr	r2, [r7, #16]
 8018714:	4313      	orrs	r3, r2
 8018716:	613b      	str	r3, [r7, #16]
 8018718:	e007      	b.n	801872a <USB_OTG_USBH_handle_hc_ISR+0x7a>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	6979      	ldr	r1, [r7, #20]
 801871e:	f7ff f9df 	bl	8017ae0 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 8018722:	4603      	mov	r3, r0
 8018724:	693a      	ldr	r2, [r7, #16]
 8018726:	4313      	orrs	r3, r2
 8018728:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	f103 0301 	add.w	r3, r3, #1
 8018730:	617b      	str	r3, [r7, #20]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	461a      	mov	r2, r3
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	429a      	cmp	r2, r3
 801873c:	d8cb      	bhi.n	80186d6 <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 801873e:	693b      	ldr	r3, [r7, #16]
}
 8018740:	4618      	mov	r0, r3
 8018742:	f107 0718 	add.w	r7, r7, #24
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}
 801874a:	bf00      	nop

0801874c <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b088      	sub	sp, #32
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8018754:	f04f 0300 	mov.w	r3, #0
 8018758:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 801875a:	f04f 0300 	mov.w	r3, #0
 801875e:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8018760:	697b      	ldr	r3, [r7, #20]
 8018762:	f043 0310 	orr.w	r3, r3, #16
 8018766:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	68db      	ldr	r3, [r3, #12]
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	68d2      	ldr	r2, [r2, #12]
 8018770:	6991      	ldr	r1, [r2, #24]
 8018772:	697a      	ldr	r2, [r7, #20]
 8018774:	ea6f 0202 	mvn.w	r2, r2
 8018778:	400a      	ands	r2, r1
 801877a:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	68db      	ldr	r3, [r3, #12]
 8018780:	6a1b      	ldr	r3, [r3, #32]
 8018782:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801878a:	b2db      	uxtb	r3, r3
 801878c:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 801878e:	7afb      	ldrb	r3, [r7, #11]
 8018790:	b2db      	uxtb	r3, r3
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018798:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801879c:	18d3      	adds	r3, r2, r3
 801879e:	689b      	ldr	r3, [r3, #8]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 80187a4:	69bb      	ldr	r3, [r7, #24]
 80187a6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80187aa:	b2db      	uxtb	r3, r3
 80187ac:	2b02      	cmp	r3, #2
 80187ae:	f040 809c 	bne.w	80188ea <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 80187b2:	69bb      	ldr	r3, [r7, #24]
 80187b4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f340 8096 	ble.w	80188ec <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 80187c0:	7afb      	ldrb	r3, [r7, #11]
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	687a      	ldr	r2, [r7, #4]
 80187c6:	f103 0315 	add.w	r3, r3, #21
 80187ca:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80187ce:	18d3      	adds	r3, r2, r3
 80187d0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	f000 8088 	beq.w	80188ec <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 80187dc:	7afb      	ldrb	r3, [r7, #11]
 80187de:	b2db      	uxtb	r3, r3
 80187e0:	687a      	ldr	r2, [r7, #4]
 80187e2:	f103 0315 	add.w	r3, r3, #21
 80187e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80187ea:	18d3      	adds	r3, r2, r3
 80187ec:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80187f0:	681a      	ldr	r2, [r3, #0]
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80187f8:	b29b      	uxth	r3, r3
 80187fa:	6878      	ldr	r0, [r7, #4]
 80187fc:	4611      	mov	r1, r2
 80187fe:	461a      	mov	r2, r3
 8018800:	f7fd fd9f 	bl	8016342 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8018804:	69bb      	ldr	r3, [r7, #24]
 8018806:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801880a:	b2db      	uxtb	r3, r3
 801880c:	69ba      	ldr	r2, [r7, #24]
 801880e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8018812:	b2d2      	uxtb	r2, r2
 8018814:	6879      	ldr	r1, [r7, #4]
 8018816:	f102 0215 	add.w	r2, r2, #21
 801881a:	ea4f 1242 	mov.w	r2, r2, lsl #5
 801881e:	188a      	adds	r2, r1, r2
 8018820:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8018824:	6811      	ldr	r1, [r2, #0]
 8018826:	69ba      	ldr	r2, [r7, #24]
 8018828:	f3c2 120a 	ubfx	r2, r2, #4, #11
 801882c:	b292      	uxth	r2, r2
 801882e:	188a      	adds	r2, r1, r2
 8018830:	6879      	ldr	r1, [r7, #4]
 8018832:	f103 0315 	add.w	r3, r3, #21
 8018836:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801883a:	18cb      	adds	r3, r1, r3
 801883c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018840:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8018842:	69bb      	ldr	r3, [r7, #24]
 8018844:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018848:	b2db      	uxtb	r3, r3
 801884a:	69ba      	ldr	r2, [r7, #24]
 801884c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8018850:	b2d2      	uxtb	r2, r2
 8018852:	6879      	ldr	r1, [r7, #4]
 8018854:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8018858:	188a      	adds	r2, r1, r2
 801885a:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801885e:	6811      	ldr	r1, [r2, #0]
 8018860:	69ba      	ldr	r2, [r7, #24]
 8018862:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8018866:	b292      	uxth	r2, r2
 8018868:	188a      	adds	r2, r1, r2
 801886a:	6879      	ldr	r1, [r7, #4]
 801886c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018870:	18cb      	adds	r3, r1, r3
 8018872:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8018876:	601a      	str	r2, [r3, #0]
      
      
      count = pdev->host.hc[channelnum].xfer_count;
 8018878:	7afb      	ldrb	r3, [r7, #11]
 801887a:	b2db      	uxtb	r3, r3
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018882:	18d3      	adds	r3, r2, r3
 8018884:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 801888c:	7afb      	ldrb	r3, [r7, #11]
 801888e:	b2db      	uxtb	r3, r3
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8018896:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801889a:	18d3      	adds	r3, r2, r3
 801889c:	69fa      	ldr	r2, [r7, #28]
 801889e:	605a      	str	r2, [r3, #4]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 80188a0:	7afb      	ldrb	r3, [r7, #11]
 80188a2:	b2db      	uxtb	r3, r3
 80188a4:	687a      	ldr	r2, [r7, #4]
 80188a6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80188aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80188ae:	18d3      	adds	r3, r2, r3
 80188b0:	689b      	ldr	r3, [r3, #8]
 80188b2:	691b      	ldr	r3, [r3, #16]
 80188b4:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 80188bc:	b29b      	uxth	r3, r3
 80188be:	2b00      	cmp	r3, #0
 80188c0:	dd14      	ble.n	80188ec <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80188c8:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	f36f 739e 	bfc	r3, #30, #1
 80188d0:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 80188d2:	7afb      	ldrb	r3, [r7, #11]
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	687a      	ldr	r2, [r7, #4]
 80188d8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80188dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80188e0:	18d3      	adds	r3, r2, r3
 80188e2:	689b      	ldr	r3, [r3, #8]
 80188e4:	68fa      	ldr	r2, [r7, #12]
 80188e6:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 80188e8:	e000      	b.n	80188ec <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80188ea:	e000      	b.n	80188ee <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 80188ec:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	f043 0310 	orr.w	r3, r3, #16
 80188f4:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	687a      	ldr	r2, [r7, #4]
 80188fc:	68d2      	ldr	r2, [r2, #12]
 80188fe:	6991      	ldr	r1, [r2, #24]
 8018900:	697a      	ldr	r2, [r7, #20]
 8018902:	430a      	orrs	r2, r1
 8018904:	619a      	str	r2, [r3, #24]
  return 1;
 8018906:	f04f 0301 	mov.w	r3, #1
}
 801890a:	4618      	mov	r0, r3
 801890c:	f107 0720 	add.w	r7, r7, #32
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018914:	b480      	push	{r7}
 8018916:	b085      	sub	sp, #20
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801892c:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018934:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801893c:	68ba      	ldr	r2, [r7, #8]
 801893e:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 8018940:	f04f 0300 	mov.w	r3, #0
 8018944:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801894c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	68db      	ldr	r3, [r3, #12]
 8018952:	68fa      	ldr	r2, [r7, #12]
 8018954:	615a      	str	r2, [r3, #20]
  
  return 1;
 8018956:	f04f 0301 	mov.w	r3, #1
}
 801895a:	4618      	mov	r0, r3
 801895c:	f107 0714 	add.w	r7, r7, #20
 8018960:	46bd      	mov	sp, r7
 8018962:	bc80      	pop	{r7}
 8018964:	4770      	bx	lr
 8018966:	bf00      	nop

08018968 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8018970:	f04f 0300 	mov.w	r3, #0
 8018974:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8018976:	f04f 0300 	mov.w	r3, #0
 801897a:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	f7fd fe01 	bl	8016584 <USB_OTG_IsHostMode>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	d072      	beq.n	8018a6e <USBH_OTG_ISR_Handler+0x106>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8018988:	6878      	ldr	r0, [r7, #4]
 801898a:	f7fd fe00 	bl	801658e <USB_OTG_ReadCoreItr>
 801898e:	4603      	mov	r3, r0
 8018990:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8018992:	68bb      	ldr	r3, [r7, #8]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d102      	bne.n	801899e <USBH_OTG_ISR_Handler+0x36>
    {
      return 0;
 8018998:	f04f 0300 	mov.w	r3, #0
 801899c:	e068      	b.n	8018a70 <USBH_OTG_ISR_Handler+0x108>
    }
    
    if (gintsts.b.sofintr)
 801899e:	7a3b      	ldrb	r3, [r7, #8]
 80189a0:	f003 0308 	and.w	r3, r3, #8
 80189a4:	b2db      	uxtb	r3, r3
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d006      	beq.n	80189b8 <USBH_OTG_ISR_Handler+0x50>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f7fe fdea 	bl	8017584 <USB_OTG_USBH_handle_sof_ISR>
 80189b0:	4603      	mov	r3, r0
 80189b2:	68fa      	ldr	r2, [r7, #12]
 80189b4:	4313      	orrs	r3, r2
 80189b6:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 80189b8:	7a3b      	ldrb	r3, [r7, #8]
 80189ba:	f003 0310 	and.w	r3, r3, #16
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d006      	beq.n	80189d2 <USBH_OTG_ISR_Handler+0x6a>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 80189c4:	6878      	ldr	r0, [r7, #4]
 80189c6:	f7ff fec1 	bl	801874c <USB_OTG_USBH_handle_rx_qlvl_ISR>
 80189ca:	4603      	mov	r3, r0
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	4313      	orrs	r3, r2
 80189d0:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 80189d2:	7a3b      	ldrb	r3, [r7, #8]
 80189d4:	f003 0320 	and.w	r3, r3, #32
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d006      	beq.n	80189ec <USBH_OTG_ISR_Handler+0x84>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f7fe fe0c 	bl	80175fc <USB_OTG_USBH_handle_nptxfempty_ISR>
 80189e4:	4603      	mov	r3, r0
 80189e6:	68fa      	ldr	r2, [r7, #12]
 80189e8:	4313      	orrs	r3, r2
 80189ea:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 80189ec:	7afb      	ldrb	r3, [r7, #11]
 80189ee:	f003 0304 	and.w	r3, r3, #4
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d006      	beq.n	8018a06 <USBH_OTG_ISR_Handler+0x9e>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 80189f8:	6878      	ldr	r0, [r7, #4]
 80189fa:	f7fe fed7 	bl	80177ac <USB_OTG_USBH_handle_ptxfempty_ISR>
 80189fe:	4603      	mov	r3, r0
 8018a00:	68fa      	ldr	r2, [r7, #12]
 8018a02:	4313      	orrs	r3, r2
 8018a04:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 8018a06:	7afb      	ldrb	r3, [r7, #11]
 8018a08:	f003 0302 	and.w	r3, r3, #2
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d006      	beq.n	8018a20 <USBH_OTG_ISR_Handler+0xb8>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 8018a12:	6878      	ldr	r0, [r7, #4]
 8018a14:	f7ff fe4c 	bl	80186b0 <USB_OTG_USBH_handle_hc_ISR>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	68fa      	ldr	r2, [r7, #12]
 8018a1c:	4313      	orrs	r3, r2
 8018a1e:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 8018a20:	7afb      	ldrb	r3, [r7, #11]
 8018a22:	f003 0301 	and.w	r3, r3, #1
 8018a26:	b2db      	uxtb	r3, r3
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d006      	beq.n	8018a3a <USBH_OTG_ISR_Handler+0xd2>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f7fe ff95 	bl	801795c <USB_OTG_USBH_handle_port_ISR>
 8018a32:	4603      	mov	r3, r0
 8018a34:	68fa      	ldr	r2, [r7, #12]
 8018a36:	4313      	orrs	r3, r2
 8018a38:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 8018a3a:	7afb      	ldrb	r3, [r7, #11]
 8018a3c:	f003 0320 	and.w	r3, r3, #32
 8018a40:	b2db      	uxtb	r3, r3
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d006      	beq.n	8018a54 <USBH_OTG_ISR_Handler+0xec>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f7fe fdba 	bl	80175c0 <USB_OTG_USBH_handle_Disconnect_ISR>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	68fa      	ldr	r2, [r7, #12]
 8018a50:	4313      	orrs	r3, r2
 8018a52:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 8018a54:	7abb      	ldrb	r3, [r7, #10]
 8018a56:	f003 0320 	and.w	r3, r3, #32
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d006      	beq.n	8018a6e <USBH_OTG_ISR_Handler+0x106>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f7ff ff57 	bl	8018914 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 8018a66:	4603      	mov	r3, r0
 8018a68:	68fa      	ldr	r2, [r7, #12]
 8018a6a:	4313      	orrs	r3, r2
 8018a6c:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	f107 0710 	add.w	r7, r7, #16
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop

08018a7c <STM32_USBO_OTG_ISR_Handler>:
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8018a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8018a7e:	68c3      	ldr	r3, [r0, #12]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8018a80:	4d45      	ldr	r5, [pc, #276]	; (8018b98 <STM32_USBO_OTG_ISR_Handler+0x11c>)
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8018a82:	695a      	ldr	r2, [r3, #20]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8018a84:	6999      	ldr	r1, [r3, #24]
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8018a86:	400a      	ands	r2, r1
 8018a88:	4015      	ands	r5, r2
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8018a8a:	4604      	mov	r4, r0
  uint32_t retval = 0;
  USB_OTG_GINTSTS_TypeDef  gintsts ;
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
 8018a8c:	2d00      	cmp	r5, #0
 8018a8e:	f000 8081 	beq.w	8018b94 <STM32_USBO_OTG_ISR_Handler+0x118>
  {
    return 0;
  }
  if (gintsts.b.otgintr)
 8018a92:	f002 0204 	and.w	r2, r2, #4
 8018a96:	b2d1      	uxtb	r1, r2
 8018a98:	2900      	cmp	r1, #0
 8018a9a:	d040      	beq.n	8018b1e <STM32_USBO_OTG_ISR_Handler+0xa2>
  
  
  gotgint.d32 = 0;
  gotgctl.d32 = 0;
  
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8018a9c:	685e      	ldr	r6, [r3, #4]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018a9e:	681a      	ldr	r2, [r3, #0]
  
  if (gotgint.b.sesenddet)
 8018aa0:	f006 0704 	and.w	r7, r6, #4
 8018aa4:	b2fa      	uxtb	r2, r7
 8018aa6:	b132      	cbz	r2, 8018ab6 <STM32_USBO_OTG_ISR_Handler+0x3a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018aa8:	681b      	ldr	r3, [r3, #0]
    
    
    if (USB_OTG_IsDeviceMode(pdev))
 8018aaa:	f7fd fd64 	bl	8016576 <USB_OTG_IsDeviceMode>
 8018aae:	b910      	cbnz	r0, 8018ab6 <STM32_USBO_OTG_ISR_Handler+0x3a>
    {

    }
    else if (USB_OTG_IsHostMode(pdev))
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f7fd fd67 	bl	8016584 <USB_OTG_IsHostMode>

    }
  }

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
 8018ab6:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8018aba:	07f8      	lsls	r0, r7, #31
 8018abc:	d50e      	bpl.n	8018adc <STM32_USBO_OTG_ISR_Handler+0x60>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018abe:	68e0      	ldr	r0, [r4, #12]
 8018ac0:	6803      	ldr	r3, [r0, #0]
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8018ac2:	07d9      	lsls	r1, r3, #31
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018ac4:	4620      	mov	r0, r4

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8018ac6:	d507      	bpl.n	8018ad8 <STM32_USBO_OTG_ISR_Handler+0x5c>
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018ac8:	f7fd fd55 	bl	8016576 <USB_OTG_IsDeviceMode>

      }
      /* Clear Session Request */
      gotgctl.d32 = 0;
      gotgctl.b.sesreq = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
 8018acc:	68e1      	ldr	r1, [r4, #12]
 8018ace:	680a      	ldr	r2, [r1, #0]
 8018ad0:	f022 0002 	bic.w	r0, r2, #2
 8018ad4:	6008      	str	r0, [r1, #0]
 8018ad6:	e001      	b.n	8018adc <STM32_USBO_OTG_ISR_Handler+0x60>
    }
    else /* Session request failure                                          */
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018ad8:	f7fd fd4d 	bl	8016576 <USB_OTG_IsDeviceMode>

      }
    }
  }
  /* ----> HNP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.hstnegsucstschng)
 8018adc:	f007 0702 	and.w	r7, r7, #2
 8018ae0:	b2fb      	uxtb	r3, r7
 8018ae2:	b143      	cbz	r3, 8018af6 <STM32_USBO_OTG_ISR_Handler+0x7a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018ae4:	68e1      	ldr	r1, [r4, #12]
 8018ae6:	680a      	ldr	r2, [r1, #0]

    if (gotgctl.b.hstnegscs)                                    /* Host negotiation success                                         */
 8018ae8:	05d2      	lsls	r2, r2, #23
 8018aea:	d502      	bpl.n	8018af2 <STM32_USBO_OTG_ISR_Handler+0x76>
    {
      if (USB_OTG_IsHostMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8018aec:	4620      	mov	r0, r4
 8018aee:	f7fd fd49 	bl	8016584 <USB_OTG_IsHostMode>
    }
    else                                                        /* Host negotiation failure */
    {

    }
    gotgint.b.hstnegsucstschng = 1;                             /* Ack "Host Negotiation Success Status Change" interrupt.          */
 8018af2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  }
  /* ----> HOST NEGOTIATION DETECTED INTERRUPT <---- */
  if (gotgint.b.hstnegdet)
 8018af6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018afa:	f007 0002 	and.w	r0, r7, #2
 8018afe:	b2c3      	uxtb	r3, r0
 8018b00:	b113      	cbz	r3, 8018b08 <STM32_USBO_OTG_ISR_Handler+0x8c>
  {
    if (USB_OTG_IsDeviceMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7fd fd37 	bl	8016576 <USB_OTG_IsDeviceMode>

    }
  }
  if (gotgint.b.adevtoutchng)
  {}
  if (gotgint.b.debdone)
 8018b08:	f007 0108 	and.w	r1, r7, #8
 8018b0c:	b2cf      	uxtb	r7, r1
 8018b0e:	b117      	cbz	r7, 8018b16 <STM32_USBO_OTG_ISR_Handler+0x9a>
  {
    USB_OTG_ResetPort(pdev);
 8018b10:	4620      	mov	r0, r4
 8018b12:	f7fd fd9b 	bl	801664c <USB_OTG_ResetPort>
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8018b16:	68e2      	ldr	r2, [r4, #12]
  {
    return 0;
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
 8018b18:	2001      	movs	r0, #1
  if (gotgint.b.debdone)
  {
    USB_OTG_ResetPort(pdev);
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8018b1a:	6056      	str	r6, [r2, #4]
 8018b1c:	e000      	b.n	8018b20 <STM32_USBO_OTG_ISR_Handler+0xa4>
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t retval = 0;
 8018b1e:	4608      	mov	r0, r1
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
 8018b20:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8018b24:	f003 0110 	and.w	r1, r3, #16
 8018b28:	b2ca      	uxtb	r2, r1
 8018b2a:	b312      	cbz	r2, 8018b72 <STM32_USBO_OTG_ISR_Handler+0xf6>
  gintsts.d32 = 0 ;
  gintmsk.d32 = 0 ;
  gotgctl.d32 = 0 ;
  gintmsk.b.sofintr = 1;
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
 8018b2c:	68e0      	ldr	r0, [r4, #12]
 8018b2e:	6983      	ldr	r3, [r0, #24]
 8018b30:	f023 0108 	bic.w	r1, r3, #8
 8018b34:	6181      	str	r1, [r0, #24]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018b36:	6802      	ldr	r2, [r0, #0]
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8018b38:	03d3      	lsls	r3, r2, #15
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018b3a:	4620      	mov	r0, r4
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8018b3c:	d509      	bpl.n	8018b52 <STM32_USBO_OTG_ISR_Handler+0xd6>
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018b3e:	f7fd fcc5 	bl	80164cc <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitDev(pdev);
 8018b42:	4620      	mov	r0, r4
 8018b44:	f7fd ff38 	bl	80169b8 <USB_OTG_CoreInitDev>
    USB_OTG_EnableGlobalInt(pdev);
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f7fd fcb8 	bl	80164be <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = B_PERIPHERAL;
 8018b4e:	2004      	movs	r0, #4
 8018b50:	e008      	b.n	8018b64 <STM32_USBO_OTG_ISR_Handler+0xe8>
  }
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018b52:	f7fd fcbb 	bl	80164cc <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
 8018b56:	4620      	mov	r0, r4
 8018b58:	f7fd fd8e 	bl	8016678 <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	f7fd fcae 	bl	80164be <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = A_HOST;
 8018b62:	2001      	movs	r0, #1
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018b64:	68e3      	ldr	r3, [r4, #12]
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
    pdev->otg.OTG_State = A_HOST;
 8018b66:	f884 0a90 	strb.w	r0, [r4, #2704]	; 0xa90
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018b6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8018b6e:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
 8018b70:	2001      	movs	r0, #1
  }
  if (gintsts.b.sessreqintr)
 8018b72:	f3c5 6507 	ubfx	r5, r5, #24, #8
 8018b76:	f005 0240 	and.w	r2, r5, #64	; 0x40
 8018b7a:	b2d5      	uxtb	r5, r2
 8018b7c:	b15d      	cbz	r5, 8018b96 <STM32_USBO_OTG_ISR_Handler+0x11a>


  gotgctl.d32 = 0;
  gintsts.d32 = 0;

  gotgctl.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GOTGCTL );
 8018b7e:	68e0      	ldr	r0, [r4, #12]
 8018b80:	6803      	ldr	r3, [r0, #0]
  if (USB_OTG_IsDeviceMode(pdev) && (gotgctl.b.bsesvld))
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7fd fcf7 	bl	8016576 <USB_OTG_IsDeviceMode>
    
  }
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.sessreqintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018b88:	68e3      	ldr	r3, [r4, #12]
 8018b8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018b8e:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
  }
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
 8018b90:	2001      	movs	r0, #1
 8018b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
  {
    return 0;
 8018b94:	4628      	mov	r0, r5
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
  }
  return retval;
}
 8018b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b98:	50000004 	.word	0x50000004

08018b9c <APP_LCD_ExtPort_PinSet>:
// set pin directly
inline static s32 APP_LCD_ExtPort_PinSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 8, value);
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 8, value);
 8018b9c:	3008      	adds	r0, #8
 8018b9e:	b2c0      	uxtb	r0, r0
 8018ba0:	f7fa bb78 	b.w	8013294 <MIOS32_BOARD_J10_PinSet>

08018ba4 <APP_LCD_ExtPort_UpdateSRs>:
  return -1;
#endif
}

// pulse the RC line after a serial data shift
inline static s32 APP_LCD_ExtPort_UpdateSRs(void) {
 8018ba4:	b508      	push	{r3, lr}
#if defined(MIOS32_FAMILY_STM32F10x)
  APP_LCD_ExtPort_PinSet(2, 0); // J5C.A10
  APP_LCD_ExtPort_PinSet(2, 1); // J5C.A10
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  APP_LCD_ExtPort_PinSet(2, 0); // J10B.D10
 8018ba6:	2100      	movs	r1, #0
 8018ba8:	2002      	movs	r0, #2
 8018baa:	f7ff fff7 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
  APP_LCD_ExtPort_PinSet(2, 1); // J10B.D10
 8018bae:	2002      	movs	r0, #2
 8018bb0:	2101      	movs	r1, #1
 8018bb2:	f7ff fff3 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_UpdateSRs not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018bb6:	2000      	movs	r0, #0
 8018bb8:	bd08      	pop	{r3, pc}
	...

08018bbc <APP_LCD_GLCD_CS_Set>:
/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of GLCDs with parallel port depending on X cursor position
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
 8018bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
 8018bbe:	4b14      	ldr	r3, [pc, #80]	; (8018c10 <APP_LCD_GLCD_CS_Set+0x54>)
 8018bc0:	7819      	ldrb	r1, [r3, #0]
 8018bc2:	f1b1 0281 	subs.w	r2, r1, #129	; 0x81
 8018bc6:	4255      	negs	r5, r2
 8018bc8:	4155      	adcs	r5, r2
  u8 level_nonactive = level_active ? 0 : 1;
#if SED1520_POLLIN_WINTEK_WD_G1203T
  u8 segment_width = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520) ? 61 : 64;
 8018bca:	2986      	cmp	r1, #134	; 0x86
 8018bcc:	bf14      	ite	ne
 8018bce:	2440      	movne	r4, #64	; 0x40
 8018bd0:	243d      	moveq	r4, #61	; 0x3d
#else
  u8 segment_width = 64; // should be valid for KS0108 and SED1320 (although sometimes the controllers provide more columns)
#endif

  int cs;
  if( all ) {
 8018bd2:	b140      	cbz	r0, 8018be6 <APP_LCD_GLCD_CS_Set+0x2a>
 8018bd4:	2400      	movs	r4, #0
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8018bd6:	b2e0      	uxtb	r0, r4
 8018bd8:	4629      	mov	r1, r5
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018bda:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8018bdc:	f7ff ffde 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018be0:	2c08      	cmp	r4, #8
 8018be2:	d1f8      	bne.n	8018bd6 <APP_LCD_GLCD_CS_Set+0x1a>
 8018be4:	e011      	b.n	8018c0a <APP_LCD_GLCD_CS_Set+0x4e>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8018be6:	4f0b      	ldr	r7, [pc, #44]	; (8018c14 <APP_LCD_GLCD_CS_Set+0x58>)
 8018be8:	883b      	ldrh	r3, [r7, #0]
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
  u8 level_nonactive = level_active ? 0 : 1;
 8018bea:	f085 0601 	eor.w	r6, r5, #1
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8018bee:	fb93 f7f4 	sdiv	r7, r3, r4

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018bf2:	4604      	mov	r4, r0
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8018bf4:	b2f9      	uxtb	r1, r7
 8018bf6:	428c      	cmp	r4, r1
 8018bf8:	bf14      	ite	ne
 8018bfa:	4631      	movne	r1, r6
 8018bfc:	4629      	moveq	r1, r5
 8018bfe:	b2e0      	uxtb	r0, r4
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018c00:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8018c02:	f7ff ffcb 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018c06:	2c08      	cmp	r4, #8
 8018c08:	d1f4      	bne.n	8018bf4 <APP_LCD_GLCD_CS_Set+0x38>
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
  }

  return 0; // no error
}
 8018c0a:	2000      	movs	r0, #0
 8018c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	200037d6 	.word	0x200037d6
 8018c14:	200037e8 	.word	0x200037e8

08018c18 <APP_LCD_ExtPort_Init>:
# warning "APP_LCD_NUM_EXT_PINS not adapted for this MIOS32_FAMILY"
# define APP_LCD_NUM_EXT_PINS 0
#endif

// pin initialisation
inline static s32 APP_LCD_ExtPort_Init(void) {
 8018c18:	b510      	push	{r4, lr}
 8018c1a:	2408      	movs	r4, #8
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	3401      	adds	r4, #1
 8018c20:	2105      	movs	r1, #5
 8018c22:	b2e4      	uxtb	r4, r4
 8018c24:	f7fa fb33 	bl	801328e <MIOS32_BOARD_J10_PinInit>
    MIOS32_BOARD_J5_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
 8018c28:	2c10      	cmp	r4, #16
 8018c2a:	d1f7      	bne.n	8018c1c <APP_LCD_ExtPort_Init+0x4>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_Init not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	bd10      	pop	{r4, pc}

08018c30 <APP_LCD_SERGLCD_CS_Init>:
// - 8 CS lines are available at J15
// - additional lines are available at the extension IO port
//   (either directly, or via DOUT shift register)
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Init(void)
{
 8018c30:	b510      	push	{r4, lr}
  int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 8018c32:	4b0b      	ldr	r3, [pc, #44]	; (8018c60 <APP_LCD_SERGLCD_CS_Init+0x30>)
 8018c34:	785c      	ldrb	r4, [r3, #1]
 8018c36:	7898      	ldrb	r0, [r3, #2]
 8018c38:	fb14 f400 	smulbb	r4, r4, r0

  if( num_lcds > 8 ) {
 8018c3c:	2c08      	cmp	r4, #8
 8018c3e:	dd01      	ble.n	8018c44 <APP_LCD_SERGLCD_CS_Init+0x14>
    APP_LCD_ExtPort_Init();
 8018c40:	f7ff ffea 	bl	8018c18 <APP_LCD_ExtPort_Init>
  }

  display_available |= (1 << num_lcds)-1;
 8018c44:	4907      	ldr	r1, [pc, #28]	; (8018c64 <APP_LCD_SERGLCD_CS_Init+0x34>)
 8018c46:	2201      	movs	r2, #1
 8018c48:	fa02 f304 	lsl.w	r3, r2, r4
 8018c4c:	1e5c      	subs	r4, r3, #1
 8018c4e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018c52:	4322      	orrs	r2, r4
 8018c54:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
 8018c58:	e9c1 2300 	strd	r2, r3, [r1]

  return 0; // no error
}
 8018c5c:	2000      	movs	r0, #0
 8018c5e:	bd10      	pop	{r4, pc}
 8018c60:	200037d6 	.word	0x200037d6
 8018c64:	20000618 	.word	0x20000618

08018c68 <APP_LCD_ExtPort_SerDataShift.part.0>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 8018c68:	2108      	movs	r1, #8
 8018c6a:	4b0b      	ldr	r3, [pc, #44]	; (8018c98 <APP_LCD_ExtPort_SerDataShift.part.0+0x30>)
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
 8018c6c:	f010 0f01 	tst.w	r0, #1
 8018c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018c74:	bf14      	ite	ne
 8018c76:	831a      	strhne	r2, [r3, #24]
 8018c78:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8018c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8018c7e:	0840      	lsrs	r0, r0, #1
 8018c80:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8018c82:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018c84:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018c86:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018c88:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018c8a:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8018c8c:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8018c8e:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8018c90:	831a      	strh	r2, [r3, #24]
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8018c92:	d1ea      	bne.n	8018c6a <APP_LCD_ExtPort_SerDataShift.part.0+0x2>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018c94:	4770      	bx	lr
 8018c96:	bf00      	nop
 8018c98:	40020800 	.word	0x40020800

08018c9c <APP_LCD_ExtPort_SerDataShift>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 8018c9c:	b510      	push	{r4, lr}
 8018c9e:	4604      	mov	r4, r0
    }
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
 8018ca0:	b111      	cbz	r1, 8018ca8 <APP_LCD_ExtPort_SerDataShift+0xc>
 8018ca2:	f7ff ffe1 	bl	8018c68 <APP_LCD_ExtPort_SerDataShift.part.0>
 8018ca6:	e016      	b.n	8018cd6 <APP_LCD_ExtPort_SerDataShift+0x3a>
 8018ca8:	2108      	movs	r1, #8
 8018caa:	4b0c      	ldr	r3, [pc, #48]	; (8018cdc <APP_LCD_ExtPort_SerDataShift+0x40>)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
 8018cac:	f014 0f80 	tst.w	r4, #128	; 0x80
 8018cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018cb4:	bf14      	ite	ne
 8018cb6:	831a      	strhne	r2, [r3, #24]
 8018cb8:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8018cba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8018cbe:	0064      	lsls	r4, r4, #1
 8018cc0:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8018cc2:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8018cc4:	b2e4      	uxtb	r4, r4
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018cc6:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018cc8:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018cca:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8018ccc:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8018cce:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8018cd0:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8018cd2:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8018cd4:	d1e9      	bne.n	8018caa <APP_LCD_ExtPort_SerDataShift+0xe>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018cd6:	2000      	movs	r0, #0
 8018cd8:	bd10      	pop	{r4, pc}
 8018cda:	bf00      	nop
 8018cdc:	40020800 	.word	0x40020800

08018ce0 <APP_LCD_E_Set>:

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8018ce0:	b570      	push	{r4, r5, r6, lr}
  if( mios32_lcd_device < 2 ) {
 8018ce2:	4b1d      	ldr	r3, [pc, #116]	; (8018d58 <APP_LCD_E_Set+0x78>)

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8018ce4:	4601      	mov	r1, r0
  if( mios32_lcd_device < 2 ) {
 8018ce6:	7818      	ldrb	r0, [r3, #0]
 8018ce8:	2801      	cmp	r0, #1
 8018cea:	d803      	bhi.n	8018cf4 <APP_LCD_E_Set+0x14>
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 8018cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
 8018cf0:	f7fa bae2 	b.w	80132b8 <MIOS32_BOARD_J15_E_Set>
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
 8018cf4:	4a19      	ldr	r2, [pc, #100]	; (8018d5c <APP_LCD_E_Set+0x7c>)
 8018cf6:	7893      	ldrb	r3, [r2, #2]
 8018cf8:	7854      	ldrb	r4, [r2, #1]
 8018cfa:	fb14 f203 	smulbb	r2, r4, r3
  if( num_additional_lcds < 0 )
 8018cfe:	1e93      	subs	r3, r2, #2
 8018d00:	d426      	bmi.n	8018d50 <APP_LCD_E_Set+0x70>
    return -2; // E line not configured

  if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8018d02:	2b08      	cmp	r3, #8
 8018d04:	f1a0 0002 	sub.w	r0, r0, #2
 8018d08:	dc03      	bgt.n	8018d12 <APP_LCD_E_Set+0x32>
    // the extension pin lines are used as dedicated E pins
    APP_LCD_ExtPort_PinSet(mios32_lcd_device - 2, value);
 8018d0a:	b2c0      	uxtb	r0, r0
 8018d0c:	f7ff ff46 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
 8018d10:	e01c      	b.n	8018d4c <APP_LCD_E_Set+0x6c>
  } else {
    if( num_additional_lcds >= (MAX_LCDS-2) )
      num_additional_lcds = MAX_LCDS-2; // saturate
 8018d12:	2b3e      	cmp	r3, #62	; 0x3e
 8018d14:	bfa8      	it	ge
 8018d16:	233e      	movge	r3, #62	; 0x3e
    int num_shifts = num_additional_lcds / 8;
 8018d18:	10dc      	asrs	r4, r3, #3
    if( num_additional_lcds % 8 )
 8018d1a:	075d      	lsls	r5, r3, #29
      ++num_shifts;
 8018d1c:	bf18      	it	ne
 8018d1e:	3401      	addne	r4, #1

    int selected_lcd = mios32_lcd_device - 2;
    int selected_lcd_sr = selected_lcd / 8;
 8018d20:	10c6      	asrs	r6, r0, #3
    u8 selected_lcd_mask = value ? (1 << (selected_lcd % 8)) : 0;
 8018d22:	b131      	cbz	r1, 8018d32 <APP_LCD_E_Set+0x52>
 8018d24:	f000 0007 	and.w	r0, r0, #7
 8018d28:	2501      	movs	r5, #1
 8018d2a:	fa05 f500 	lsl.w	r5, r5, r0
 8018d2e:	b2ed      	uxtb	r5, r5
 8018d30:	e000      	b.n	8018d34 <APP_LCD_E_Set+0x54>
 8018d32:	460d      	mov	r5, r1

    // shift data
    int i;
    for(i=num_shifts-1; i>=0; --i) {
 8018d34:	3c01      	subs	r4, #1
 8018d36:	42b4      	cmp	r4, r6
 8018d38:	bf0c      	ite	eq
 8018d3a:	4628      	moveq	r0, r5
 8018d3c:	2000      	movne	r0, #0
 8018d3e:	f7ff ff93 	bl	8018c68 <APP_LCD_ExtPort_SerDataShift.part.0>
 8018d42:	f114 34ff 	adds.w	r4, r4, #4294967295
 8018d46:	d2f6      	bcs.n	8018d36 <APP_LCD_E_Set+0x56>
      u8 data = (i == selected_lcd_sr) ? selected_lcd_mask : 0;
      APP_LCD_ExtPort_SerDataShift(data, 1);
    }

    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
 8018d48:	f7ff ff2c 	bl	8018ba4 <APP_LCD_ExtPort_UpdateSRs>
  }

  return 0; // no error
 8018d4c:	2000      	movs	r0, #0
 8018d4e:	bd70      	pop	{r4, r5, r6, pc}
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
  if( num_additional_lcds < 0 )
    return -2; // E line not configured
 8018d50:	f06f 0001 	mvn.w	r0, #1
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 8018d54:	bd70      	pop	{r4, r5, r6, pc}
 8018d56:	bf00      	nop
 8018d58:	200001ac 	.word	0x200001ac
 8018d5c:	200037d6 	.word	0x200037d6

08018d60 <APP_LCD_PollUnbusy>:

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8018d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( mios32_lcd_device < 2 ) {
 8018d62:	4b1f      	ldr	r3, [pc, #124]	; (8018de0 <APP_LCD_PollUnbusy+0x80>)

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8018d64:	4604      	mov	r4, r0
  if( mios32_lcd_device < 2 ) {
 8018d66:	7818      	ldrb	r0, [r3, #0]
 8018d68:	2801      	cmp	r0, #1
 8018d6a:	d804      	bhi.n	8018d76 <APP_LCD_PollUnbusy+0x16>
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8018d6c:	4621      	mov	r1, r4
  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
}
 8018d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8018d72:	f7fa baaa 	b.w	80132ca <MIOS32_BOARD_J15_PollUnbusy>
  }

  if( mios32_lcd_device >= MAX_LCDS )
 8018d76:	283f      	cmp	r0, #63	; 0x3f
 8018d78:	d902      	bls.n	8018d80 <APP_LCD_PollUnbusy+0x20>
    return -1; // LCD not supported
 8018d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8018d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  u32 poll_ctr;
  u32 delay_ctr;

  // select command register (RS=0)
  MIOS32_BOARD_J15_RS_Set(0);
 8018d80:	2000      	movs	r0, #0
 8018d82:	f7fa fa93 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

  // enable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(1);
 8018d86:	2001      	movs	r0, #1
 8018d88:	f7fa fa9c 	bl	80132c4 <MIOS32_BOARD_J15_D7InPullUpEnable>

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);
 8018d8c:	2001      	movs	r0, #1
 8018d8e:	f7fa fa90 	bl	80132b2 <MIOS32_BOARD_J15_RW_Set>

  // check if E pin is available
  if( APP_LCD_E_Set(1) < 0 )
 8018d92:	2001      	movs	r0, #1
 8018d94:	f7ff ffa4 	bl	8018ce0 <APP_LCD_E_Set>
 8018d98:	2800      	cmp	r0, #0
 8018d9a:	dbee      	blt.n	8018d7a <APP_LCD_PollUnbusy+0x1a>
 8018d9c:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8018d9e:	b19c      	cbz	r4, 8018dc8 <APP_LCD_PollUnbusy+0x68>
    APP_LCD_E_Set(1);
 8018da0:	2001      	movs	r0, #1
 8018da2:	f7ff ff9d 	bl	8018ce0 <APP_LCD_E_Set>
 8018da6:	250a      	movs	r5, #10

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);
 8018da8:	2001      	movs	r0, #1
 8018daa:	f7fa fa82 	bl	80132b2 <MIOS32_BOARD_J15_RW_Set>
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    APP_LCD_E_Set(1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 8018dae:	3d01      	subs	r5, #1
 8018db0:	d1fa      	bne.n	8018da8 <APP_LCD_PollUnbusy+0x48>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 8018db2:	f7fa fa84 	bl	80132be <MIOS32_BOARD_J15_GetD7In>
 8018db6:	4607      	mov	r7, r0
    APP_LCD_E_Set(0);
 8018db8:	4628      	mov	r0, r5
 8018dba:	f7ff ff91 	bl	8018ce0 <APP_LCD_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 8018dbe:	b90f      	cbnz	r7, 8018dc4 <APP_LCD_PollUnbusy+0x64>
 8018dc0:	b916      	cbnz	r6, 8018dc8 <APP_LCD_PollUnbusy+0x68>
 8018dc2:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8018dc4:	3c01      	subs	r4, #1
 8018dc6:	e7ea      	b.n	8018d9e <APP_LCD_PollUnbusy+0x3e>
    // TODO: not understood yet: I've a particular LCD which sporadically flags unbusy on a STM32F4
    //       during the first poll, but busy on following polls until it's really unbusy
  }

  // disable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(0);
 8018dc8:	2000      	movs	r0, #0
 8018dca:	f7fa fa7b 	bl	80132c4 <MIOS32_BOARD_J15_D7InPullUpEnable>

  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);
 8018dce:	2000      	movs	r0, #0
 8018dd0:	f7fa fa6f 	bl	80132b2 <MIOS32_BOARD_J15_RW_Set>

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 8018dd4:	2c00      	cmp	r4, #0
 8018dd6:	bf14      	ite	ne
 8018dd8:	2000      	movne	r0, #0
 8018dda:	f06f 0001 	mvneq.w	r0, #1

  return 0; // no error
}
 8018dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018de0:	200001ac 	.word	0x200001ac

08018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>:

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8018de4:	b570      	push	{r4, r5, r6, lr}
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 8018de6:	4b48      	ldr	r3, [pc, #288]	; (8018f08 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x124>)
 8018de8:	781e      	ldrb	r6, [r3, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8018dea:	4605      	mov	r5, r0
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 8018dec:	b1fe      	cbz	r6, 8018e2e <APP_LCD_SERGLCD_CS_Set.constprop.2+0x4a>
    u8 level_active = 0;
    u8 level_nonactive = 1;

    int cs;
    if( all ) {
 8018dee:	b180      	cbz	r0, 8018e12 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8018df0:	2100      	movs	r1, #0
 8018df2:	200c      	movs	r0, #12
 8018df4:	f7fa fa4e 	bl	8013294 <MIOS32_BOARD_J10_PinSet>
 8018df8:	2100      	movs	r1, #0
 8018dfa:	200d      	movs	r0, #13
 8018dfc:	f7fa fa4a 	bl	8013294 <MIOS32_BOARD_J10_PinSet>
 8018e00:	2100      	movs	r1, #0
 8018e02:	200e      	movs	r0, #14
 8018e04:	f7fa fa46 	bl	8013294 <MIOS32_BOARD_J10_PinSet>
 8018e08:	200f      	movs	r0, #15
 8018e0a:	2100      	movs	r1, #0
 8018e0c:	f7fa fa42 	bl	8013294 <MIOS32_BOARD_J10_PinSet>
 8018e10:	e077      	b.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
 8018e12:	493e      	ldr	r1, [pc, #248]	; (8018f0c <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 8018e14:	780a      	ldrb	r2, [r1, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8018e16:	f105 000c 	add.w	r0, r5, #12
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8018e1a:	1aa9      	subs	r1, r5, r2
 8018e1c:	bf18      	it	ne
 8018e1e:	2101      	movne	r1, #1
 8018e20:	b2c0      	uxtb	r0, r0
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 8018e22:	3501      	adds	r5, #1
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8018e24:	f7fa fa36 	bl	8013294 <MIOS32_BOARD_J10_PinSet>
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 8018e28:	2d04      	cmp	r5, #4
 8018e2a:	d1f2      	bne.n	8018e12 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
 8018e2c:	e069      	b.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
    }
  } else {

    int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 8;
 8018e2e:	4838      	ldr	r0, [pc, #224]	; (8018f10 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x12c>)
 8018e30:	4b38      	ldr	r3, [pc, #224]	; (8018f14 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x130>)
 8018e32:	7844      	ldrb	r4, [r0, #1]
 8018e34:	7881      	ldrb	r1, [r0, #2]
 8018e36:	fb14 f401 	smulbb	r4, r4, r1
 8018e3a:	3c08      	subs	r4, #8
    if( num_additional_lcds >= (MAX_LCDS-8) )
      num_additional_lcds = (MAX_LCDS-8);
 8018e3c:	2c38      	cmp	r4, #56	; 0x38
 8018e3e:	bfa8      	it	ge
 8018e40:	2438      	movge	r4, #56	; 0x38

    // Note: assume that CS lines are low-active!
    if( all ) {
 8018e42:	b305      	cbz	r5, 8018e86 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xa2>
      if( prev_glcd_selection != 0xff ) {
 8018e44:	7818      	ldrb	r0, [r3, #0]
 8018e46:	28ff      	cmp	r0, #255	; 0xff
 8018e48:	d05b      	beq.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = 0xff;
 8018e4a:	22ff      	movs	r2, #255	; 0xff
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 8018e4c:	4630      	mov	r0, r6
      num_additional_lcds = (MAX_LCDS-8);

    // Note: assume that CS lines are low-active!
    if( all ) {
      if( prev_glcd_selection != 0xff ) {
	prev_glcd_selection = 0xff;
 8018e4e:	701a      	strb	r2, [r3, #0]
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 8018e50:	f7fa fa26 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8018e54:	2c08      	cmp	r4, #8
 8018e56:	dc08      	bgt.n	8018e6a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x86>
 8018e58:	4635      	mov	r5, r6
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8018e5a:	42a5      	cmp	r5, r4
 8018e5c:	da51      	bge.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
 8018e5e:	b2e8      	uxtb	r0, r5
 8018e60:	2100      	movs	r1, #0
 8018e62:	f7ff fe9b 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
	prev_glcd_selection = 0xff;
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8018e66:	3501      	adds	r5, #1
 8018e68:	e7f7      	b.n	8018e5a <APP_LCD_SERGLCD_CS_Set.constprop.2+0x76>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 8018e6a:	10e3      	asrs	r3, r4, #3
	  if( num_additional_lcds % 8 )
 8018e6c:	0762      	lsls	r2, r4, #29
	    ++num_shifts;
 8018e6e:	bf18      	it	ne
 8018e70:	3301      	addne	r3, #1

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8018e72:	1e5c      	subs	r4, r3, #1
 8018e74:	2000      	movs	r0, #0
 8018e76:	f7ff fef7 	bl	8018c68 <APP_LCD_ExtPort_SerDataShift.part.0>
 8018e7a:	f114 34ff 	adds.w	r4, r4, #4294967295
 8018e7e:	d2f9      	bcs.n	8018e74 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x90>
	    APP_LCD_ExtPort_SerDataShift(value ? 0x00 : 0xff, 1);
	  }

	  // update serial shift registers
	  APP_LCD_ExtPort_UpdateSRs();
 8018e80:	f7ff fe90 	bl	8018ba4 <APP_LCD_ExtPort_UpdateSRs>
 8018e84:	e03d      	b.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
 8018e86:	4a21      	ldr	r2, [pc, #132]	; (8018f0c <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 8018e88:	7819      	ldrb	r1, [r3, #0]
 8018e8a:	7810      	ldrb	r0, [r2, #0]
 8018e8c:	4281      	cmp	r1, r0
 8018e8e:	d038      	beq.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = mios32_lcd_device;
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8018e90:	2601      	movs	r6, #1
	  APP_LCD_ExtPort_UpdateSRs();
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
	prev_glcd_selection = mios32_lcd_device;
 8018e92:	7018      	strb	r0, [r3, #0]
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8018e94:	fa06 f300 	lsl.w	r3, r6, r0
 8018e98:	43de      	mvns	r6, r3

	MIOS32_BOARD_J15_DataSet(mask);
 8018e9a:	b2f0      	uxtb	r0, r6
 8018e9c:	f7fa fa00 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8018ea0:	2c08      	cmp	r4, #8
 8018ea2:	dc0c      	bgt.n	8018ebe <APP_LCD_SERGLCD_CS_Set.constprop.2+0xda>
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8018ea4:	42a5      	cmp	r5, r4
 8018ea6:	da2c      	bge.n	8018f02 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8018ea8:	f105 0208 	add.w	r2, r5, #8
	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
 8018eac:	fa26 f102 	lsr.w	r1, r6, r2
 8018eb0:	b2e8      	uxtb	r0, r5
 8018eb2:	f001 0101 	and.w	r1, r1, #1
 8018eb6:	f7ff fe71 	bl	8018b9c <APP_LCD_ExtPort_PinSet>

	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8018eba:	3501      	adds	r5, #1
 8018ebc:	e7f2      	b.n	8018ea4 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xc0>
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8018ebe:	4d13      	ldr	r5, [pc, #76]	; (8018f0c <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 8018ec0:	10e2      	asrs	r2, r4, #3
	  if( num_additional_lcds % 8 )
 8018ec2:	0766      	lsls	r6, r4, #29
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8018ec4:	782c      	ldrb	r4, [r5, #0]
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;
 8018ec6:	bf18      	it	ne
 8018ec8:	3201      	addne	r2, #1

	  int selected_lcd = mios32_lcd_device - 8;
 8018eca:	3c08      	subs	r4, #8
	  int selected_lcd_sr = selected_lcd / 8;
 8018ecc:	2008      	movs	r0, #8
 8018ece:	fb94 f6f0 	sdiv	r6, r4, r0
	  u8 selected_lcd_mask = value ? ~(1 << (selected_lcd % 8)) : 0xff;
 8018ed2:	4811      	ldr	r0, [pc, #68]	; (8018f18 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x134>)
 8018ed4:	4020      	ands	r0, r4
 8018ed6:	2800      	cmp	r0, #0
 8018ed8:	da03      	bge.n	8018ee2 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xfe>
 8018eda:	1e41      	subs	r1, r0, #1
 8018edc:	f061 0307 	orn	r3, r1, #7
 8018ee0:	1c58      	adds	r0, r3, #1
 8018ee2:	2501      	movs	r5, #1
 8018ee4:	fa05 f500 	lsl.w	r5, r5, r0
 8018ee8:	43ec      	mvns	r4, r5
 8018eea:	b2e5      	uxtb	r5, r4

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8018eec:	1e54      	subs	r4, r2, #1
 8018eee:	42b4      	cmp	r4, r6
 8018ef0:	bf0c      	ite	eq
 8018ef2:	4628      	moveq	r0, r5
 8018ef4:	20ff      	movne	r0, #255	; 0xff
 8018ef6:	f7ff feb7 	bl	8018c68 <APP_LCD_ExtPort_SerDataShift.part.0>
 8018efa:	f114 34ff 	adds.w	r4, r4, #4294967295
 8018efe:	d2f6      	bcs.n	8018eee <APP_LCD_SERGLCD_CS_Set.constprop.2+0x10a>
 8018f00:	e7be      	b.n	8018e80 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x9c>
      }
    }
  }

  return 0; // no error
}
 8018f02:	2000      	movs	r0, #0
 8018f04:	bd70      	pop	{r4, r5, r6, pc}
 8018f06:	bf00      	nop
 8018f08:	20000620 	.word	0x20000620
 8018f0c:	200001ac 	.word	0x200001ac
 8018f10:	200037d6 	.word	0x200037d6
 8018f14:	2000005c 	.word	0x2000005c
 8018f18:	80000007 	.word	0x80000007

08018f1c <APP_LCD_Cmd>:
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 8018f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if( lcd_testmode )
 8018f20:	4b46      	ldr	r3, [pc, #280]	; (801903c <APP_LCD_Cmd+0x120>)
 8018f22:	781f      	ldrb	r7, [r3, #0]
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 8018f24:	4606      	mov	r6, r0
  if( lcd_testmode )
 8018f26:	2f00      	cmp	r7, #0
 8018f28:	f040 8084 	bne.w	8019034 <APP_LCD_Cmd+0x118>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 8018f2c:	4844      	ldr	r0, [pc, #272]	; (8019040 <APP_LCD_Cmd+0x124>)
 8018f2e:	4945      	ldr	r1, [pc, #276]	; (8019044 <APP_LCD_Cmd+0x128>)
 8018f30:	f890 8000 	ldrb.w	r8, [r0]
 8018f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f38:	4642      	mov	r2, r8
 8018f3a:	f001 fa9f 	bl	801a47c <__aeabi_llsr>
 8018f3e:	2401      	movs	r4, #1
 8018f40:	2500      	movs	r5, #0
 8018f42:	4020      	ands	r0, r4
 8018f44:	4029      	ands	r1, r5
 8018f46:	ea50 0301 	orrs.w	r3, r0, r1
 8018f4a:	d073      	beq.n	8019034 <APP_LCD_Cmd+0x118>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 8018f4c:	4a3e      	ldr	r2, [pc, #248]	; (8019048 <APP_LCD_Cmd+0x12c>)
 8018f4e:	7813      	ldrb	r3, [r2, #0]
 8018f50:	337f      	adds	r3, #127	; 0x7f
 8018f52:	b2d8      	uxtb	r0, r3
 8018f54:	2805      	cmp	r0, #5
 8018f56:	d845      	bhi.n	8018fe4 <APP_LCD_Cmd+0xc8>
 8018f58:	b25d      	sxtb	r5, r3
 8018f5a:	2401      	movs	r4, #1
 8018f5c:	fa04 f105 	lsl.w	r1, r4, r5
 8018f60:	f011 0523 	ands.w	r5, r1, #35	; 0x23
 8018f64:	d10e      	bne.n	8018f84 <APP_LCD_Cmd+0x68>
 8018f66:	f011 0718 	ands.w	r7, r1, #24
 8018f6a:	d123      	bne.n	8018fb4 <APP_LCD_Cmd+0x98>
 8018f6c:	0749      	lsls	r1, r1, #29
 8018f6e:	d539      	bpl.n	8018fe4 <APP_LCD_Cmd+0xc8>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8018f70:	4620      	mov	r0, r4
 8018f72:	f7ff ff37 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control A0
 8018f76:	4638      	mov	r0, r7
 8018f78:	f7fa f998 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

    // send command
    MIOS32_BOARD_J15_SerDataShift(cmd);
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	f7fa f992 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>
 8018f82:	e054      	b.n	801902e <APP_LCD_Cmd+0x112>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 8018f84:	f1b8 0f01 	cmp.w	r8, #1
 8018f88:	d854      	bhi.n	8019034 <APP_LCD_Cmd+0x118>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 8018f8a:	4638      	mov	r0, r7
 8018f8c:	f7ff fe16 	bl	8018bbc <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8018f90:	f242 7010 	movw	r0, #10000	; 0x2710
 8018f94:	f7ff fee4 	bl	8018d60 <APP_LCD_PollUnbusy>
#endif
      //return -2; // timeout
    }

    // select all displays
    APP_LCD_GLCD_CS_Set(1);
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f7ff fe0f 	bl	8018bbc <APP_LCD_GLCD_CS_Set>

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	f7fa f97e 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	f7fa f981 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 8018faa:	4620      	mov	r0, r4
 8018fac:	f7ff fe98 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8018fb0:	4638      	mov	r0, r7
 8018fb2:	e03a      	b.n	801902a <APP_LCD_Cmd+0x10e>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f7ff ff15 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 8018fba:	4a24      	ldr	r2, [pc, #144]	; (801904c <APP_LCD_Cmd+0x130>)
 8018fbc:	7810      	ldrb	r0, [r2, #0]
 8018fbe:	b140      	cbz	r0, 8018fd2 <APP_LCD_Cmd+0xb6>
      APP_LCD_ExtPort_PinSet(2, 0); // DC
 8018fc0:	4629      	mov	r1, r5
 8018fc2:	2002      	movs	r0, #2
 8018fc4:	f7ff fdea 	bl	8018b9c <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(cmd, 0);
 8018fc8:	4630      	mov	r0, r6
 8018fca:	4629      	mov	r1, r5
 8018fcc:	f7ff fe66 	bl	8018c9c <APP_LCD_ExtPort_SerDataShift>
 8018fd0:	e004      	b.n	8018fdc <APP_LCD_Cmd+0xc0>
    } else {
      MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control DC
 8018fd2:	f7fa f96b 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

      MIOS32_BOARD_J15_SerDataShift(cmd);
 8018fd6:	4630      	mov	r0, r6
 8018fd8:	f7fa f965 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>

    return 0; // no error
  }
  }

  return -3; // not supported
 8018fdc:	f06f 0002 	mvn.w	r0, #2
 8018fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8018fe4:	f242 7010 	movw	r0, #10000	; 0x2710
 8018fe8:	f7ff feba 	bl	8018d60 <APP_LCD_PollUnbusy>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	da12      	bge.n	8019016 <APP_LCD_Cmd+0xfa>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 8018ff0:	4b13      	ldr	r3, [pc, #76]	; (8019040 <APP_LCD_Cmd+0x124>)
 8018ff2:	4c14      	ldr	r4, [pc, #80]	; (8019044 <APP_LCD_Cmd+0x128>)
 8018ff4:	781a      	ldrb	r2, [r3, #0]
 8018ff6:	2001      	movs	r0, #1
 8018ff8:	2100      	movs	r1, #0
 8018ffa:	f001 fa4b 	bl	801a494 <__aeabi_llsl>
 8018ffe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019002:	ea22 0000 	bic.w	r0, r2, r0
 8019006:	ea23 0101 	bic.w	r1, r3, r1
 801900a:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Cmd] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 801900e:	f06f 0001 	mvn.w	r0, #1
 8019012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 8019016:	4630      	mov	r0, r6
 8019018:	f7fa f942 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801901c:	2000      	movs	r0, #0
 801901e:	f7fa f945 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 8019022:	2001      	movs	r0, #1
 8019024:	f7ff fe5c 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019028:	2000      	movs	r0, #0
 801902a:	f7ff fe59 	bl	8018ce0 <APP_LCD_E_Set>

    return 0; // no error
 801902e:	2000      	movs	r0, #0
 8019030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 8019034:	f04f 30ff 	mov.w	r0, #4294967295
    return 0; // no error
  }
  }

  return -3; // not supported
}
 8019038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801903c:	20000611 	.word	0x20000611
 8019040:	200001ac 	.word	0x200001ac
 8019044:	20000618 	.word	0x20000618
 8019048:	200037d6 	.word	0x200037d6
 801904c:	20000620 	.word	0x20000620

08019050 <APP_LCD_Data>:
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 8019050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if( lcd_testmode )
 8019054:	4b74      	ldr	r3, [pc, #464]	; (8019228 <APP_LCD_Data+0x1d8>)
 8019056:	781d      	ldrb	r5, [r3, #0]
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 8019058:	4680      	mov	r8, r0
  if( lcd_testmode )
 801905a:	2d00      	cmp	r5, #0
 801905c:	f040 80df 	bne.w	801921e <APP_LCD_Data+0x1ce>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 8019060:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801923c <APP_LCD_Data+0x1ec>
 8019064:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8019240 <APP_LCD_Data+0x1f0>
 8019068:	f899 b000 	ldrb.w	fp, [r9]
 801906c:	e9da 0100 	ldrd	r0, r1, [sl]
 8019070:	465a      	mov	r2, fp
 8019072:	f001 fa03 	bl	801a47c <__aeabi_llsr>
 8019076:	2201      	movs	r2, #1
 8019078:	2300      	movs	r3, #0
 801907a:	4010      	ands	r0, r2
 801907c:	4019      	ands	r1, r3
 801907e:	ea50 0301 	orrs.w	r3, r0, r1
 8019082:	f000 80cc 	beq.w	801921e <APP_LCD_Data+0x1ce>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 8019086:	4c69      	ldr	r4, [pc, #420]	; (801922c <APP_LCD_Data+0x1dc>)
 8019088:	7820      	ldrb	r0, [r4, #0]
 801908a:	307f      	adds	r0, #127	; 0x7f
 801908c:	b2c1      	uxtb	r1, r0
 801908e:	2905      	cmp	r1, #5
 8019090:	f200 809d 	bhi.w	80191ce <APP_LCD_Data+0x17e>
 8019094:	b247      	sxtb	r7, r0
 8019096:	2601      	movs	r6, #1
 8019098:	fa06 f207 	lsl.w	r2, r6, r7
 801909c:	f012 0723 	ands.w	r7, r2, #35	; 0x23
 80190a0:	d105      	bne.n	80190ae <APP_LCD_Data+0x5e>
 80190a2:	f012 0018 	ands.w	r0, r2, #24
 80190a6:	d169      	bne.n	801917c <APP_LCD_Data+0x12c>
 80190a8:	0753      	lsls	r3, r2, #29
 80190aa:	d44a      	bmi.n	8019142 <APP_LCD_Data+0xf2>
 80190ac:	e08f      	b.n	80191ce <APP_LCD_Data+0x17e>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 80190ae:	f1bb 0f01 	cmp.w	fp, #1
 80190b2:	f200 80b4 	bhi.w	801921e <APP_LCD_Data+0x1ce>
      return -1;

    // abort if max. width or height reached
    if( mios32_lcd_x >= mios32_lcd_parameters.width || mios32_lcd_y >= mios32_lcd_parameters.height )
 80190b6:	4f5e      	ldr	r7, [pc, #376]	; (8019230 <APP_LCD_Data+0x1e0>)
 80190b8:	88a2      	ldrh	r2, [r4, #4]
 80190ba:	8839      	ldrh	r1, [r7, #0]
 80190bc:	4291      	cmp	r1, r2
 80190be:	f080 80ae 	bcs.w	801921e <APP_LCD_Data+0x1ce>
 80190c2:	4b5c      	ldr	r3, [pc, #368]	; (8019234 <APP_LCD_Data+0x1e4>)
 80190c4:	88e1      	ldrh	r1, [r4, #6]
 80190c6:	8818      	ldrh	r0, [r3, #0]
 80190c8:	4288      	cmp	r0, r1
 80190ca:	f080 80a8 	bcs.w	801921e <APP_LCD_Data+0x1ce>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 80190ce:	4628      	mov	r0, r5
 80190d0:	f7ff fd74 	bl	8018bbc <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 80190d4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80190d8:	f7ff fe42 	bl	8018d60 <APP_LCD_PollUnbusy>
 80190dc:	2800      	cmp	r0, #0
 80190de:	da0e      	bge.n	80190fe <APP_LCD_Data+0xae>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 80190e0:	f899 2000 	ldrb.w	r2, [r9]
 80190e4:	2001      	movs	r0, #1
 80190e6:	2100      	movs	r1, #0
 80190e8:	f001 f9d4 	bl	801a494 <__aeabi_llsl>
 80190ec:	e9da 2300 	ldrd	r2, r3, [sl]
 80190f0:	ea22 0000 	bic.w	r0, r2, r0
 80190f4:	ea23 0101 	bic.w	r1, r3, r1
 80190f8:	e9ca 0100 	strd	r0, r1, [sl]
 80190fc:	e07c      	b.n	80191f8 <APP_LCD_Data+0x1a8>
#endif
      return -2; // timeout
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 80190fe:	4640      	mov	r0, r8
 8019100:	f7fa f8ce 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 8019104:	4630      	mov	r0, r6
 8019106:	f7fa f8d1 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801910a:	4630      	mov	r0, r6
 801910c:	f7ff fde8 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019110:	4628      	mov	r0, r5
 8019112:	f7ff fde5 	bl	8018ce0 <APP_LCD_E_Set>

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 8019116:	883b      	ldrh	r3, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 8019118:	7822      	ldrb	r2, [r4, #0]
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 801911a:	f103 0301 	add.w	r3, r3, #1
 801911e:	b298      	uxth	r0, r3
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 8019120:	2a86      	cmp	r2, #134	; 0x86
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 8019122:	8038      	strh	r0, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 8019124:	d109      	bne.n	801913a <APP_LCD_Data+0xea>
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 8019126:	223d      	movs	r2, #61	; 0x3d
 8019128:	fbb0 f1f2 	udiv	r1, r0, r2
 801912c:	fb02 0311 	mls	r3, r2, r1, r0
 8019130:	b298      	uxth	r0, r3
 8019132:	2800      	cmp	r0, #0
 8019134:	d170      	bne.n	8019218 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x00 + 0);
 8019136:	2000      	movs	r0, #0
 8019138:	e01c      	b.n	8019174 <APP_LCD_Data+0x124>
#else
      if( (++mios32_lcd_x % 64) == 0 )
	return APP_LCD_Cmd(0x00 + 0);
#endif
    } else {
      if( (++mios32_lcd_x % 64) == 0 )
 801913a:	0680      	lsls	r0, r0, #26
 801913c:	d16c      	bne.n	8019218 <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x40 + 0);
 801913e:	2040      	movs	r0, #64	; 0x40
 8019140:	e018      	b.n	8019174 <APP_LCD_Data+0x124>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 8019142:	f7ff fe4f 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control A0
 8019146:	4630      	mov	r0, r6
 8019148:	f7fa f8b0 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

    // send data
    MIOS32_BOARD_J15_SerDataShift(data);
 801914c:	4640      	mov	r0, r8
 801914e:	f7fa f8aa 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>

    // increment graphical cursor
    ++mios32_lcd_x;
 8019152:	4b37      	ldr	r3, [pc, #220]	; (8019230 <APP_LCD_Data+0x1e0>)
 8019154:	8818      	ldrh	r0, [r3, #0]
 8019156:	1c41      	adds	r1, r0, #1
 8019158:	b28a      	uxth	r2, r1
 801915a:	801a      	strh	r2, [r3, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801915c:	88a3      	ldrh	r3, [r4, #4]
 801915e:	fbb2 f4f3 	udiv	r4, r2, r3
 8019162:	fb03 2014 	mls	r0, r3, r4, r2
 8019166:	b284      	uxth	r4, r0
 8019168:	2c00      	cmp	r4, #0
 801916a:	d155      	bne.n	8019218 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
 801916c:	2010      	movs	r0, #16
 801916e:	f7ff fed5 	bl	8018f1c <APP_LCD_Cmd>
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 8019172:	4620      	mov	r0, r4
    return 0; // no error
  }
  }

  return -3; // not supported
}
 8019174:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ++mios32_lcd_x;

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 8019178:	f7ff bed0 	b.w	8018f1c <APP_LCD_Cmd>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 801917c:	4638      	mov	r0, r7
 801917e:	f7ff fe31 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 8019182:	492d      	ldr	r1, [pc, #180]	; (8019238 <APP_LCD_Data+0x1e8>)
 8019184:	780a      	ldrb	r2, [r1, #0]
 8019186:	b142      	cbz	r2, 801919a <APP_LCD_Data+0x14a>
      APP_LCD_ExtPort_PinSet(2, 1); // DC
 8019188:	4631      	mov	r1, r6
 801918a:	2002      	movs	r0, #2
 801918c:	f7ff fd06 	bl	8018b9c <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(data, 0);
 8019190:	4640      	mov	r0, r8
 8019192:	4639      	mov	r1, r7
 8019194:	f7ff fd82 	bl	8018c9c <APP_LCD_ExtPort_SerDataShift>
 8019198:	e005      	b.n	80191a6 <APP_LCD_Data+0x156>
    } else {
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801919a:	4630      	mov	r0, r6
 801919c:	f7fa f886 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
 80191a0:	4640      	mov	r0, r8
 80191a2:	f7fa f880 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 80191a6:	4c22      	ldr	r4, [pc, #136]	; (8019230 <APP_LCD_Data+0x1e0>)

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 80191a8:	4a20      	ldr	r2, [pc, #128]	; (801922c <APP_LCD_Data+0x1dc>)
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 80191aa:	8823      	ldrh	r3, [r4, #0]
 80191ac:	1c58      	adds	r0, r3, #1

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 80191ae:	8893      	ldrh	r3, [r2, #4]
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 80191b0:	b281      	uxth	r1, r0
 80191b2:	8021      	strh	r1, [r4, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 80191b4:	fbb1 f4f3 	udiv	r4, r1, r3
 80191b8:	fb03 1014 	mls	r0, r3, r4, r1
 80191bc:	b284      	uxth	r4, r0
 80191be:	bb5c      	cbnz	r4, 8019218 <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x00); // set X=0
 80191c0:	4620      	mov	r0, r4
 80191c2:	f7ff feab 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x10);
 80191c6:	2010      	movs	r0, #16
 80191c8:	f7ff fea8 	bl	8018f1c <APP_LCD_Cmd>
 80191cc:	e024      	b.n	8019218 <APP_LCD_Data+0x1c8>
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 80191ce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80191d2:	f7ff fdc5 	bl	8018d60 <APP_LCD_PollUnbusy>
 80191d6:	2800      	cmp	r0, #0
 80191d8:	da12      	bge.n	8019200 <APP_LCD_Data+0x1b0>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 80191da:	4a18      	ldr	r2, [pc, #96]	; (801923c <APP_LCD_Data+0x1ec>)
 80191dc:	4c18      	ldr	r4, [pc, #96]	; (8019240 <APP_LCD_Data+0x1f0>)
 80191de:	7812      	ldrb	r2, [r2, #0]
 80191e0:	2001      	movs	r0, #1
 80191e2:	2100      	movs	r1, #0
 80191e4:	f001 f956 	bl	801a494 <__aeabi_llsl>
 80191e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80191ec:	ea22 0000 	bic.w	r0, r2, r0
 80191f0:	ea23 0101 	bic.w	r1, r3, r1
 80191f4:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Data] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 80191f8:	f06f 0001 	mvn.w	r0, #1
 80191fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 8019200:	4640      	mov	r0, r8
 8019202:	f7fa f84d 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 8019206:	2001      	movs	r0, #1
 8019208:	f7fa f850 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801920c:	2001      	movs	r0, #1
 801920e:	f7ff fd67 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019212:	2000      	movs	r0, #0
 8019214:	f7ff fd64 	bl	8018ce0 <APP_LCD_E_Set>

    return 0; // no error
 8019218:	2000      	movs	r0, #0
 801921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 801921e:	f04f 30ff 	mov.w	r0, #4294967295
    return 0; // no error
  }
  }

  return -3; // not supported
}
 8019222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019226:	bf00      	nop
 8019228:	20000611 	.word	0x20000611
 801922c:	200037d6 	.word	0x200037d6
 8019230:	200037e8 	.word	0x200037e8
 8019234:	200037d4 	.word	0x200037d4
 8019238:	20000620 	.word	0x20000620
 801923c:	200001ac 	.word	0x200001ac
 8019240:	20000618 	.word	0x20000618

08019244 <APP_LCD_Init>:
// Initializes application specific LCD driver
// IN: <mode>: optional configuration
// OUT: returns < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Init(u32 mode)
{
 8019244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if( lcd_testmode )
 8019248:	4b89      	ldr	r3, [pc, #548]	; (8019470 <APP_LCD_Init+0x22c>)
 801924a:	7819      	ldrb	r1, [r3, #0]
 801924c:	b111      	cbz	r1, 8019254 <APP_LCD_Init+0x10>
    return -1; // direct access disabled in testmode
 801924e:	f04f 30ff 	mov.w	r0, #4294967295
 8019252:	e198      	b.n	8019586 <APP_LCD_Init+0x342>

  // currently only mode 0 supported
  if( mode != 0 )
 8019254:	2800      	cmp	r0, #0
 8019256:	d1fa      	bne.n	801924e <APP_LCD_Init+0xa>
    return -1; // unsupported mode

  if( mios32_lcd_device >= MAX_LCDS )
 8019258:	4886      	ldr	r0, [pc, #536]	; (8019474 <APP_LCD_Init+0x230>)
 801925a:	f890 8000 	ldrb.w	r8, [r0]
 801925e:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8019262:	d902      	bls.n	801926a <APP_LCD_Init+0x26>
    return -2; // unsupported LCD device number
 8019264:	f06f 0001 	mvn.w	r0, #1
 8019268:	e18d      	b.n	8019586 <APP_LCD_Init+0x342>

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801926a:	4e83      	ldr	r6, [pc, #524]	; (8019478 <APP_LCD_Init+0x234>)
 801926c:	4642      	mov	r2, r8
 801926e:	2001      	movs	r0, #1
 8019270:	2100      	movs	r1, #0
 8019272:	f001 f90f 	bl	801a494 <__aeabi_llsl>
 8019276:	e9d6 4500 	ldrd	r4, r5, [r6]

  switch( mios32_lcd_parameters.lcd_type ) {
 801927a:	4a80      	ldr	r2, [pc, #512]	; (801947c <APP_LCD_Init+0x238>)

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801927c:	4320      	orrs	r0, r4

  switch( mios32_lcd_parameters.lcd_type ) {
 801927e:	7814      	ldrb	r4, [r2, #0]

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 8019280:	4329      	orrs	r1, r5

  switch( mios32_lcd_parameters.lcd_type ) {
 8019282:	f1a4 0381 	sub.w	r3, r4, #129	; 0x81

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 8019286:	e9c6 0100 	strd	r0, r1, [r6]
 801928a:	46b1      	mov	r9, r6

  switch( mios32_lcd_parameters.lcd_type ) {
 801928c:	2b05      	cmp	r3, #5
 801928e:	f200 80ea 	bhi.w	8019466 <APP_LCD_Init+0x222>
 8019292:	e8df f003 	tbb	[pc, r3]
 8019296:	0303      	.short	0x0303
 8019298:	105f5f23 	.word	0x105f5f23
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801929c:	f1b8 0f01 	cmp.w	r8, #1
 80192a0:	f200 8160 	bhi.w	8019564 <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 80192a4:	2001      	movs	r0, #1
 80192a6:	f7f9 fff8 	bl	801329a <MIOS32_BOARD_J15_PortInit>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	dbda      	blt.n	8019264 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 80192ae:	f7ff fcb3 	bl	8018c18 <APP_LCD_ExtPort_Init>

      // "Display On" command
      APP_LCD_Cmd(0x3e + 1);
 80192b2:	203f      	movs	r0, #63	; 0x3f
 80192b4:	e00e      	b.n	80192d4 <APP_LCD_Init+0x90>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 80192b6:	f1b8 0f01 	cmp.w	r8, #1
 80192ba:	f200 8153 	bhi.w	8019564 <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 80192be:	2001      	movs	r0, #1
 80192c0:	f7f9 ffeb 	bl	801329a <MIOS32_BOARD_J15_PortInit>
 80192c4:	2800      	cmp	r0, #0
 80192c6:	dbcd      	blt.n	8019264 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 80192c8:	f7ff fca6 	bl	8018c18 <APP_LCD_ExtPort_Init>

      // Reset command
      APP_LCD_Cmd(0xe2);
 80192cc:	20e2      	movs	r0, #226	; 0xe2
 80192ce:	f7ff fe25 	bl	8018f1c <APP_LCD_Cmd>

      // "Display On" command
      APP_LCD_Cmd(0xae + 1);
 80192d2:	20af      	movs	r0, #175	; 0xaf
 80192d4:	f7ff fe22 	bl	8018f1c <APP_LCD_Cmd>

      // Display start line
      APP_LCD_Cmd(0xc0 + 0);
 80192d8:	20c0      	movs	r0, #192	; 0xc0
 80192da:	e141      	b.n	8019560 <APP_LCD_Init+0x31c>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 80192dc:	f1b8 0f00 	cmp.w	r8, #0
 80192e0:	f040 8140 	bne.w	8019564 <APP_LCD_Init+0x320>
      // DOGM128 works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 80192e4:	4640      	mov	r0, r8
 80192e6:	f7f9 ffd8 	bl	801329a <MIOS32_BOARD_J15_PortInit>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	dbba      	blt.n	8019264 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15

      display_available |= 0xff;
 80192ee:	e9d6 4500 	ldrd	r4, r5, [r6]
 80192f2:	2700      	movs	r7, #0
 80192f4:	26ff      	movs	r6, #255	; 0xff
 80192f6:	4334      	orrs	r4, r6
 80192f8:	433d      	orrs	r5, r7
 80192fa:	e9c9 4500 	strd	r4, r5, [r9]

      APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 80192fe:	f7ff fc97 	bl	8018c30 <APP_LCD_SERGLCD_CS_Init>

      // initialisation sequence based on EA-DOGL/M datasheet
  
      APP_LCD_Cmd(0x40); //2 - Display start line = 0
 8019302:	2040      	movs	r0, #64	; 0x40
 8019304:	f7ff fe0a 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA1); //8 - ADC Normal mode = 0 
 8019308:	20a1      	movs	r0, #161	; 0xa1
 801930a:	f7ff fe07 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xC0); //15 - COMS normal = 1/65  duty
 801930e:	20c0      	movs	r0, #192	; 0xc0
 8019310:	f7ff fe04 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA6); //9 - Display  = normal  
 8019314:	20a6      	movs	r0, #166	; 0xa6
 8019316:	f7ff fe01 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA2); //11 - 1/65 duty 1/9 bias for 65x132 display
 801931a:	20a2      	movs	r0, #162	; 0xa2
 801931c:	f7ff fdfe 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x2F); //16  - Power control set = B.,R,F all ON
 8019320:	202f      	movs	r0, #47	; 0x2f
 8019322:	f7ff fdfb 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xF8); //20-1 - select Booster ratio set
 8019326:	20f8      	movs	r0, #248	; 0xf8
 8019328:	f7ff fdf8 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //20-2 - Booster ratio register (must be preceeded by 20-1)
 801932c:	4640      	mov	r0, r8
 801932e:	f7ff fdf5 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x27); //17 - VO volt reg set 
 8019332:	2027      	movs	r0, #39	; 0x27
 8019334:	f7ff fdf2 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x81); //18-1 - Elect vol control - contrast
 8019338:	2081      	movs	r0, #129	; 0x81
 801933a:	f7ff fdef 	bl	8018f1c <APP_LCD_Cmd>
#if 0
      APP_LCD_Cmd(0x16); //18-2 - Contrast level dec 22	
#else
      APP_LCD_Cmd(0x10); //18-2 - Contrast level dec 16
 801933e:	2010      	movs	r0, #16
 8019340:	f7ff fdec 	bl	8018f1c <APP_LCD_Cmd>
#endif
      APP_LCD_Cmd(0xAC); //19-1 - Static Indicator - set off
 8019344:	20ac      	movs	r0, #172	; 0xac
 8019346:	f7ff fde9 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //19-2 - No Indicator
 801934a:	4640      	mov	r0, r8
 801934c:	f7ff fde6 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0xAF); //20 - Display ON
 8019350:	20af      	movs	r0, #175	; 0xaf
 8019352:	e105      	b.n	8019560 <APP_LCD_Init+0x31c>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    u8 rotated = mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED;

    // all OLEDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 8019354:	f1b8 0f00 	cmp.w	r8, #0
 8019358:	f040 8104 	bne.w	8019564 <APP_LCD_Init+0x320>
      // ExtPort.3: RST#
      // J5A.A0/J10B.D12: CS of first display
      // J5A.A1/J10B.D13: CS of second display
      // J5A.A2/J10B.D14: CS of third display
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
 801935c:	4948      	ldr	r1, [pc, #288]	; (8019480 <APP_LCD_Init+0x23c>)
 801935e:	7808      	ldrb	r0, [r1, #0]
 8019360:	b330      	cbz	r0, 80193b0 <APP_LCD_Init+0x16c>
	APP_LCD_ExtPort_Init();
 8019362:	f7ff fc59 	bl	8018c18 <APP_LCD_ExtPort_Init>
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<4; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8019366:	2105      	movs	r1, #5
 8019368:	200c      	movs	r0, #12
 801936a:	f7f9 ff90 	bl	801328e <MIOS32_BOARD_J10_PinInit>
 801936e:	2105      	movs	r1, #5
 8019370:	200d      	movs	r0, #13
 8019372:	f7f9 ff8c 	bl	801328e <MIOS32_BOARD_J10_PinInit>
 8019376:	2105      	movs	r1, #5
 8019378:	200e      	movs	r0, #14
 801937a:	f7f9 ff88 	bl	801328e <MIOS32_BOARD_J10_PinInit>
 801937e:	2105      	movs	r1, #5
 8019380:	200f      	movs	r0, #15
 8019382:	f7f9 ff84 	bl	801328e <MIOS32_BOARD_J10_PinInit>
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
 8019386:	4641      	mov	r1, r8
 8019388:	2003      	movs	r0, #3
 801938a:	f7ff fc07 	bl	8018b9c <APP_LCD_ExtPort_PinSet>
	MIOS32_DELAY_Wait_uS(100);
	APP_LCD_ExtPort_PinSet(3, 1);

	display_available |= 0x0f;
 801938e:	4d3a      	ldr	r5, [pc, #232]	; (8019478 <APP_LCD_Init+0x234>)
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
	MIOS32_DELAY_Wait_uS(100);
 8019390:	2064      	movs	r0, #100	; 0x64
 8019392:	f7f9 fff5 	bl	8013380 <MIOS32_DELAY_Wait_uS>
	APP_LCD_ExtPort_PinSet(3, 1);
 8019396:	2101      	movs	r1, #1
 8019398:	2003      	movs	r0, #3
 801939a:	f7ff fbff 	bl	8018b9c <APP_LCD_ExtPort_PinSet>

	display_available |= 0x0f;
 801939e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80193a2:	200f      	movs	r0, #15
 80193a4:	2100      	movs	r1, #0
 80193a6:	4302      	orrs	r2, r0
 80193a8:	430b      	orrs	r3, r1
 80193aa:	e9c5 2300 	strd	r2, r3, [r5]
 80193ae:	e018      	b.n	80193e2 <APP_LCD_Init+0x19e>
      } else {
	// the OLED works at 3.3V, level shifting (and open drain mode) not required
	if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 80193b0:	4640      	mov	r0, r8
 80193b2:	f7f9 ff72 	bl	801329a <MIOS32_BOARD_J15_PortInit>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	f6ff af54 	blt.w	8019264 <APP_LCD_Init+0x20>
	  return -2; // failed to initialize J15

	display_available |= 0xff;
 80193bc:	4d2e      	ldr	r5, [pc, #184]	; (8019478 <APP_LCD_Init+0x234>)
 80193be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80193c2:	20ff      	movs	r0, #255	; 0xff
 80193c4:	2100      	movs	r1, #0
 80193c6:	4302      	orrs	r2, r0
 80193c8:	430b      	orrs	r3, r1
 80193ca:	e9c5 2300 	strd	r2, r3, [r5]

	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 80193ce:	f7ff fc2f 	bl	8018c30 <APP_LCD_SERGLCD_CS_Init>
 80193d2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
	    MIOS32_DELAY_Wait_uS(1000);
 80193d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80193da:	f7f9 ffd1 	bl	8013380 <MIOS32_DELAY_Wait_uS>
	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
 80193de:	3d01      	subs	r5, #1
 80193e0:	d1f9      	bne.n	80193d6 <APP_LCD_Init+0x192>
	}
      }


      // initialize LCDs
      APP_LCD_Cmd(0xa8); // Set MUX Ratio
 80193e2:	20a8      	movs	r0, #168	; 0xa8
 80193e4:	f7ff fd9a 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x3f);
 80193e8:	203f      	movs	r0, #63	; 0x3f
 80193ea:	f7ff fd97 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd3); // Set Display Offset
 80193ee:	20d3      	movs	r0, #211	; 0xd3
 80193f0:	f7ff fd94 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00);
 80193f4:	2000      	movs	r0, #0
 80193f6:	f7ff fd91 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0x40); // Set Display Start Line
 80193fa:	2040      	movs	r0, #64	; 0x40
 80193fc:	f7ff fd8e 	bl	8018f1c <APP_LCD_Cmd>

      if( !rotated ) {
 8019400:	2c85      	cmp	r4, #133	; 0x85
 8019402:	d004      	beq.n	801940e <APP_LCD_Init+0x1ca>
	APP_LCD_Cmd(0xa0); // Set Segment re-map
 8019404:	20a0      	movs	r0, #160	; 0xa0
 8019406:	f7ff fd89 	bl	8018f1c <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc0); // Set COM Output Scan Direction
 801940a:	20c0      	movs	r0, #192	; 0xc0
 801940c:	e003      	b.n	8019416 <APP_LCD_Init+0x1d2>
      } else {
	APP_LCD_Cmd(0xa1); // Set Segment re-map: rotated
 801940e:	20a1      	movs	r0, #161	; 0xa1
 8019410:	f7ff fd84 	bl	8018f1c <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc8); // Set COM Output Scan Direction: rotated
 8019414:	20c8      	movs	r0, #200	; 0xc8
 8019416:	f7ff fd81 	bl	8018f1c <APP_LCD_Cmd>
      }

      APP_LCD_Cmd(0xda); // Set COM Pins hardware configuration
 801941a:	20da      	movs	r0, #218	; 0xda
 801941c:	f7ff fd7e 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x12);
 8019420:	2012      	movs	r0, #18
 8019422:	f7ff fd7b 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0x81); // Set Contrast Control
 8019426:	2081      	movs	r0, #129	; 0x81
 8019428:	f7ff fd78 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7f); // middle
 801942c:	207f      	movs	r0, #127	; 0x7f
 801942e:	f7ff fd75 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa4); // Disable Entiere Display On
 8019432:	20a4      	movs	r0, #164	; 0xa4
 8019434:	f7ff fd72 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa6); // Set Normal Display
 8019438:	20a6      	movs	r0, #166	; 0xa6
 801943a:	f7ff fd6f 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd5); // Set OSC Frequency
 801943e:	20d5      	movs	r0, #213	; 0xd5
 8019440:	f7ff fd6c 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x80);
 8019444:	2080      	movs	r0, #128	; 0x80
 8019446:	f7ff fd69 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0x8d); // Enable charge pump regulator
 801944a:	208d      	movs	r0, #141	; 0x8d
 801944c:	f7ff fd66 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x14);
 8019450:	2014      	movs	r0, #20
 8019452:	f7ff fd63 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0xaf); // Display On
 8019456:	20af      	movs	r0, #175	; 0xaf
 8019458:	f7ff fd60 	bl	8018f1c <APP_LCD_Cmd>

      APP_LCD_Cmd(0x20); // Enable Page mode
 801945c:	2020      	movs	r0, #32
 801945e:	f7ff fd5d 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x02);
 8019462:	2002      	movs	r0, #2
 8019464:	e07c      	b.n	8019560 <APP_LCD_Init+0x31c>
    if( MIOS32_BOARD_J15_PortInit(0) < 0 )
      return -2; // failed to initialize J15
#else
    // 0: J15 pins are configured in Push Pull Mode (3.3V)
    // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ||
 8019466:	3c01      	subs	r4, #1
 8019468:	2c01      	cmp	r4, #1
 801946a:	d80b      	bhi.n	8019484 <APP_LCD_Init+0x240>
	mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_PP ) {
      // DOG CLCD works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 801946c:	2000      	movs	r0, #0
 801946e:	e00a      	b.n	8019486 <APP_LCD_Init+0x242>
 8019470:	20000611 	.word	0x20000611
 8019474:	200001ac 	.word	0x200001ac
 8019478:	20000618 	.word	0x20000618
 801947c:	200037d6 	.word	0x200037d6
 8019480:	20000620 	.word	0x20000620
	return -2; // failed to initialize J15
    } else {
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 8019484:	2001      	movs	r0, #1
 8019486:	f7f9 ff08 	bl	801329a <MIOS32_BOARD_J15_PortInit>
 801948a:	2800      	cmp	r0, #0
 801948c:	f6ff aeea 	blt.w	8019264 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
    }
#endif

    // init extension port?
    int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 8019490:	4b3e      	ldr	r3, [pc, #248]	; (801958c <APP_LCD_Init+0x348>)
 8019492:	785a      	ldrb	r2, [r3, #1]
 8019494:	7898      	ldrb	r0, [r3, #2]
 8019496:	fb12 f100 	smulbb	r1, r2, r0
    if( num_lcds >= 2 ) {
 801949a:	2901      	cmp	r1, #1
 801949c:	dd01      	ble.n	80194a2 <APP_LCD_Init+0x25e>
      APP_LCD_ExtPort_Init();
 801949e:	f7ff fbbb 	bl	8018c18 <APP_LCD_ExtPort_Init>
    }

    // initialize LCD
    MIOS32_BOARD_J15_DataSet(0x38);
 80194a2:	2038      	movs	r0, #56	; 0x38
 80194a4:	f7f9 fefc 	bl	80132a0 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 80194a8:	2000      	movs	r0, #0
 80194aa:	f7f9 feff 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>
    MIOS32_BOARD_J15_RW_Set(0);
 80194ae:	2000      	movs	r0, #0
 80194b0:	f7f9 feff 	bl	80132b2 <MIOS32_BOARD_J15_RW_Set>
    APP_LCD_E_Set(1);
 80194b4:	2001      	movs	r0, #1
 80194b6:	f7ff fc13 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80194ba:	2000      	movs	r0, #0
 80194bc:	f7ff fc10 	bl	8018ce0 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(5000); // according to the hitachi datasheet, this command takes 37 uS - take 1 mS to be at the secure side
 80194c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80194c4:	f7f9 ff5c 	bl	8013380 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 80194c8:	2001      	movs	r0, #1
 80194ca:	f7ff fc09 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80194ce:	2000      	movs	r0, #0
 80194d0:	f7ff fc06 	bl	8018ce0 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500); // and now only 500 uS anymore
 80194d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80194d8:	f7f9 ff52 	bl	8013380 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 80194dc:	2001      	movs	r0, #1
 80194de:	f7ff fbff 	bl	8018ce0 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80194e2:	2000      	movs	r0, #0
 80194e4:	f7ff fbfc 	bl	8018ce0 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500);
 80194e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80194ec:	f7f9 ff48 	bl	8013380 <MIOS32_DELAY_Wait_uS>

    APP_LCD_Cmd(0x08); // Display Off
 80194f0:	2008      	movs	r0, #8
 80194f2:	f7ff fd13 	bl	8018f1c <APP_LCD_Cmd>

    // display still available?
    // if not, we can already break here!
    if( !(display_available & (1ULL << mios32_lcd_device)) )
 80194f6:	4b26      	ldr	r3, [pc, #152]	; (8019590 <APP_LCD_Init+0x34c>)
 80194f8:	4a26      	ldr	r2, [pc, #152]	; (8019594 <APP_LCD_Init+0x350>)
 80194fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194fe:	7812      	ldrb	r2, [r2, #0]
 8019500:	f000 ffbc 	bl	801a47c <__aeabi_llsr>
 8019504:	2201      	movs	r2, #1
 8019506:	2300      	movs	r3, #0
 8019508:	4010      	ands	r0, r2
 801950a:	4019      	ands	r1, r3
 801950c:	ea50 0301 	orrs.w	r3, r0, r1
 8019510:	f43f ae9d 	beq.w	801924e <APP_LCD_Init+0xa>
      return -1; // display not available

    APP_LCD_Cmd(0x0c); // Display On
 8019514:	200c      	movs	r0, #12
 8019516:	f7ff fd01 	bl	8018f1c <APP_LCD_Cmd>
    APP_LCD_Cmd(0x06); // Entry Mode
 801951a:	2006      	movs	r0, #6
 801951c:	f7ff fcfe 	bl	8018f1c <APP_LCD_Cmd>
    APP_LCD_Cmd(0x01); // Clear Display
 8019520:	2001      	movs	r0, #1
 8019522:	f7ff fcfb 	bl	8018f1c <APP_LCD_Cmd>

    // for DOG displays: perform additional display initialisation
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ) {
 8019526:	4819      	ldr	r0, [pc, #100]	; (801958c <APP_LCD_Init+0x348>)
 8019528:	7801      	ldrb	r1, [r0, #0]
 801952a:	2901      	cmp	r1, #1
 801952c:	d114      	bne.n	8019558 <APP_LCD_Init+0x314>
      APP_LCD_Cmd(0x39); // 8bit interface, switch to instruction table 1
 801952e:	2039      	movs	r0, #57	; 0x39
 8019530:	f7ff fcf4 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x1d); // BS: 1/4, 3 line LCD
 8019534:	201d      	movs	r0, #29
 8019536:	f7ff fcf1 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x50); // Booster off, set contrast C5/C4
 801953a:	2050      	movs	r0, #80	; 0x50
 801953c:	f7ff fcee 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x6c); // set Voltage follower and amplifier
 8019540:	206c      	movs	r0, #108	; 0x6c
 8019542:	f7ff fceb 	bl	8018f1c <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
 8019546:	207c      	movs	r0, #124	; 0x7c
 8019548:	f7ff fce8 	bl	8018f1c <APP_LCD_Cmd>
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 801954c:	4a12      	ldr	r2, [pc, #72]	; (8019598 <APP_LCD_Init+0x354>)
 801954e:	6813      	ldr	r3, [r2, #0]
      MIOS32_LCD_CursorMapSet(cursor_map);
 8019550:	a801      	add	r0, sp, #4
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 8019552:	9301      	str	r3, [sp, #4]
      MIOS32_LCD_CursorMapSet(cursor_map);
 8019554:	f7f7 fff2 	bl	801153c <MIOS32_LCD_CursorMapSet>
    }

    APP_LCD_Cmd(0x38); // experience from PIC based MIOS: without these lines
 8019558:	2038      	movs	r0, #56	; 0x38
 801955a:	f7ff fcdf 	bl	8018f1c <APP_LCD_Cmd>
    APP_LCD_Cmd(0x0c); // the LCD won't work correctly after a second APP_LCD_Init
 801955e:	200c      	movs	r0, #12
 8019560:	f7ff fcdc 	bl	8018f1c <APP_LCD_Cmd>
  }
  }

  return (display_available & (1ULL << mios32_lcd_device)) ? 0 : -1; // return -1 if display not available
 8019564:	480a      	ldr	r0, [pc, #40]	; (8019590 <APP_LCD_Init+0x34c>)
 8019566:	4a0b      	ldr	r2, [pc, #44]	; (8019594 <APP_LCD_Init+0x350>)
 8019568:	e9d0 0100 	ldrd	r0, r1, [r0]
 801956c:	7812      	ldrb	r2, [r2, #0]
 801956e:	f000 ff85 	bl	801a47c <__aeabi_llsr>
 8019572:	2201      	movs	r2, #1
 8019574:	2300      	movs	r3, #0
 8019576:	4010      	ands	r0, r2
 8019578:	4019      	ands	r1, r3
 801957a:	ea50 0201 	orrs.w	r2, r0, r1
 801957e:	bf0c      	ite	eq
 8019580:	f04f 30ff 	moveq.w	r0, #4294967295
 8019584:	2000      	movne	r0, #0
}
 8019586:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 801958a:	bf00      	nop
 801958c:	200037d6 	.word	0x200037d6
 8019590:	20000618 	.word	0x20000618
 8019594:	200001ac 	.word	0x200001ac
 8019598:	0801bb02 	.word	0x0801bb02

0801959c <APP_LCD_Clear>:
// Clear Screen
// IN: -
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
 801959c:	b570      	push	{r4, r5, r6, lr}
  if( lcd_testmode )
 801959e:	4b4d      	ldr	r3, [pc, #308]	; (80196d4 <APP_LCD_Clear+0x138>)
 80195a0:	781d      	ldrb	r5, [r3, #0]
 80195a2:	2d00      	cmp	r5, #0
 80195a4:	f040 8093 	bne.w	80196ce <APP_LCD_Clear+0x132>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 80195a8:	484b      	ldr	r0, [pc, #300]	; (80196d8 <APP_LCD_Clear+0x13c>)
 80195aa:	7801      	ldrb	r1, [r0, #0]
 80195ac:	317f      	adds	r1, #127	; 0x7f
 80195ae:	b2ca      	uxtb	r2, r1
 80195b0:	2a05      	cmp	r2, #5
 80195b2:	f200 8087 	bhi.w	80196c4 <APP_LCD_Clear+0x128>
 80195b6:	b24c      	sxtb	r4, r1
 80195b8:	2301      	movs	r3, #1
 80195ba:	fa03 f004 	lsl.w	r0, r3, r4
 80195be:	f010 0423 	ands.w	r4, r0, #35	; 0x23
 80195c2:	d109      	bne.n	80195d8 <APP_LCD_Clear+0x3c>
 80195c4:	f010 0518 	ands.w	r5, r0, #24
 80195c8:	d143      	bne.n	8019652 <APP_LCD_Clear+0xb6>
 80195ca:	0742      	lsls	r2, r0, #29
 80195cc:	d57a      	bpl.n	80196c4 <APP_LCD_Clear+0x128>
  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 80195ce:	4843      	ldr	r0, [pc, #268]	; (80196dc <APP_LCD_Clear+0x140>)
 80195d0:	f7f7 ffc0 	bl	8011554 <MIOS32_LCD_FontInit>

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80195d4:	462c      	mov	r4, r5
 80195d6:	e021      	b.n	801961c <APP_LCD_Clear+0x80>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 80195d8:	4840      	ldr	r0, [pc, #256]	; (80196dc <APP_LCD_Clear+0x140>)
 80195da:	f7f7 ffbb 	bl	8011554 <MIOS32_LCD_FontInit>

  switch( mios32_lcd_parameters.lcd_type ) {
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
 80195de:	462c      	mov	r4, r5
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80195e0:	493d      	ldr	r1, [pc, #244]	; (80196d8 <APP_LCD_Clear+0x13c>)
 80195e2:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 80195e4:	2000      	movs	r0, #0
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80195e6:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
 80195ea:	da10      	bge.n	801960e <APP_LCD_Clear+0x72>
      error |= MIOS32_LCD_CursorSet(0, y);
 80195ec:	b2a9      	uxth	r1, r5
 80195ee:	f7f7 ff79 	bl	80114e4 <MIOS32_LCD_CursorSet>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80195f2:	2600      	movs	r6, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
 80195f4:	4304      	orrs	r4, r0
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80195f6:	4b38      	ldr	r3, [pc, #224]	; (80196d8 <APP_LCD_Clear+0x13c>)
 80195f8:	8898      	ldrh	r0, [r3, #4]
 80195fa:	4286      	cmp	r6, r0
 80195fc:	da05      	bge.n	801960a <APP_LCD_Clear+0x6e>
	error |= APP_LCD_Data(0x00);
 80195fe:	2000      	movs	r0, #0
 8019600:	f7ff fd26 	bl	8019050 <APP_LCD_Data>
    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019604:	3601      	adds	r6, #1
	error |= APP_LCD_Data(0x00);
 8019606:	4304      	orrs	r4, r0
 8019608:	e7f5      	b.n	80195f6 <APP_LCD_Clear+0x5a>
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801960a:	3501      	adds	r5, #1
 801960c:	e7e8      	b.n	80195e0 <APP_LCD_Clear+0x44>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
	error |= APP_LCD_Data(0x00);
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 801960e:	4601      	mov	r1, r0
 8019610:	f7f7 ff68 	bl	80114e4 <MIOS32_LCD_CursorSet>
 8019614:	4320      	orrs	r0, r4

    return error;
 8019616:	bd70      	pop	{r4, r5, r6, pc}

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 8019618:	3401      	adds	r4, #1
 801961a:	b2e4      	uxtb	r4, r4
 801961c:	492e      	ldr	r1, [pc, #184]	; (80196d8 <APP_LCD_Clear+0x13c>)
 801961e:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 8019620:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 8019622:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 8019626:	d248      	bcs.n	80196ba <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 8019628:	4621      	mov	r1, r4
 801962a:	f7f7 ff5b 	bl	80114e4 <MIOS32_LCD_CursorSet>
 801962e:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 8019630:	2001      	movs	r0, #1
 8019632:	f7ff fbd7 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 8019636:	2001      	movs	r0, #1
 8019638:	f7f9 fe38 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801963c:	2600      	movs	r6, #0
 801963e:	4b26      	ldr	r3, [pc, #152]	; (80196d8 <APP_LCD_Clear+0x13c>)
 8019640:	8898      	ldrh	r0, [r3, #4]
 8019642:	42b0      	cmp	r0, r6
 8019644:	d9e8      	bls.n	8019618 <APP_LCD_Clear+0x7c>
	MIOS32_BOARD_J15_SerDataShift(0x00);
 8019646:	2000      	movs	r0, #0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019648:	3601      	adds	r6, #1
	MIOS32_BOARD_J15_SerDataShift(0x00);
 801964a:	f7f9 fe2c 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801964e:	b2f6      	uxtb	r6, r6
 8019650:	e7f5      	b.n	801963e <APP_LCD_Clear+0xa2>
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 8019652:	4822      	ldr	r0, [pc, #136]	; (80196dc <APP_LCD_Clear+0x140>)
 8019654:	f7f7 ff7e 	bl	8011554 <MIOS32_LCD_FontInit>
    return error;
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
 8019658:	4625      	mov	r5, r4

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801965a:	491f      	ldr	r1, [pc, #124]	; (80196d8 <APP_LCD_Clear+0x13c>)
 801965c:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 801965e:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 8019660:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 8019664:	d229      	bcs.n	80196ba <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 8019666:	4621      	mov	r1, r4
 8019668:	f7f7 ff3c 	bl	80114e4 <MIOS32_LCD_CursorSet>
 801966c:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 801966e:	2001      	movs	r0, #1
 8019670:	f7ff fbb8 	bl	8018de4 <APP_LCD_SERGLCD_CS_Set.constprop.2>

      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
 8019674:	4b1a      	ldr	r3, [pc, #104]	; (80196e0 <APP_LCD_Clear+0x144>)
 8019676:	781e      	ldrb	r6, [r3, #0]
 8019678:	b196      	cbz	r6, 80196a0 <APP_LCD_Clear+0x104>
	APP_LCD_ExtPort_PinSet(2, 1); // DC
 801967a:	2002      	movs	r0, #2
 801967c:	2101      	movs	r1, #1
 801967e:	f7ff fa8d 	bl	8018b9c <APP_LCD_ExtPort_PinSet>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019682:	2600      	movs	r6, #0
 8019684:	4a14      	ldr	r2, [pc, #80]	; (80196d8 <APP_LCD_Clear+0x13c>)
 8019686:	8893      	ldrh	r3, [r2, #4]
 8019688:	42b3      	cmp	r3, r6
 801968a:	d906      	bls.n	801969a <APP_LCD_Clear+0xfe>
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
 801968c:	2000      	movs	r0, #0
 801968e:	4601      	mov	r1, r0
 8019690:	f7ff fb04 	bl	8018c9c <APP_LCD_ExtPort_SerDataShift>
      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_PinSet(2, 1); // DC

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019694:	1c70      	adds	r0, r6, #1
 8019696:	b2c6      	uxtb	r6, r0
 8019698:	e7f4      	b.n	8019684 <APP_LCD_Clear+0xe8>

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 801969a:	3401      	adds	r4, #1
 801969c:	b2e4      	uxtb	r4, r4
 801969e:	e7dc      	b.n	801965a <APP_LCD_Clear+0xbe>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 80196a0:	2001      	movs	r0, #1
 80196a2:	f7f9 fe03 	bl	80132ac <MIOS32_BOARD_J15_RS_Set>

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 80196a6:	480c      	ldr	r0, [pc, #48]	; (80196d8 <APP_LCD_Clear+0x13c>)
 80196a8:	8881      	ldrh	r1, [r0, #4]
 80196aa:	42b1      	cmp	r1, r6
 80196ac:	d9f5      	bls.n	801969a <APP_LCD_Clear+0xfe>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 80196ae:	2000      	movs	r0, #0
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 80196b0:	3601      	adds	r6, #1
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 80196b2:	f7f9 fdf8 	bl	80132a6 <MIOS32_BOARD_J15_SerDataShift>
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 80196b6:	b2f6      	uxtb	r6, r6
 80196b8:	e7f5      	b.n	80196a6 <APP_LCD_Clear+0x10a>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
      }
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 80196ba:	4601      	mov	r1, r0
 80196bc:	f7f7 ff12 	bl	80114e4 <MIOS32_LCD_CursorSet>
 80196c0:	4328      	orrs	r0, r5

    return error;
 80196c2:	bd70      	pop	{r4, r5, r6, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 80196c4:	2001      	movs	r0, #1
  }

  return -3; // not supported
}
 80196c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 80196ca:	f7ff bc27 	b.w	8018f1c <APP_LCD_Cmd>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 80196ce:	f04f 30ff 	mov.w	r0, #4294967295
    // -> send clear command
    return APP_LCD_Cmd(0x01);
  }

  return -3; // not supported
}
 80196d2:	bd70      	pop	{r4, r5, r6, pc}
 80196d4:	20000611 	.word	0x20000611
 80196d8:	200037d6 	.word	0x200037d6
 80196dc:	0801bb06 	.word	0x0801bb06
 80196e0:	20000620 	.word	0x20000620

080196e4 <APP_LCD_GCursorSet>:
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 80196e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( lcd_testmode )
 80196e6:	4b32      	ldr	r3, [pc, #200]	; (80197b0 <APP_LCD_GCursorSet+0xcc>)
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 80196e8:	4604      	mov	r4, r0
  if( lcd_testmode )
 80196ea:	7818      	ldrb	r0, [r3, #0]
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 80196ec:	460d      	mov	r5, r1
  if( lcd_testmode )
 80196ee:	2800      	cmp	r0, #0
 80196f0:	d158      	bne.n	80197a4 <APP_LCD_GCursorSet+0xc0>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 80196f2:	4e30      	ldr	r6, [pc, #192]	; (80197b4 <APP_LCD_GCursorSet+0xd0>)
 80196f4:	7831      	ldrb	r1, [r6, #0]
 80196f6:	3981      	subs	r1, #129	; 0x81
 80196f8:	2905      	cmp	r1, #5
 80196fa:	d856      	bhi.n	80197aa <APP_LCD_GCursorSet+0xc6>
 80196fc:	e8df f001 	tbb	[pc, r1]
 8019700:	3d1b0303 	.word	0x3d1b0303
 8019704:	0d3d      	.short	0x0d3d
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x40 | (x % 64));
 8019706:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 801970a:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 801970e:	f7ff fc05 	bl	8018f1c <APP_LCD_Cmd>
 8019712:	4604      	mov	r4, r0

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x7));
 8019714:	f3c5 00c2 	ubfx	r0, r5, #3, #3
 8019718:	e00a      	b.n	8019730 <APP_LCD_GCursorSet+0x4c>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;

    // set X position
#if SED1520_POLLIN_WINTEK_WD_G1203T
    error |= APP_LCD_Cmd(0x00 | (x % 61));
 801971a:	233d      	movs	r3, #61	; 0x3d
 801971c:	fbb4 f2f3 	udiv	r2, r4, r3
 8019720:	fb03 4412 	mls	r4, r3, r2, r4
 8019724:	b2e0      	uxtb	r0, r4
 8019726:	f7ff fbf9 	bl	8018f1c <APP_LCD_Cmd>
 801972a:	4604      	mov	r4, r0
#else
    error |= APP_LCD_Cmd(0x00 | (x % 64));
#endif

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x3));
 801972c:	f3c5 00c1 	ubfx	r0, r5, #3, #2
 8019730:	f040 00b8 	orr.w	r0, r0, #184	; 0xb8
 8019734:	e032      	b.n	801979c <APP_LCD_GCursorSet+0xb8>

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 8019736:	88b7      	ldrh	r7, [r6, #4]
 8019738:	fbb4 f2f7 	udiv	r2, r4, r7
 801973c:	fb07 4012 	mls	r0, r7, r2, r4
 8019740:	f3c0 1103 	ubfx	r1, r0, #4, #4
 8019744:	f041 0010 	orr.w	r0, r1, #16
 8019748:	f7ff fbe8 	bl	8018f1c <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 801974c:	88b3      	ldrh	r3, [r6, #4]
 801974e:	fbb4 f2f3 	udiv	r2, r4, r3
 8019752:	fb03 4412 	mls	r4, r3, r2, r4

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 8019756:	4607      	mov	r7, r0
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 8019758:	f004 000f 	and.w	r0, r4, #15
 801975c:	f7ff fbde 	bl	8018f1c <APP_LCD_Cmd>
 8019760:	ea40 0407 	orr.w	r4, r0, r7

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) % (mios32_lcd_parameters.height/8)));
 8019764:	88f0      	ldrh	r0, [r6, #6]
 8019766:	08ed      	lsrs	r5, r5, #3
 8019768:	08c1      	lsrs	r1, r0, #3
 801976a:	fb95 f3f1 	sdiv	r3, r5, r1
 801976e:	fb01 5513 	mls	r5, r1, r3, r5
 8019772:	f065 024f 	orn	r2, r5, #79	; 0x4f
 8019776:	b2d0      	uxtb	r0, r2
 8019778:	e010      	b.n	801979c <APP_LCD_GCursorSet+0xb8>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 801977a:	f004 000f 	and.w	r0, r4, #15
 801977e:	f7ff fbcd 	bl	8018f1c <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019782:	f3c4 1103 	ubfx	r1, r4, #4, #4
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 8019786:	4606      	mov	r6, r0
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019788:	f041 0010 	orr.w	r0, r1, #16
 801978c:	f7ff fbc6 	bl	8018f1c <APP_LCD_Cmd>

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 8019790:	f3c5 03c2 	ubfx	r3, r5, #3, #3
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019794:	ea40 0406 	orr.w	r4, r0, r6

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 8019798:	f043 00b0 	orr.w	r0, r3, #176	; 0xb0
 801979c:	f7ff fbbe 	bl	8018f1c <APP_LCD_Cmd>
 80197a0:	4320      	orrs	r0, r4

    return error;
 80197a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 80197a4:	f04f 30ff 	mov.w	r0, #4294967295
 80197a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    return error;
  } break;
  }

  return -3; // not supported
 80197aa:	f06f 0002 	mvn.w	r0, #2
}
 80197ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197b0:	20000611 	.word	0x20000611
 80197b4:	200037d6 	.word	0x200037d6

080197b8 <APP_LCD_CursorSet>:
// IN: <column> and <line>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_CursorSet(u16 column, u16 line)
{
  if( lcd_testmode )
 80197b8:	4b0d      	ldr	r3, [pc, #52]	; (80197f0 <APP_LCD_CursorSet+0x38>)
 80197ba:	781a      	ldrb	r2, [r3, #0]
 80197bc:	2a00      	cmp	r2, #0
 80197be:	d114      	bne.n	80197ea <APP_LCD_CursorSet+0x32>
    return -1; // direct access disabled in testmode

  if( mios32_lcd_parameters.lcd_type >= 0x80 ) { // GLCD
 80197c0:	4b0c      	ldr	r3, [pc, #48]	; (80197f4 <APP_LCD_CursorSet+0x3c>)
 80197c2:	f993 2000 	ldrsb.w	r2, [r3]
 80197c6:	2a00      	cmp	r2, #0
 80197c8:	da05      	bge.n	80197d6 <APP_LCD_CursorSet+0x1e>
    // mios32_lcd_x/y set by MIOS32_LCD_CursorSet() function
    return APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 80197ca:	4b0b      	ldr	r3, [pc, #44]	; (80197f8 <APP_LCD_CursorSet+0x40>)
 80197cc:	490b      	ldr	r1, [pc, #44]	; (80197fc <APP_LCD_CursorSet+0x44>)
 80197ce:	8818      	ldrh	r0, [r3, #0]
 80197d0:	8809      	ldrh	r1, [r1, #0]
 80197d2:	f7ff bf87 	b.w	80196e4 <APP_LCD_GCursorSet>
  } else { // CLCD
    // exit with error if line is not in allowed range
    if( line >= MIOS32_LCD_MAX_MAP_LINES )
 80197d6:	2903      	cmp	r1, #3
 80197d8:	d807      	bhi.n	80197ea <APP_LCD_CursorSet+0x32>
      return -1;

    // -> set cursor address
    return APP_LCD_Cmd(0x80 | (mios32_lcd_cursor_map[line] + column));
 80197da:	4b09      	ldr	r3, [pc, #36]	; (8019800 <APP_LCD_CursorSet+0x48>)
 80197dc:	5c59      	ldrb	r1, [r3, r1]
 80197de:	1808      	adds	r0, r1, r0
 80197e0:	f060 027f 	orn	r2, r0, #127	; 0x7f
 80197e4:	b2d0      	uxtb	r0, r2
 80197e6:	f7ff bb99 	b.w	8018f1c <APP_LCD_Cmd>
  }

  return -3; // not supported
}
 80197ea:	f04f 30ff 	mov.w	r0, #4294967295
 80197ee:	4770      	bx	lr
 80197f0:	20000611 	.word	0x20000611
 80197f4:	200037d6 	.word	0x200037d6
 80197f8:	200037e8 	.word	0x200037e8
 80197fc:	200037d4 	.word	0x200037d4
 8019800:	200037e2 	.word	0x200037e2

08019804 <APP_LCD_BColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BColourSet(u32 rgb)
{
  return -3; // not supported
}
 8019804:	f06f 0002 	mvn.w	r0, #2
 8019808:	4770      	bx	lr

0801980a <APP_LCD_FColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_FColourSet(u32 rgb)
{
  return -3; // not supported
}
 801980a:	f06f 0002 	mvn.w	r0, #2
 801980e:	4770      	bx	lr

08019810 <APP_LCD_BitmapPrint>:
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 8019810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019814:	b085      	sub	sp, #20
 8019816:	ab04      	add	r3, sp, #16
 8019818:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if( lcd_testmode )
 801981c:	4823      	ldr	r0, [pc, #140]	; (80198ac <APP_LCD_BitmapPrint+0x9c>)
 801981e:	7804      	ldrb	r4, [r0, #0]
 8019820:	b114      	cbz	r4, 8019828 <APP_LCD_BitmapPrint+0x18>
    return -1; // direct access disabled in testmode
 8019822:	f04f 30ff 	mov.w	r0, #4294967295
 8019826:	e03d      	b.n	80198a4 <APP_LCD_BitmapPrint+0x94>

  if( !MIOS32_LCD_TypeIsGLCD() )
 8019828:	f7f7 fe4e 	bl	80114c8 <MIOS32_LCD_TypeIsGLCD>
 801982c:	2800      	cmp	r0, #0
 801982e:	d0f8      	beq.n	8019822 <APP_LCD_BitmapPrint+0x12>
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
 8019830:	491f      	ldr	r1, [pc, #124]	; (80198b0 <APP_LCD_BitmapPrint+0xa0>)
 8019832:	4a20      	ldr	r2, [pc, #128]	; (80198b4 <APP_LCD_BitmapPrint+0xa4>)
 8019834:	880f      	ldrh	r7, [r1, #0]
 8019836:	8893      	ldrh	r3, [r2, #4]
 8019838:	42bb      	cmp	r3, r7
 801983a:	d92f      	bls.n	801989c <APP_LCD_BitmapPrint+0x8c>
  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 801983c:	481e      	ldr	r0, [pc, #120]	; (80198b8 <APP_LCD_BitmapPrint+0xa8>)
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 801983e:	f8bd 600a 	ldrh.w	r6, [sp, #10]

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 8019842:	f8b0 8000 	ldrh.w	r8, [r0]
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 8019846:	08f6      	lsrs	r6, r6, #3

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 8019848:	42b4      	cmp	r4, r6
 801984a:	da1c      	bge.n	8019886 <APP_LCD_BitmapPrint+0x76>

    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;
 801984c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019850:	9d01      	ldr	r5, [sp, #4]
 8019852:	fb09 5904 	mla	r9, r9, r4, r5

    // set graphical cursor after second line has reached
    if( line > 0 ) {
 8019856:	b14c      	cbz	r4, 801986c <APP_LCD_BitmapPrint+0x5c>
      mios32_lcd_x = initial_x;
      mios32_lcd_y += 8;
 8019858:	4817      	ldr	r0, [pc, #92]	; (80198b8 <APP_LCD_BitmapPrint+0xa8>)
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801985a:	4b15      	ldr	r3, [pc, #84]	; (80198b0 <APP_LCD_BitmapPrint+0xa0>)
      mios32_lcd_y += 8;
 801985c:	8801      	ldrh	r1, [r0, #0]
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 801985e:	801f      	strh	r7, [r3, #0]
      mios32_lcd_y += 8;
 8019860:	3108      	adds	r1, #8
 8019862:	b289      	uxth	r1, r1
 8019864:	8001      	strh	r1, [r0, #0]
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019866:	4638      	mov	r0, r7
 8019868:	f7ff ff3c 	bl	80196e4 <APP_LCD_GCursorSet>
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 801986c:	2500      	movs	r5, #0
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801986e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019872:	4295      	cmp	r5, r2
 8019874:	da05      	bge.n	8019882 <APP_LCD_BitmapPrint+0x72>
      APP_LCD_Data(*memory_ptr++);
 8019876:	f819 0005 	ldrb.w	r0, [r9, r5]
 801987a:	f7ff fbe9 	bl	8019050 <APP_LCD_Data>
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 801987e:	3501      	adds	r5, #1
 8019880:	e7f5      	b.n	801986e <APP_LCD_BitmapPrint+0x5e>
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 8019882:	3401      	adds	r4, #1
 8019884:	e7e0      	b.n	8019848 <APP_LCD_BitmapPrint+0x38>
    for(x=0; x<bitmap.width; ++x)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
 8019886:	b166      	cbz	r6, 80198a2 <APP_LCD_BitmapPrint+0x92>
    mios32_lcd_y = initial_y;
 8019888:	490b      	ldr	r1, [pc, #44]	; (80198b8 <APP_LCD_BitmapPrint+0xa8>)
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 801988a:	4a09      	ldr	r2, [pc, #36]	; (80198b0 <APP_LCD_BitmapPrint+0xa0>)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
 801988c:	f8a1 8000 	strh.w	r8, [r1]
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019890:	8810      	ldrh	r0, [r2, #0]
 8019892:	4641      	mov	r1, r8
 8019894:	f7ff ff26 	bl	80196e4 <APP_LCD_GCursorSet>
  }

  return 0; // no error
 8019898:	2000      	movs	r0, #0
 801989a:	e003      	b.n	80198a4 <APP_LCD_BitmapPrint+0x94>
  if( !MIOS32_LCD_TypeIsGLCD() )
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;
 801989c:	f06f 0001 	mvn.w	r0, #1
 80198a0:	e000      	b.n	80198a4 <APP_LCD_BitmapPrint+0x94>
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
  }

  return 0; // no error
 80198a2:	4630      	mov	r0, r6
}
 80198a4:	b005      	add	sp, #20
 80198a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198aa:	bf00      	nop
 80198ac:	20000611 	.word	0x20000611
 80198b0:	200037e8 	.word	0x200037e8
 80198b4:	200037d6 	.word	0x200037d6
 80198b8:	200037d4 	.word	0x200037d4

080198bc <MIDIMON_Init>:

/////////////////////////////////////////////////////////////////////////////
// Initialize the monitor
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Init(u32 mode)
{
 80198bc:	b530      	push	{r4, r5, lr}
  int tempo_port_ix;
  int i;

  if( mode > 0 )
 80198be:	b9e8      	cbnz	r0, 80198fc <MIDIMON_Init+0x40>
 80198c0:	4a10      	ldr	r2, [pc, #64]	; (8019904 <MIDIMON_Init+0x48>)
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
 80198c2:	4c11      	ldr	r4, [pc, #68]	; (8019908 <MIDIMON_Init+0x4c>)
 80198c4:	2300      	movs	r3, #0
 80198c6:	00c1      	lsls	r1, r0, #3
 80198c8:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
 80198cc:	1864      	adds	r4, r4, r1
    midi_clk_pos[tempo_port_ix].subtick = -1;
 80198ce:	25ff      	movs	r5, #255	; 0xff

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
 80198d0:	6063      	str	r3, [r4, #4]
    midi_clk_pos[tempo_port_ix].subtick = -1;
 80198d2:	71a5      	strb	r5, [r4, #6]

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
    tempo_sample_pos[tempo_port_ix] = 0;
 80198d4:	4c0d      	ldr	r4, [pc, #52]	; (801990c <MIDIMON_Init+0x50>)
  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
    midi_clk_pos[tempo_port_ix].subtick = -1;

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
 80198d6:	6013      	str	r3, [r2, #0]
    tempo_sample_pos[tempo_port_ix] = 0;
 80198d8:	5503      	strb	r3, [r0, r4]

    mtc_pos[tempo_port_ix].ALL = 0;
 80198da:	4c0d      	ldr	r4, [pc, #52]	; (8019910 <MIDIMON_Init+0x54>)
  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
    midi_clk_pos[tempo_port_ix].ALL = 0;
    midi_clk_pos[tempo_port_ix].subtick = -1;

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
 80198dc:	6053      	str	r3, [r2, #4]
 80198de:	6093      	str	r3, [r2, #8]
 80198e0:	60d3      	str	r3, [r2, #12]
 80198e2:	6113      	str	r3, [r2, #16]
 80198e4:	6153      	str	r3, [r2, #20]
 80198e6:	6193      	str	r3, [r2, #24]
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
 80198e8:	1861      	adds	r1, r4, r1
 80198ea:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
 80198ee:	3001      	adds	r0, #1
 80198f0:	321c      	adds	r2, #28
 80198f2:	2804      	cmp	r0, #4

    for(i=0; i<NUM_TEMPO_SAMPLES; ++i)
      tempo_samples[tempo_port_ix][i] = 0;
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
 80198f4:	604b      	str	r3, [r1, #4]
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet

  for(tempo_port_ix=0; tempo_port_ix<NUM_TEMPO_PORTS; ++tempo_port_ix) {
 80198f6:	d1e4      	bne.n	80198c2 <MIDIMON_Init+0x6>
    tempo_sample_pos[tempo_port_ix] = 0;

    mtc_pos[tempo_port_ix].ALL = 0;
  }

  return 0; // no error
 80198f8:	4618      	mov	r0, r3
 80198fa:	bd30      	pop	{r4, r5, pc}
{
  int tempo_port_ix;
  int i;

  if( mode > 0 )
    return -1; // only mode 0 supported yet
 80198fc:	f04f 30ff 	mov.w	r0, #4294967295

    mtc_pos[tempo_port_ix].ALL = 0;
  }

  return 0; // no error
}
 8019900:	bd30      	pop	{r4, r5, pc}
 8019902:	bf00      	nop
 8019904:	20000670 	.word	0x20000670
 8019908:	20000650 	.word	0x20000650
 801990c:	20000648 	.word	0x20000648
 8019910:	20000628 	.word	0x20000628

08019914 <MIDIMON_Print>:

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 8019914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019918:	b097      	sub	sp, #92	; 0x5c
 801991a:	4682      	mov	sl, r0
 801991c:	460e      	mov	r6, r1
 801991e:	4690      	mov	r8, r2
 8019920:	9305      	str	r3, [sp, #20]
 8019922:	f002 0b0f 	and.w	fp, r2, #15
 8019926:	f3c2 2507 	ubfx	r5, r2, #8, #8
 801992a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801992e:	ea4f 6712 	mov.w	r7, r2, lsr #24
  char pre_str[64];
  u8 display_midi_clk = 0;
  //u8 display_mtc = 0;

  if( strlen(prefix_str) > 50 ) {
 8019932:	f001 fcb8 	bl	801b2a6 <strlen>
 8019936:	2832      	cmp	r0, #50	; 0x32

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 8019938:	f89d 9080 	ldrb.w	r9, [sp, #128]	; 0x80
  char pre_str[64];
  u8 display_midi_clk = 0;
  //u8 display_mtc = 0;

  if( strlen(prefix_str) > 50 ) {
 801993c:	d902      	bls.n	8019944 <MIDIMON_Print+0x30>
    MSG("[ERROR:MIDIMON_PRINT] prefix_str shouldn't be longer than 50 chars!");
 801993e:	489d      	ldr	r0, [pc, #628]	; (8019bb4 <MIDIMON_Print+0x2a0>)
 8019940:	f7f8 f898 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
  }

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
 8019944:	f006 030f 	and.w	r3, r6, #15
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
 8019948:	2b08      	cmp	r3, #8
 801994a:	d801      	bhi.n	8019950 <MIDIMON_Print+0x3c>
 801994c:	3331      	adds	r3, #49	; 0x31
 801994e:	e000      	b.n	8019952 <MIDIMON_Print+0x3e>
 8019950:	3338      	adds	r3, #56	; 0x38
  switch( port & 0xf0 ) {
 8019952:	f006 02f0 	and.w	r2, r6, #240	; 0xf0
 8019956:	2a30      	cmp	r2, #48	; 0x30
 8019958:	d011      	beq.n	801997e <MIDIMON_Print+0x6a>
 801995a:	d806      	bhi.n	801996a <MIDIMON_Print+0x56>
 801995c:	2a10      	cmp	r2, #16
 801995e:	d00b      	beq.n	8019978 <MIDIMON_Print+0x64>
 8019960:	2a20      	cmp	r2, #32
 8019962:	d113      	bne.n	801998c <MIDIMON_Print+0x78>
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
 8019964:	a806      	add	r0, sp, #24
 8019966:	4994      	ldr	r1, [pc, #592]	; (8019bb8 <MIDIMON_Print+0x2a4>)
 8019968:	e00e      	b.n	8019988 <MIDIMON_Print+0x74>
  }

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
  switch( port & 0xf0 ) {
 801996a:	2a40      	cmp	r2, #64	; 0x40
 801996c:	d00a      	beq.n	8019984 <MIDIMON_Print+0x70>
 801996e:	2a50      	cmp	r2, #80	; 0x50
 8019970:	d10c      	bne.n	801998c <MIDIMON_Print+0x78>
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
    case IIC0:  sprintf(pre_str, "[%sIIC%c]", prefix_str, port_ix_name); break;
    case OSC0:  sprintf(pre_str, "[%sOSC%c]", prefix_str, port_ix_name); break;
    case SPIM0: sprintf(pre_str, "[%sSPI%c]", prefix_str, port_ix_name); break;
 8019972:	a806      	add	r0, sp, #24
 8019974:	4991      	ldr	r1, [pc, #580]	; (8019bbc <MIDIMON_Print+0x2a8>)
 8019976:	e007      	b.n	8019988 <MIDIMON_Print+0x74>

  // derive port name and build pre-string
  u8 port_ix = port & 0x0f;
  char port_ix_name = (port_ix < 9) ? ('1'+port_ix) : ('A'+(port_ix-9));
  switch( port & 0xf0 ) {
    case USB0:  sprintf(pre_str, "[%sUSB%c]", prefix_str, port_ix_name); break;
 8019978:	a806      	add	r0, sp, #24
 801997a:	4991      	ldr	r1, [pc, #580]	; (8019bc0 <MIDIMON_Print+0x2ac>)
 801997c:	e004      	b.n	8019988 <MIDIMON_Print+0x74>
    case UART0: sprintf(pre_str, "[%sIN%c ]", prefix_str, port_ix_name); break;
    case IIC0:  sprintf(pre_str, "[%sIIC%c]", prefix_str, port_ix_name); break;
 801997e:	a806      	add	r0, sp, #24
 8019980:	4990      	ldr	r1, [pc, #576]	; (8019bc4 <MIDIMON_Print+0x2b0>)
 8019982:	e001      	b.n	8019988 <MIDIMON_Print+0x74>
    case OSC0:  sprintf(pre_str, "[%sOSC%c]", prefix_str, port_ix_name); break;
 8019984:	4990      	ldr	r1, [pc, #576]	; (8019bc8 <MIDIMON_Print+0x2b4>)
 8019986:	a806      	add	r0, sp, #24
    case SPIM0: sprintf(pre_str, "[%sSPI%c]", prefix_str, port_ix_name); break;
 8019988:	4652      	mov	r2, sl
 801998a:	e003      	b.n	8019994 <MIDIMON_Print+0x80>
    default:    sprintf(pre_str, "[%sP.%02X ]", prefix_str, port);
 801998c:	498f      	ldr	r1, [pc, #572]	; (8019bcc <MIDIMON_Print+0x2b8>)
 801998e:	a806      	add	r0, sp, #24
 8019990:	4652      	mov	r2, sl
 8019992:	4633      	mov	r3, r6
 8019994:	3e10      	subs	r6, #16
 8019996:	b2f6      	uxtb	r6, r6
 8019998:	f7fa fee6 	bl	8014768 <sprintf>
 801999c:	2e11      	cmp	r6, #17
  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Filters: %s", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Tempo Display: %s", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");

  return 0; // no error
}
 801999e:	bf98      	it	ls
 80199a0:	4b8b      	ldrls	r3, [pc, #556]	; (8019bd0 <MIDIMON_Print+0x2bc>)
    case UART1: tempo_port_ix = 3; break;
  }

  // branch depending on package type
  u8 msg_sent = 0;
  switch( package.type ) {
 80199a2:	f1ab 0202 	sub.w	r2, fp, #2
  out("MIDI Monitor: %s", MIDIMON_ActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Filters: %s", MIDIMON_FilterActiveGet() ? "enabled" : "disabled");
  out("MIDI Monitor Tempo Display: %s", MIDIMON_TempoActiveGet() ? "enabled" : "disabled");

  return 0; // no error
}
 80199a6:	bf94      	ite	ls
 80199a8:	579e      	ldrsbls	r6, [r3, r6]

/////////////////////////////////////////////////////////////////////////////
// Print the MIDI event independent from midimon_active with an optional prefix-string
/////////////////////////////////////////////////////////////////////////////
s32 MIDIMON_Print(char *prefix_str, mios32_midi_port_t port, mios32_midi_package_t package, u32 timestamp, u8 filter_sysex_message)
{
 80199aa:	f04f 36ff 	movhi.w	r6, #4294967295
    case UART1: tempo_port_ix = 3; break;
  }

  // branch depending on package type
  u8 msg_sent = 0;
  switch( package.type ) {
 80199ae:	2a0d      	cmp	r2, #13
 80199b0:	f200 8221 	bhi.w	8019df6 <MIDIMON_Print+0x4e2>
 80199b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80199b8:	004e000e 	.word	0x004e000e
 80199bc:	0076006d 	.word	0x0076006d
 80199c0:	006d00f5 	.word	0x006d00f5
 80199c4:	01550148 	.word	0x01550148
 80199c8:	01750162 	.word	0x01750162
 80199cc:	0184017d 	.word	0x0184017d
 80199d0:	00760196 	.word	0x00760196
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
 80199d4:	2df1      	cmp	r5, #241	; 0xf1
 80199d6:	d136      	bne.n	8019a46 <MIDIMON_Print+0x132>
	if( !filter_active ) {
 80199d8:	4a7e      	ldr	r2, [pc, #504]	; (8019bd4 <MIDIMON_Print+0x2c0>)
 80199da:	7810      	ldrb	r0, [r2, #0]
 80199dc:	2800      	cmp	r0, #0
 80199de:	f040 8212 	bne.w	8019e06 <MIDIMON_Print+0x4f2>
	  switch( package.evnt1 & 0xf0 ) {
 80199e2:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 80199e6:	2b30      	cmp	r3, #48	; 0x30
 80199e8:	a906      	add	r1, sp, #24
 80199ea:	d021      	beq.n	8019a30 <MIDIMON_Print+0x11c>
 80199ec:	460a      	mov	r2, r1
 80199ee:	d806      	bhi.n	80199fe <MIDIMON_Print+0xea>
 80199f0:	2b10      	cmp	r3, #16
 80199f2:	d015      	beq.n	8019a20 <MIDIMON_Print+0x10c>
 80199f4:	2b20      	cmp	r3, #32
 80199f6:	d019      	beq.n	8019a2c <MIDIMON_Print+0x118>
 80199f8:	bb03      	cbnz	r3, 8019a3c <MIDIMON_Print+0x128>
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 80199fa:	4877      	ldr	r0, [pc, #476]	; (8019bd8 <MIDIMON_Print+0x2c4>)
 80199fc:	e011      	b.n	8019a22 <MIDIMON_Print+0x10e>
  u8 msg_sent = 0;
  switch( package.type ) {
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
 80199fe:	2b50      	cmp	r3, #80	; 0x50
 8019a00:	d018      	beq.n	8019a34 <MIDIMON_Print+0x120>
 8019a02:	d803      	bhi.n	8019a0c <MIDIMON_Print+0xf8>
 8019a04:	2b40      	cmp	r3, #64	; 0x40
 8019a06:	d119      	bne.n	8019a3c <MIDIMON_Print+0x128>
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x10: MSG("%s MTC Frame   High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a08:	4874      	ldr	r0, [pc, #464]	; (8019bdc <MIDIMON_Print+0x2c8>)
 8019a0a:	e00a      	b.n	8019a22 <MIDIMON_Print+0x10e>
  u8 msg_sent = 0;
  switch( package.type ) {
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
 8019a0c:	2b60      	cmp	r3, #96	; 0x60
 8019a0e:	d013      	beq.n	8019a38 <MIDIMON_Print+0x124>
 8019a10:	2b70      	cmp	r3, #112	; 0x70
 8019a12:	d113      	bne.n	8019a3c <MIDIMON_Print+0x128>
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x50: MSG("%s MTC Minutes High: %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x60: MSG("%s MTC Hours   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x70: MSG("%s MTC Hours   High: %X (SMPTE Type: %d)\n", 
 8019a14:	4872      	ldr	r0, [pc, #456]	; (8019be0 <MIDIMON_Print+0x2cc>)
 8019a16:	f004 0201 	and.w	r2, r4, #1
 8019a1a:	f3c4 0342 	ubfx	r3, r4, #1, #3
 8019a1e:	e168      	b.n	8019cf2 <MIDIMON_Print+0x3de>
    case 0x2:  // Two-byte System Common messages like MTC, SongSelect, etc.
      if( package.evnt0 == 0xf1 ) {
	if( !filter_active ) {
	  switch( package.evnt1 & 0xf0 ) {
	    case 0x00: MSG("%s MTC Frame   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x10: MSG("%s MTC Frame   High: %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a20:	4870      	ldr	r0, [pc, #448]	; (8019be4 <MIDIMON_Print+0x2d0>)
 8019a22:	f004 020f 	and.w	r2, r4, #15
 8019a26:	f7f8 f825 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
 8019a2a:	e1ec      	b.n	8019e06 <MIDIMON_Print+0x4f2>
	    case 0x20: MSG("%s MTC Seconds Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a2c:	486e      	ldr	r0, [pc, #440]	; (8019be8 <MIDIMON_Print+0x2d4>)
 8019a2e:	e7f8      	b.n	8019a22 <MIDIMON_Print+0x10e>
	    case 0x30: MSG("%s MTC Seconds High: %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a30:	486e      	ldr	r0, [pc, #440]	; (8019bec <MIDIMON_Print+0x2d8>)
 8019a32:	e7f6      	b.n	8019a22 <MIDIMON_Print+0x10e>
	    case 0x40: MSG("%s MTC Minutes Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
	    case 0x50: MSG("%s MTC Minutes High: %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a34:	486e      	ldr	r0, [pc, #440]	; (8019bf0 <MIDIMON_Print+0x2dc>)
 8019a36:	e7f4      	b.n	8019a22 <MIDIMON_Print+0x10e>
	    case 0x60: MSG("%s MTC Hours   Low:  %X\n", pre_str, package.evnt1 & 0xf); break;
 8019a38:	486e      	ldr	r0, [pc, #440]	; (8019bf4 <MIDIMON_Print+0x2e0>)
 8019a3a:	e7f2      	b.n	8019a22 <MIDIMON_Print+0x10e>
	    case 0x70: MSG("%s MTC Hours   High: %X (SMPTE Type: %d)\n", 
			   pre_str, package.evnt1 & 0x1, (package.evnt1>>1) & 0x7); break;
	    default:
	      MSG("%s MTC Invalid: %02X %02X %02X\n", pre_str, package.evnt0, package.evnt1, package.evnt2);
 8019a3c:	4611      	mov	r1, r2
 8019a3e:	9700      	str	r7, [sp, #0]
 8019a40:	486d      	ldr	r0, [pc, #436]	; (8019bf8 <MIDIMON_Print+0x2e4>)
 8019a42:	22f1      	movs	r2, #241	; 0xf1
 8019a44:	e133      	b.n	8019cae <MIDIMON_Print+0x39a>
	  }
	}
	msg_sent = 1;
      } else if( package.evnt0 == 0xf3 ) {
 8019a46:	2df3      	cmp	r5, #243	; 0xf3
 8019a48:	f040 81d5 	bne.w	8019df6 <MIDIMON_Print+0x4e2>
	MSG("%s Song Number #%d\n", pre_str, package.evnt1);
 8019a4c:	486b      	ldr	r0, [pc, #428]	; (8019bfc <MIDIMON_Print+0x2e8>)
 8019a4e:	a906      	add	r1, sp, #24
 8019a50:	4622      	mov	r2, r4
 8019a52:	e7e8      	b.n	8019a26 <MIDIMON_Print+0x112>
	msg_sent = 1;
      }
      break;

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
 8019a54:	2df2      	cmp	r5, #242	; 0xf2
 8019a56:	f040 81ce 	bne.w	8019df6 <MIDIMON_Print+0x4e2>
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
 8019a5a:	ea44 14d7 	orr.w	r4, r4, r7, lsr #7
	u8 step = song_pos % 4;
 8019a5e:	f004 0703 	and.w	r7, r4, #3
	u8 beat = (song_pos / 4) % 4;
	u32 measure = song_pos / 16;

	MSG("%s Song Position %d.%d.%d\n", pre_str, measure+1, beat+1, step+1);
 8019a62:	1c7a      	adds	r2, r7, #1

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
	u8 step = song_pos % 4;
	u8 beat = (song_pos / 4) % 4;
 8019a64:	f3c4 0581 	ubfx	r5, r4, #2, #2
	u32 measure = song_pos / 16;
 8019a68:	0924      	lsrs	r4, r4, #4

	MSG("%s Song Position %d.%d.%d\n", pre_str, measure+1, beat+1, step+1);
 8019a6a:	9200      	str	r2, [sp, #0]
 8019a6c:	1c6b      	adds	r3, r5, #1
 8019a6e:	1c62      	adds	r2, r4, #1
 8019a70:	4863      	ldr	r0, [pc, #396]	; (8019c00 <MIDIMON_Print+0x2ec>)
 8019a72:	a906      	add	r1, sp, #24
 8019a74:	f7f7 fffe 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
	msg_sent = 1;

	if( tempo_port_ix >= 0 ) {
 8019a78:	2e00      	cmp	r6, #0
 8019a7a:	f2c0 81c4 	blt.w	8019e06 <MIDIMON_Print+0x4f2>
	  midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 8019a7e:	4861      	ldr	r0, [pc, #388]	; (8019c04 <MIDIMON_Print+0x2f0>)
 8019a80:	eb00 03c6 	add.w	r3, r0, r6, lsl #3

	  mcp->subtick = -1; // ensure that next clock starts with 0
 8019a84:	21ff      	movs	r1, #255	; 0xff
 8019a86:	7199      	strb	r1, [r3, #6]
	  mcp->step = step;
 8019a88:	715f      	strb	r7, [r3, #5]

    case 0x3:  // Three-byte System Common messages like SPP, etc.
      if( package.evnt0 == 0xf2 ) {
	u16 song_pos = package.evnt1 | (package.evnt2 >> 7);
	u8 step = song_pos % 4;
	u8 beat = (song_pos / 4) % 4;
 8019a8a:	711d      	strb	r5, [r3, #4]
	  midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];

	  mcp->subtick = -1; // ensure that next clock starts with 0
	  mcp->step = step;
	  mcp->beat = beat;
	  mcp->measure = measure;
 8019a8c:	f840 4036 	str.w	r4, [r0, r6, lsl #3]
 8019a90:	e1b9      	b.n	8019e06 <MIDIMON_Print+0x4f2>
      }
      break;

    case 0x4:  // SysEx starts or continues (3 bytes)
    case 0x7:  // SysEx ends with following three bytes
      if( !filter_sysex_message )
 8019a92:	f1b9 0f00 	cmp.w	r9, #0
 8019a96:	f040 81b6 	bne.w	8019e06 <MIDIMON_Print+0x4f2>
	MSG("%s SysEx: %02X %02X %02X\n", pre_str, package.evnt0, package.evnt1, package.evnt2);
 8019a9a:	9700      	str	r7, [sp, #0]
 8019a9c:	485a      	ldr	r0, [pc, #360]	; (8019c08 <MIDIMON_Print+0x2f4>)
 8019a9e:	a906      	add	r1, sp, #24
 8019aa0:	462a      	mov	r2, r5
 8019aa2:	e104      	b.n	8019cae <MIDIMON_Print+0x39a>
      msg_sent = 1;
      break;

    case 0x5: // Single-byte System Common Message or SysEx ends with following single bytes
    case 0xf: // Single Byte
      switch( package.evnt0 ) {
 8019aa4:	f1a5 01f6 	sub.w	r1, r5, #246	; 0xf6
 8019aa8:	2909      	cmp	r1, #9
 8019aaa:	d870      	bhi.n	8019b8e <MIDIMON_Print+0x27a>
 8019aac:	e8df f001 	tbb	[pc, r1]
 8019ab0:	4a0d0705 	.word	0x4a0d0705
 8019ab4:	615f5d4c 	.word	0x615f5d4c
 8019ab8:	6a63      	.short	0x6a63
        case 0xf6: MSG("%s Tune Request (F6)\n", pre_str); break;
 8019aba:	4854      	ldr	r0, [pc, #336]	; (8019c0c <MIDIMON_Print+0x2f8>)
 8019abc:	e063      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xf7: if( !filter_sysex_message ) { MSG("%s SysEx End (F7)\n", pre_str); } break;
 8019abe:	f1b9 0f00 	cmp.w	r9, #0
 8019ac2:	f040 81a0 	bne.w	8019e06 <MIDIMON_Print+0x4f2>
 8019ac6:	4852      	ldr	r0, [pc, #328]	; (8019c10 <MIDIMON_Print+0x2fc>)
 8019ac8:	e05d      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xf8: 
	  if( !filter_active ) {
 8019aca:	4942      	ldr	r1, [pc, #264]	; (8019bd4 <MIDIMON_Print+0x2c0>)
 8019acc:	7808      	ldrb	r0, [r1, #0]
 8019ace:	b918      	cbnz	r0, 8019ad8 <MIDIMON_Print+0x1c4>
	    MSG("%s MIDI Clock (F8)\n", pre_str);
 8019ad0:	4850      	ldr	r0, [pc, #320]	; (8019c14 <MIDIMON_Print+0x300>)
 8019ad2:	a906      	add	r1, sp, #24
 8019ad4:	f7f7 ffce 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
	  }

	  if( tempo_port_ix >= 0 ) {
 8019ad8:	2e00      	cmp	r6, #0
 8019ada:	f2c0 8194 	blt.w	8019e06 <MIDIMON_Print+0x4f2>
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 8019ade:	4f49      	ldr	r7, [pc, #292]	; (8019c04 <MIDIMON_Print+0x2f0>)
 8019ae0:	00f5      	lsls	r5, r6, #3
 8019ae2:	197c      	adds	r4, r7, r5
	    if( ++mcp->subtick >= 6 ) {
 8019ae4:	79a2      	ldrb	r2, [r4, #6]
 8019ae6:	1c53      	adds	r3, r2, #1
 8019ae8:	b2d9      	uxtb	r1, r3
 8019aea:	b248      	sxtb	r0, r1
 8019aec:	2805      	cmp	r0, #5
 8019aee:	71a1      	strb	r1, [r4, #6]
 8019af0:	dd12      	ble.n	8019b18 <MIDIMON_Print+0x204>
	      mcp->subtick = 0;
	      if( ++mcp->step >= 4 ) {
 8019af2:	7962      	ldrb	r2, [r4, #5]
 8019af4:	1c51      	adds	r1, r2, #1
 8019af6:	b2c8      	uxtb	r0, r1
	  }

	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
 8019af8:	2300      	movs	r3, #0
	      if( ++mcp->step >= 4 ) {
 8019afa:	2803      	cmp	r0, #3
	  }

	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
 8019afc:	71a3      	strb	r3, [r4, #6]
	      if( ++mcp->step >= 4 ) {
 8019afe:	7160      	strb	r0, [r4, #5]
 8019b00:	d90a      	bls.n	8019b18 <MIDIMON_Print+0x204>
		mcp->step = 0;
		if( ++mcp->beat >= 4 ) {
 8019b02:	7922      	ldrb	r2, [r4, #4]
	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    if( ++mcp->subtick >= 6 ) {
	      mcp->subtick = 0;
	      if( ++mcp->step >= 4 ) {
		mcp->step = 0;
 8019b04:	7163      	strb	r3, [r4, #5]
		if( ++mcp->beat >= 4 ) {
 8019b06:	1c51      	adds	r1, r2, #1
 8019b08:	b2c8      	uxtb	r0, r1
 8019b0a:	2803      	cmp	r0, #3
 8019b0c:	7120      	strb	r0, [r4, #4]
 8019b0e:	d903      	bls.n	8019b18 <MIDIMON_Print+0x204>
		  mcp->beat = 0;
 8019b10:	7123      	strb	r3, [r4, #4]
		  ++mcp->measure;
 8019b12:	597b      	ldr	r3, [r7, r5]
 8019b14:	1c5a      	adds	r2, r3, #1
 8019b16:	517a      	str	r2, [r7, r5]
		}
	      }
	    }

	    // for tempo measurements
	    tempo_samples[tempo_port_ix][tempo_sample_pos[tempo_port_ix]] = timestamp;
 8019b18:	4b3f      	ldr	r3, [pc, #252]	; (8019c18 <MIDIMON_Print+0x304>)
 8019b1a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8019c44 <MIDIMON_Print+0x330>
 8019b1e:	5d9a      	ldrb	r2, [r3, r6]
 8019b20:	2107      	movs	r1, #7
 8019b22:	fb01 2006 	mla	r0, r1, r6, r2
 8019b26:	9905      	ldr	r1, [sp, #20]
	    if( ++tempo_sample_pos[tempo_port_ix] >= NUM_TEMPO_SAMPLES )
 8019b28:	3201      	adds	r2, #1
		}
	      }
	    }

	    // for tempo measurements
	    tempo_samples[tempo_port_ix][tempo_sample_pos[tempo_port_ix]] = timestamp;
 8019b2a:	f84c 1020 	str.w	r1, [ip, r0, lsl #2]
	    if( ++tempo_sample_pos[tempo_port_ix] >= NUM_TEMPO_SAMPLES )
 8019b2e:	b2d0      	uxtb	r0, r2
 8019b30:	2806      	cmp	r0, #6
	      tempo_sample_pos[tempo_port_ix] = 0;
 8019b32:	bf88      	it	hi
 8019b34:	2000      	movhi	r0, #0
 8019b36:	5598      	strb	r0, [r3, r6]
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
	pre_str, package.type, package.evnt0, package.evnt1, package.evnt2);
  }

  if( display_midi_clk && tempo_active && tempo_port_ix >= 0 ) {
 8019b38:	f994 3006 	ldrsb.w	r3, [r4, #6]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	f000 80db 	beq.w	8019cf8 <MIDIMON_Print+0x3e4>
 8019b42:	e160      	b.n	8019e06 <MIDIMON_Print+0x4f2>
	      display_midi_clk = 1;
	  }

	  break;

        case 0xf9: MSG("%s MIDI Tick (F9)\n", pre_str); break;
 8019b44:	4835      	ldr	r0, [pc, #212]	; (8019c1c <MIDIMON_Print+0x308>)
 8019b46:	e01e      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xfa:
	  MSG("%s MIDI Clock Start (FA)\n", pre_str);
 8019b48:	4835      	ldr	r0, [pc, #212]	; (8019c20 <MIDIMON_Print+0x30c>)
 8019b4a:	a906      	add	r1, sp, #24
 8019b4c:	f7f7 ff92 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
	  if( tempo_port_ix >= 0 ) {
 8019b50:	2e00      	cmp	r6, #0
 8019b52:	f2c0 8158 	blt.w	8019e06 <MIDIMON_Print+0x4f2>
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
 8019b56:	492b      	ldr	r1, [pc, #172]	; (8019c04 <MIDIMON_Print+0x2f0>)
 8019b58:	eb01 00c6 	add.w	r0, r1, r6, lsl #3
	    mcp->ALL = 0;
 8019b5c:	2200      	movs	r2, #0
	    mcp->subtick = -1; // ensure that next clock starts with 0
 8019b5e:	23ff      	movs	r3, #255	; 0xff
        case 0xf9: MSG("%s MIDI Tick (F9)\n", pre_str); break;
        case 0xfa:
	  MSG("%s MIDI Clock Start (FA)\n", pre_str);
	  if( tempo_port_ix >= 0 ) {
	    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];
	    mcp->ALL = 0;
 8019b60:	f841 2036 	str.w	r2, [r1, r6, lsl #3]
 8019b64:	6042      	str	r2, [r0, #4]
	    mcp->subtick = -1; // ensure that next clock starts with 0
 8019b66:	7183      	strb	r3, [r0, #6]
 8019b68:	e14d      	b.n	8019e06 <MIDIMON_Print+0x4f2>
	  }
	  break;
        case 0xfb: MSG("%s MIDI Clock Continue (FB)\n", pre_str); break;
 8019b6a:	482e      	ldr	r0, [pc, #184]	; (8019c24 <MIDIMON_Print+0x310>)
 8019b6c:	e00b      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xfc: MSG("%s MIDI Clock Stop (FC)\n", pre_str); break;
 8019b6e:	482e      	ldr	r0, [pc, #184]	; (8019c28 <MIDIMON_Print+0x314>)
 8019b70:	e009      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xfd: MSG("%s Inspecified Realtime Event (FD)\n", pre_str); break;
 8019b72:	482e      	ldr	r0, [pc, #184]	; (8019c2c <MIDIMON_Print+0x318>)
 8019b74:	e007      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xfe: if( !filter_active ) { MSG("%s Active Sense (FE)\n", pre_str); } break;
 8019b76:	4817      	ldr	r0, [pc, #92]	; (8019bd4 <MIDIMON_Print+0x2c0>)
 8019b78:	7803      	ldrb	r3, [r0, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	f040 8143 	bne.w	8019e06 <MIDIMON_Print+0x4f2>
 8019b80:	482b      	ldr	r0, [pc, #172]	; (8019c30 <MIDIMON_Print+0x31c>)
 8019b82:	e000      	b.n	8019b86 <MIDIMON_Print+0x272>
        case 0xff: MSG("%s Reset (FF)\n", pre_str); break;
 8019b84:	482b      	ldr	r0, [pc, #172]	; (8019c34 <MIDIMON_Print+0x320>)
 8019b86:	a906      	add	r1, sp, #24
 8019b88:	f7f7 ff74 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
 8019b8c:	e13b      	b.n	8019e06 <MIDIMON_Print+0x4f2>
        default:
	  if( package.type == 0xf )
 8019b8e:	f008 080f 	and.w	r8, r8, #15
 8019b92:	f1b8 0f0f 	cmp.w	r8, #15
	    MSG("%s Single-Byte Package: %02X\n", pre_str, package.evnt0);
 8019b96:	bf0c      	ite	eq
 8019b98:	4827      	ldreq	r0, [pc, #156]	; (8019c38 <MIDIMON_Print+0x324>)
	  else
	    MSG("%s Invalid SysEx Single-Byte Event (%02X)\n", pre_str, package.evnt0);
 8019b9a:	4828      	ldrne	r0, [pc, #160]	; (8019c3c <MIDIMON_Print+0x328>)
 8019b9c:	a906      	add	r1, sp, #24
 8019b9e:	462a      	mov	r2, r5
 8019ba0:	e741      	b.n	8019a26 <MIDIMON_Print+0x112>
      }
      msg_sent = 1;
      break;

    case 0x6:  // SysEx ends with following two bytes
      if( !filter_sysex_message )
 8019ba2:	f1b9 0f00 	cmp.w	r9, #0
 8019ba6:	f040 812e 	bne.w	8019e06 <MIDIMON_Print+0x4f2>
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
 8019baa:	4825      	ldr	r0, [pc, #148]	; (8019c40 <MIDIMON_Print+0x32c>)
 8019bac:	a906      	add	r1, sp, #24
 8019bae:	462a      	mov	r2, r5
 8019bb0:	e084      	b.n	8019cbc <MIDIMON_Print+0x3a8>
 8019bb2:	bf00      	nop
 8019bb4:	0801be10 	.word	0x0801be10
 8019bb8:	0801be5e 	.word	0x0801be5e
 8019bbc:	0801be7c 	.word	0x0801be7c
 8019bc0:	0801be54 	.word	0x0801be54
 8019bc4:	0801be68 	.word	0x0801be68
 8019bc8:	0801be72 	.word	0x0801be72
 8019bcc:	0801be86 	.word	0x0801be86
 8019bd0:	0801c47b 	.word	0x0801c47b
 8019bd4:	2000005d 	.word	0x2000005d
 8019bd8:	0801be92 	.word	0x0801be92
 8019bdc:	0801bef6 	.word	0x0801bef6
 8019be0:	0801bf41 	.word	0x0801bf41
 8019be4:	0801beab 	.word	0x0801beab
 8019be8:	0801bec4 	.word	0x0801bec4
 8019bec:	0801bedd 	.word	0x0801bedd
 8019bf0:	0801bf0f 	.word	0x0801bf0f
 8019bf4:	0801bf28 	.word	0x0801bf28
 8019bf8:	0801bf6b 	.word	0x0801bf6b
 8019bfc:	0801bf8b 	.word	0x0801bf8b
 8019c00:	0801bf9f 	.word	0x0801bf9f
 8019c04:	20000650 	.word	0x20000650
 8019c08:	0801bfba 	.word	0x0801bfba
 8019c0c:	0801bfd4 	.word	0x0801bfd4
 8019c10:	0801bfea 	.word	0x0801bfea
 8019c14:	0801bffd 	.word	0x0801bffd
 8019c18:	20000648 	.word	0x20000648
 8019c1c:	0801c011 	.word	0x0801c011
 8019c20:	0801c024 	.word	0x0801c024
 8019c24:	0801c03e 	.word	0x0801c03e
 8019c28:	0801c05b 	.word	0x0801c05b
 8019c2c:	0801c074 	.word	0x0801c074
 8019c30:	0801c098 	.word	0x0801c098
 8019c34:	0801c0ae 	.word	0x0801c0ae
 8019c38:	0801c0bd 	.word	0x0801c0bd
 8019c3c:	0801c0db 	.word	0x0801c0db
 8019c40:	0801c106 	.word	0x0801c106
 8019c44:	20000670 	.word	0x20000670
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c48:	230c      	movs	r3, #12
 8019c4a:	fbb4 f2f3 	udiv	r2, r4, r3
 8019c4e:	fb03 4412 	mls	r4, r3, r2, r4
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
 8019c52:	1e91      	subs	r1, r2, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c54:	f005 050f 	and.w	r5, r5, #15
 8019c58:	b2e3      	uxtb	r3, r4
	MSG("%s SysEx: %02X %02X\n", pre_str, package.evnt0, package.evnt1);
      msg_sent = 1;
      break;

    case 0x8: // Note Off
      MSG("%s Chn%2d  Note Off %s%d  V:%3d\n",
 8019c5a:	e88d 0082 	stmia.w	sp, {r1, r7}
 8019c5e:	486c      	ldr	r0, [pc, #432]	; (8019e10 <MIDIMON_Print+0x4fc>)
 8019c60:	e018      	b.n	8019c94 <MIDIMON_Print+0x380>
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c62:	220c      	movs	r2, #12
 8019c64:	fbb4 f0f2 	udiv	r0, r4, r2
 8019c68:	fb02 4110 	mls	r1, r2, r0, r4
 8019c6c:	b2cb      	uxtb	r3, r1
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
 8019c6e:	1e81      	subs	r1, r0, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c70:	f005 050f 	and.w	r5, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0x9: // Note On
      MSG("%s Chn%2d  Note On  %s%d  V:%3d\n",
 8019c74:	e88d 0082 	stmia.w	sp, {r1, r7}
 8019c78:	4866      	ldr	r0, [pc, #408]	; (8019e14 <MIDIMON_Print+0x500>)
 8019c7a:	e00b      	b.n	8019c94 <MIDIMON_Print+0x380>
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c7c:	200c      	movs	r0, #12
 8019c7e:	fbb4 f1f0 	udiv	r1, r4, r0
 8019c82:	fb00 4411 	mls	r4, r0, r1, r4
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
 8019c86:	3902      	subs	r1, #2
 8019c88:	e88d 0082 	stmia.w	sp, {r1, r7}
 8019c8c:	4862      	ldr	r0, [pc, #392]	; (8019e18 <MIDIMON_Print+0x504>)
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
 8019c8e:	f005 050f 	and.w	r5, r5, #15
 8019c92:	b2e3      	uxtb	r3, r4
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xa: // Poly Aftertouch
      MSG("%s Chn%2d  Poly Aftertouch %s%d  V:%3d\n",
 8019c94:	1c6a      	adds	r2, r5, #1
 8019c96:	4d61      	ldr	r5, [pc, #388]	; (8019e1c <MIDIMON_Print+0x508>)
 8019c98:	2403      	movs	r4, #3
 8019c9a:	a906      	add	r1, sp, #24
 8019c9c:	fb04 5303 	mla	r3, r4, r3, r5
 8019ca0:	e0af      	b.n	8019e02 <MIDIMON_Print+0x4ee>
      msg_sent = 1;
      break;
      
    case 0xb: // CC
      MSG("%s Chn%2d  CC#%3d  V:%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1, package.evnt2);
 8019ca2:	f005 020f 	and.w	r2, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xb: // CC
      MSG("%s Chn%2d  CC#%3d  V:%3d\n",
 8019ca6:	485e      	ldr	r0, [pc, #376]	; (8019e20 <MIDIMON_Print+0x50c>)
 8019ca8:	9700      	str	r7, [sp, #0]
 8019caa:	a906      	add	r1, sp, #24
 8019cac:	3201      	adds	r2, #1
 8019cae:	4623      	mov	r3, r4
 8019cb0:	e061      	b.n	8019d76 <MIDIMON_Print+0x462>
      msg_sent = 1;
      break;
      
    case 0xc: // Program Change
      MSG("%s Chn%2d  Program Change #%3d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
 8019cb2:	f005 030f 	and.w	r3, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1, package.evnt2);
      msg_sent = 1;
      break;
      
    case 0xc: // Program Change
      MSG("%s Chn%2d  Program Change #%3d\n",
 8019cb6:	485b      	ldr	r0, [pc, #364]	; (8019e24 <MIDIMON_Print+0x510>)
 8019cb8:	a906      	add	r1, sp, #24
 8019cba:	1c5a      	adds	r2, r3, #1
 8019cbc:	4623      	mov	r3, r4
 8019cbe:	e018      	b.n	8019cf2 <MIDIMON_Print+0x3de>
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 8019cc0:	200c      	movs	r0, #12
 8019cc2:	fbb4 f1f0 	udiv	r1, r4, r0
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 8019cc6:	1e8a      	subs	r2, r1, #2
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 8019cc8:	f005 050f 	and.w	r5, r5, #15
 8019ccc:	fb00 4411 	mls	r4, r0, r1, r4
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 8019cd0:	9200      	str	r2, [sp, #0]
 8019cd2:	1c6a      	adds	r2, r5, #1
 8019cd4:	4d51      	ldr	r5, [pc, #324]	; (8019e1c <MIDIMON_Print+0x508>)
 8019cd6:	4854      	ldr	r0, [pc, #336]	; (8019e28 <MIDIMON_Print+0x514>)
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
 8019cd8:	b2e3      	uxtb	r3, r4
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1);
      msg_sent = 1;
      break;
      
    case 0xd: // Channel Aftertouch
      MSG("%s Chn%2d  Channel Aftertouch %s%d\n",
 8019cda:	2403      	movs	r4, #3
 8019cdc:	a906      	add	r1, sp, #24
 8019cde:	fb04 5303 	mla	r3, r4, r3, r5
 8019ce2:	e048      	b.n	8019d76 <MIDIMON_Print+0x462>
      msg_sent = 1;
      break;

    case 0xe: // PitchBend
      MSG("%s Chn%2d  PitchBend %5d\n",
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1 | ((u16)package.evnt2 << 7));
 8019ce4:	f005 030f 	and.w	r3, r5, #15
	  pre_str, (package.evnt0 & 0xf)+1, note_name[package.evnt1%12], (int)(package.evnt1/12)-2);
      msg_sent = 1;
      break;

    case 0xe: // PitchBend
      MSG("%s Chn%2d  PitchBend %5d\n",
 8019ce8:	4850      	ldr	r0, [pc, #320]	; (8019e2c <MIDIMON_Print+0x518>)
 8019cea:	1c5a      	adds	r2, r3, #1
 8019cec:	a906      	add	r1, sp, #24
 8019cee:	ea44 13c7 	orr.w	r3, r4, r7, lsl #7
 8019cf2:	f7f7 febf 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
	  pre_str, (package.evnt0 & 0xf)+1, package.evnt1 | ((u16)package.evnt2 << 7));
      msg_sent = 1;
      break;
 8019cf6:	e086      	b.n	8019e06 <MIDIMON_Print+0x4f2>
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
	pre_str, package.type, package.evnt0, package.evnt1, package.evnt2);
  }

  if( display_midi_clk && tempo_active && tempo_port_ix >= 0 ) {
 8019cf8:	494d      	ldr	r1, [pc, #308]	; (8019e30 <MIDIMON_Print+0x51c>)
 8019cfa:	780a      	ldrb	r2, [r1, #0]
 8019cfc:	2a00      	cmp	r2, #0
 8019cfe:	f000 8082 	beq.w	8019e06 <MIDIMON_Print+0x4f2>
    // calculate tempo based on last samples
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
 8019d02:	484c      	ldr	r0, [pc, #304]	; (8019e34 <MIDIMON_Print+0x520>)
 8019d04:	5d82      	ldrb	r2, [r0, r6]
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];
 8019d06:	2107      	movs	r1, #7
 8019d08:	fb01 2006 	mla	r0, r1, r6, r2
 8019d0c:	494a      	ldr	r1, [pc, #296]	; (8019e38 <MIDIMON_Print+0x524>)

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
 8019d0e:	4698      	mov	r8, r3
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];
 8019d10:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8019d14:	f04f 0e06 	mov.w	lr, #6

    u32 filter_value = 0;
    int weight = 100;
 8019d18:	2364      	movs	r3, #100	; 0x64
    int valid = 1;

    int pos = tempo_sample_pos[tempo_port_ix];
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
 8019d1a:	4640      	mov	r0, r8
    midi_clk_pos_t *mcp = (midi_clk_pos_t *)&midi_clk_pos[tempo_port_ix];

    // calculate tempo based on last samples
    // last samples have higher weight (FIT algorithm)
    int i;
    int valid = 1;
 8019d1c:	2101      	movs	r1, #1

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
      if( ++pos >= NUM_TEMPO_SAMPLES )
 8019d1e:	3201      	adds	r2, #1
	pos = 0;      
 8019d20:	2a06      	cmp	r2, #6
 8019d22:	bfc8      	it	gt
 8019d24:	2200      	movgt	r2, #0

      u32 delta = tempo_samples[tempo_port_ix][pos] - sample_timestamp;
 8019d26:	f04f 0a07 	mov.w	sl, #7
 8019d2a:	fb0a 2a06 	mla	sl, sl, r6, r2
 8019d2e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019e38 <MIDIMON_Print+0x524>
 8019d32:	f859 902a 	ldr.w	r9, [r9, sl, lsl #2]
 8019d36:	ebcc 0c09 	rsb	ip, ip, r9
#endif

      // more than 1000 mS between two ticks would result into 2.5 BPM
      // we assume that measuring results are invalid!
      if( delta >= 1000 )
	valid = 0;
 8019d3a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8019d3e:	bf28      	it	cs
 8019d40:	2100      	movcs	r1, #0

      filter_value += weight * delta;
 8019d42:	fb03 000c 	mla	r0, r3, ip, r0
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
 8019d46:	f04f 0c64 	mov.w	ip, #100	; 0x64
      // we assume that measuring results are invalid!
      if( delta >= 1000 )
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
 8019d4a:	4498      	add	r8, r3
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
 8019d4c:	f1be 0e01 	subs.w	lr, lr, #1
      if( delta >= 1000 )
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
 8019d50:	fb0c f303 	mul.w	r3, ip, r3
 8019d54:	f04f 0c6e 	mov.w	ip, #110	; 0x6e
 8019d58:	fb93 f3fc 	sdiv	r3, r3, ip
    u32 sample_timestamp = tempo_samples[tempo_port_ix][pos];

    u32 filter_value = 0;
    int weight = 100;
    int divisor = 0;
    for(i=0; i<(NUM_TEMPO_SAMPLES-1); ++i) {
 8019d5c:	d001      	beq.n	8019d62 <MIDIMON_Print+0x44e>
	valid = 0;

      filter_value += weight * delta;
      divisor += weight;
      weight = (weight*100) / 110; // if divided by 100, we will get an unweighted mean value
      sample_timestamp = tempo_samples[tempo_port_ix][pos];
 8019d5e:	46cc      	mov	ip, r9
 8019d60:	e7dd      	b.n	8019d1e <MIDIMON_Print+0x40a>
    }

    if( !valid ) {
 8019d62:	b959      	cbnz	r1, 8019d7c <MIDIMON_Print+0x468>
      MSG("%s MIDI Clock: %3d.%d.%d  (???.? BPM)\n", 
 8019d64:	7961      	ldrb	r1, [r4, #5]
 8019d66:	597a      	ldr	r2, [r7, r5]
 8019d68:	7923      	ldrb	r3, [r4, #4]
 8019d6a:	1c48      	adds	r0, r1, #1
 8019d6c:	9000      	str	r0, [sp, #0]
 8019d6e:	4833      	ldr	r0, [pc, #204]	; (8019e3c <MIDIMON_Print+0x528>)
 8019d70:	a906      	add	r1, sp, #24
 8019d72:	3201      	adds	r2, #1
 8019d74:	3301      	adds	r3, #1
 8019d76:	f7f7 fe7d 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
 8019d7a:	e044      	b.n	8019e06 <MIDIMON_Print+0x4f2>
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1);
    } else {
      float mean_value = (float)filter_value / (float)divisor;
 8019d7c:	f001 f88e 	bl	801ae9c <__aeabi_ui2f>
 8019d80:	4606      	mov	r6, r0
 8019d82:	4640      	mov	r0, r8
 8019d84:	f001 f88e 	bl	801aea4 <__aeabi_i2f>
 8019d88:	4601      	mov	r1, r0
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f001 f992 	bl	801b0b4 <__aeabi_fdiv>
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);
 8019d90:	f000 fcf0 	bl	801a774 <__aeabi_f2d>
 8019d94:	2200      	movs	r2, #0
 8019d96:	4b2a      	ldr	r3, [pc, #168]	; (8019e40 <MIDIMON_Print+0x52c>)
 8019d98:	f000 fe6a 	bl	801aa70 <__aeabi_ddiv>
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	4b29      	ldr	r3, [pc, #164]	; (8019e44 <MIDIMON_Print+0x530>)
 8019da0:	f000 fd3c 	bl	801a81c <__aeabi_dmul>
 8019da4:	4602      	mov	r2, r0
 8019da6:	460b      	mov	r3, r1
 8019da8:	2000      	movs	r0, #0
 8019daa:	4927      	ldr	r1, [pc, #156]	; (8019e48 <MIDIMON_Print+0x534>)
 8019dac:	f000 fe60 	bl	801aa70 <__aeabi_ddiv>
 8019db0:	f000 ff6e 	bl	801ac90 <__aeabi_d2f>

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 8019db4:	7962      	ldrb	r2, [r4, #5]
 8019db6:	7921      	ldrb	r1, [r4, #4]
 8019db8:	597d      	ldr	r5, [r7, r5]
 8019dba:	1c53      	adds	r3, r2, #1
 8019dbc:	9300      	str	r3, [sp, #0]
      MSG("%s MIDI Clock: %3d.%d.%d  (???.? BPM)\n", 
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1);
    } else {
      float mean_value = (float)filter_value / (float)divisor;
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);
 8019dbe:	4680      	mov	r8, r0

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 8019dc0:	1c6e      	adds	r6, r5, #1
 8019dc2:	1c4d      	adds	r5, r1, #1
 8019dc4:	f001 fa12 	bl	801b1ec <__aeabi_f2iz>
 8019dc8:	9001      	str	r0, [sp, #4]
	  pre_str,
	  mcp->measure+1, mcp->beat+1, mcp->step+1,
	  (int)bpm, (int)(10.0*bpm) % 10);
 8019dca:	4640      	mov	r0, r8
 8019dcc:	f000 fcd2 	bl	801a774 <__aeabi_f2d>
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	4b1e      	ldr	r3, [pc, #120]	; (8019e4c <MIDIMON_Print+0x538>)
 8019dd4:	f000 fd22 	bl	801a81c <__aeabi_dmul>
 8019dd8:	f000 ff32 	bl	801ac40 <__aeabi_d2iz>
    } else {
      float mean_value = (float)filter_value / (float)divisor;
      float bpm = 60.0 / ((mean_value/1000.0) * 24.0);

      // print MIDI Clock position and tempo
      MSG("%s MIDI Clock: %3d.%d.%d  (%3d.%d BPM)\n", 
 8019ddc:	210a      	movs	r1, #10
 8019dde:	fb90 f2f1 	sdiv	r2, r0, r1
 8019de2:	fb02 0011 	mls	r0, r2, r1, r0
 8019de6:	9002      	str	r0, [sp, #8]
 8019de8:	a906      	add	r1, sp, #24
 8019dea:	4632      	mov	r2, r6
 8019dec:	462b      	mov	r3, r5
 8019dee:	4818      	ldr	r0, [pc, #96]	; (8019e50 <MIDIMON_Print+0x53c>)
 8019df0:	f7f7 fe40 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
 8019df4:	e007      	b.n	8019e06 <MIDIMON_Print+0x4f2>
      break;
  }

  // unspecified or invalid packages
  if( !msg_sent ) {
    MSG("%s Invalid Package (Type %d: %02X %02X %02X)\n",
 8019df6:	e88d 0090 	stmia.w	sp, {r4, r7}
 8019dfa:	4816      	ldr	r0, [pc, #88]	; (8019e54 <MIDIMON_Print+0x540>)
 8019dfc:	a906      	add	r1, sp, #24
 8019dfe:	465a      	mov	r2, fp
 8019e00:	462b      	mov	r3, r5
 8019e02:	f7f7 fe37 	bl	8011a74 <MIOS32_MIDI_SendDebugMessage>
	  (int)bpm, (int)(10.0*bpm) % 10);
    }
  }

  return 0; // no error
}
 8019e06:	2000      	movs	r0, #0
 8019e08:	b017      	add	sp, #92	; 0x5c
 8019e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0e:	bf00      	nop
 8019e10:	0801c11b 	.word	0x0801c11b
 8019e14:	0801c13c 	.word	0x0801c13c
 8019e18:	0801c15d 	.word	0x0801c15d
 8019e1c:	0801c457 	.word	0x0801c457
 8019e20:	0801c185 	.word	0x0801c185
 8019e24:	0801c19f 	.word	0x0801c19f
 8019e28:	0801c1bf 	.word	0x0801c1bf
 8019e2c:	0801c1e3 	.word	0x0801c1e3
 8019e30:	200006e0 	.word	0x200006e0
 8019e34:	20000648 	.word	0x20000648
 8019e38:	20000670 	.word	0x20000670
 8019e3c:	0801c1fd 	.word	0x0801c1fd
 8019e40:	408f4000 	.word	0x408f4000
 8019e44:	40380000 	.word	0x40380000
 8019e48:	404e0000 	.word	0x404e0000
 8019e4c:	40240000 	.word	0x40240000
 8019e50:	0801c224 	.word	0x0801c224
 8019e54:	0801c24c 	.word	0x0801c24c

08019e58 <wavupa>:
 8019e58:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8019e5c:	b084      	sub	sp, #16
 8019e5e:	f8df 0608 	ldr.w	r0, [pc, #1544]	; 801a468 <wavupaend+0x2>
 8019e62:	2100      	movs	r1, #0
 8019e64:	2200      	movs	r2, #0
 8019e66:	2300      	movs	r3, #0
 8019e68:	2400      	movs	r4, #0
 8019e6a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
 8019e6c:	c01e      	stmia	r0!, {r1, r2, r3, r4}
 8019e6e:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 801a46c <wavupaend+0x6>
 8019e72:	f45f 0c80 	movs.w	ip, #4194304	; 0x400000

08019e76 <wa17>:
 8019e76:	7883      	ldrb	r3, [r0, #2]
 8019e78:	221e      	movs	r2, #30
 8019e7a:	f8df 15f4 	ldr.w	r1, [pc, #1524]	; 801a470 <wavupaend+0xa>
 8019e7e:	fb02 1103 	mla	r1, r2, r3, r1
 8019e82:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8019e84:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8019e86:	f8b0 800a 	ldrh.w	r8, [r0, #10]
 8019e8a:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 8019e8e:	f8b0 a00e 	ldrh.w	sl, [r0, #14]
 8019e92:	f8df b5e0 	ldr.w	fp, [pc, #1504]	; 801a474 <wavupaend+0xe>
 8019e96:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
 8019e98:	f891 e00d 	ldrb.w	lr, [r1, #13]
 8019e9c:	f1be 0f01 	cmp.w	lr, #1
 8019ea0:	f300 8073 	bgt.w	8019f8a <wa0>
 8019ea4:	19d2      	adds	r2, r2, r7
 8019ea6:	0c13      	lsrs	r3, r2, #16
 8019ea8:	eba8 0403 	sub.w	r4, r8, r3
 8019eac:	fb04 f40a 	mul.w	r4, r4, sl
 8019eb0:	fb03 f509 	mul.w	r5, r3, r9
 8019eb4:	4564      	cmp	r4, ip
 8019eb6:	bfa8      	it	ge
 8019eb8:	462c      	movge	r4, r5
 8019eba:	eb14 0f0c 	cmn.w	r4, ip
 8019ebe:	bfd8      	it	le
 8019ec0:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019ec4:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019ec8:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019ecc:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019ed0:	b223      	sxth	r3, r4
 8019ed2:	436c      	muls	r4, r5
 8019ed4:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 8019ed8:	4374      	muls	r4, r6
 8019eda:	9400      	str	r4, [sp, #0]
 8019edc:	19d2      	adds	r2, r2, r7
 8019ede:	0c13      	lsrs	r3, r2, #16
 8019ee0:	eba8 0403 	sub.w	r4, r8, r3
 8019ee4:	fb04 f40a 	mul.w	r4, r4, sl
 8019ee8:	fb03 f509 	mul.w	r5, r3, r9
 8019eec:	4564      	cmp	r4, ip
 8019eee:	bfa8      	it	ge
 8019ef0:	462c      	movge	r4, r5
 8019ef2:	eb14 0f0c 	cmn.w	r4, ip
 8019ef6:	bfd8      	it	le
 8019ef8:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019efc:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019f00:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019f04:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019f08:	b223      	sxth	r3, r4
 8019f0a:	436c      	muls	r4, r5
 8019f0c:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 8019f10:	4374      	muls	r4, r6
 8019f12:	9401      	str	r4, [sp, #4]
 8019f14:	19d2      	adds	r2, r2, r7
 8019f16:	0c13      	lsrs	r3, r2, #16
 8019f18:	eba8 0403 	sub.w	r4, r8, r3
 8019f1c:	fb04 f40a 	mul.w	r4, r4, sl
 8019f20:	fb03 f509 	mul.w	r5, r3, r9
 8019f24:	4564      	cmp	r4, ip
 8019f26:	bfa8      	it	ge
 8019f28:	462c      	movge	r4, r5
 8019f2a:	eb14 0f0c 	cmn.w	r4, ip
 8019f2e:	bfd8      	it	le
 8019f30:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019f34:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019f38:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019f3c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019f40:	b223      	sxth	r3, r4
 8019f42:	436c      	muls	r4, r5
 8019f44:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 8019f48:	4374      	muls	r4, r6
 8019f4a:	9402      	str	r4, [sp, #8]
 8019f4c:	19d2      	adds	r2, r2, r7
 8019f4e:	0c13      	lsrs	r3, r2, #16
 8019f50:	eba8 0403 	sub.w	r4, r8, r3
 8019f54:	fb04 f40a 	mul.w	r4, r4, sl
 8019f58:	fb03 f509 	mul.w	r5, r3, r9
 8019f5c:	4564      	cmp	r4, ip
 8019f5e:	bfa8      	it	ge
 8019f60:	462c      	movge	r4, r5
 8019f62:	eb14 0f0c 	cmn.w	r4, ip
 8019f66:	bfd8      	it	le
 8019f68:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019f6c:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019f70:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019f74:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019f78:	b223      	sxth	r3, r4
 8019f7a:	436c      	muls	r4, r5
 8019f7c:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 8019f80:	fb04 f306 	mul.w	r3, r4, r6
 8019f84:	9303      	str	r3, [sp, #12]
 8019f86:	f000 b87b 	b.w	801a080 <wa1>

08019f8a <wa0>:
 8019f8a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8019f8c:	19d2      	adds	r2, r2, r7
 8019f8e:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 8019f92:	0c1b      	lsrs	r3, r3, #16
 8019f94:	eba8 0403 	sub.w	r4, r8, r3
 8019f98:	fb04 f40a 	mul.w	r4, r4, sl
 8019f9c:	fb03 f509 	mul.w	r5, r3, r9
 8019fa0:	4564      	cmp	r4, ip
 8019fa2:	bfa8      	it	ge
 8019fa4:	462c      	movge	r4, r5
 8019fa6:	eb14 0f0c 	cmn.w	r4, ip
 8019faa:	bfd8      	it	le
 8019fac:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019fb0:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019fb4:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019fb8:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019fbc:	b223      	sxth	r3, r4
 8019fbe:	436c      	muls	r4, r5
 8019fc0:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 8019fc4:	4374      	muls	r4, r6
 8019fc6:	9400      	str	r4, [sp, #0]
 8019fc8:	19d2      	adds	r2, r2, r7
 8019fca:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 8019fce:	0c1b      	lsrs	r3, r3, #16
 8019fd0:	eba8 0403 	sub.w	r4, r8, r3
 8019fd4:	fb04 f40a 	mul.w	r4, r4, sl
 8019fd8:	fb03 f509 	mul.w	r5, r3, r9
 8019fdc:	4564      	cmp	r4, ip
 8019fde:	bfa8      	it	ge
 8019fe0:	462c      	movge	r4, r5
 8019fe2:	eb14 0f0c 	cmn.w	r4, ip
 8019fe6:	bfd8      	it	le
 8019fe8:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 8019fec:	f3c4 2585 	ubfx	r5, r4, #10, #6
 8019ff0:	f324 4406 	ssat	r4, #6, r4, asr #16
 8019ff4:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8019ff8:	b223      	sxth	r3, r4
 8019ffa:	436c      	muls	r4, r5
 8019ffc:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a000:	4374      	muls	r4, r6
 801a002:	9401      	str	r4, [sp, #4]
 801a004:	19d2      	adds	r2, r2, r7
 801a006:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 801a00a:	0c1b      	lsrs	r3, r3, #16
 801a00c:	eba8 0403 	sub.w	r4, r8, r3
 801a010:	fb04 f40a 	mul.w	r4, r4, sl
 801a014:	fb03 f509 	mul.w	r5, r3, r9
 801a018:	4564      	cmp	r4, ip
 801a01a:	bfa8      	it	ge
 801a01c:	462c      	movge	r4, r5
 801a01e:	eb14 0f0c 	cmn.w	r4, ip
 801a022:	bfd8      	it	le
 801a024:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a028:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a02c:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a030:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a034:	b223      	sxth	r3, r4
 801a036:	436c      	muls	r4, r5
 801a038:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a03c:	4374      	muls	r4, r6
 801a03e:	9402      	str	r4, [sp, #8]
 801a040:	19d2      	adds	r2, r2, r7
 801a042:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 801a046:	0c1b      	lsrs	r3, r3, #16
 801a048:	eba8 0403 	sub.w	r4, r8, r3
 801a04c:	fb04 f40a 	mul.w	r4, r4, sl
 801a050:	fb03 f509 	mul.w	r5, r3, r9
 801a054:	4564      	cmp	r4, ip
 801a056:	bfa8      	it	ge
 801a058:	462c      	movge	r4, r5
 801a05a:	eb14 0f0c 	cmn.w	r4, ip
 801a05e:	bfd8      	it	le
 801a060:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a064:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a068:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a06c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a070:	b223      	sxth	r3, r4
 801a072:	436c      	muls	r4, r5
 801a074:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a078:	fb04 f306 	mul.w	r3, r4, r6
 801a07c:	9303      	str	r3, [sp, #12]
 801a07e:	63c3      	str	r3, [r0, #60]	; 0x3c

0801a080 <wa1>:
 801a080:	6302      	str	r2, [r0, #48]	; 0x30
 801a082:	8d06      	ldrh	r6, [r0, #40]	; 0x28
 801a084:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a086:	4063      	eors	r3, r4
 801a088:	bf48      	it	mi
 801a08a:	8546      	strhmi	r6, [r0, #42]	; 0x2a
 801a08c:	64c4      	str	r4, [r0, #76]	; 0x4c
 801a08e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801a090:	6b47      	ldr	r7, [r0, #52]	; 0x34
 801a092:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801a096:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 801a09a:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 801a09e:	f1be 0f00 	cmp.w	lr, #0
 801a0a2:	f300 8079 	bgt.w	801a198 <wa2>
 801a0a6:	19d2      	adds	r2, r2, r7
 801a0a8:	0c13      	lsrs	r3, r2, #16
 801a0aa:	eba8 0403 	sub.w	r4, r8, r3
 801a0ae:	fb04 f40a 	mul.w	r4, r4, sl
 801a0b2:	fb03 f509 	mul.w	r5, r3, r9
 801a0b6:	4564      	cmp	r4, ip
 801a0b8:	bfa8      	it	ge
 801a0ba:	462c      	movge	r4, r5
 801a0bc:	eb14 0f0c 	cmn.w	r4, ip
 801a0c0:	bfd8      	it	le
 801a0c2:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a0c6:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a0ca:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a0ce:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a0d2:	b223      	sxth	r3, r4
 801a0d4:	436c      	muls	r4, r5
 801a0d6:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a0da:	9b00      	ldr	r3, [sp, #0]
 801a0dc:	eb04 34a3 	add.w	r4, r4, r3, asr #14
 801a0e0:	9400      	str	r4, [sp, #0]
 801a0e2:	19d2      	adds	r2, r2, r7
 801a0e4:	0c13      	lsrs	r3, r2, #16
 801a0e6:	eba8 0403 	sub.w	r4, r8, r3
 801a0ea:	fb04 f40a 	mul.w	r4, r4, sl
 801a0ee:	fb03 f509 	mul.w	r5, r3, r9
 801a0f2:	4564      	cmp	r4, ip
 801a0f4:	bfa8      	it	ge
 801a0f6:	462c      	movge	r4, r5
 801a0f8:	eb14 0f0c 	cmn.w	r4, ip
 801a0fc:	bfd8      	it	le
 801a0fe:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a102:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a106:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a10a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a10e:	b223      	sxth	r3, r4
 801a110:	436c      	muls	r4, r5
 801a112:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a116:	9b01      	ldr	r3, [sp, #4]
 801a118:	eb04 34a3 	add.w	r4, r4, r3, asr #14
 801a11c:	9401      	str	r4, [sp, #4]
 801a11e:	19d2      	adds	r2, r2, r7
 801a120:	0c13      	lsrs	r3, r2, #16
 801a122:	eba8 0403 	sub.w	r4, r8, r3
 801a126:	fb04 f40a 	mul.w	r4, r4, sl
 801a12a:	fb03 f509 	mul.w	r5, r3, r9
 801a12e:	4564      	cmp	r4, ip
 801a130:	bfa8      	it	ge
 801a132:	462c      	movge	r4, r5
 801a134:	eb14 0f0c 	cmn.w	r4, ip
 801a138:	bfd8      	it	le
 801a13a:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a13e:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a142:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a146:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a14a:	b223      	sxth	r3, r4
 801a14c:	436c      	muls	r4, r5
 801a14e:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a152:	9b02      	ldr	r3, [sp, #8]
 801a154:	eb04 34a3 	add.w	r4, r4, r3, asr #14
 801a158:	9402      	str	r4, [sp, #8]
 801a15a:	19d2      	adds	r2, r2, r7
 801a15c:	0c13      	lsrs	r3, r2, #16
 801a15e:	eba8 0403 	sub.w	r4, r8, r3
 801a162:	fb04 f40a 	mul.w	r4, r4, sl
 801a166:	fb03 f509 	mul.w	r5, r3, r9
 801a16a:	4564      	cmp	r4, ip
 801a16c:	bfa8      	it	ge
 801a16e:	462c      	movge	r4, r5
 801a170:	eb14 0f0c 	cmn.w	r4, ip
 801a174:	bfd8      	it	le
 801a176:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a17a:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a17e:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a182:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a186:	b223      	sxth	r3, r4
 801a188:	436c      	muls	r4, r5
 801a18a:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a18e:	9b03      	ldr	r3, [sp, #12]
 801a190:	eb04 3ba3 	add.w	fp, r4, r3, asr #14
 801a194:	f000 b879 	b.w	801a28a <wa3>

0801a198 <wa2>:
 801a198:	9c00      	ldr	r4, [sp, #0]
 801a19a:	19d2      	adds	r2, r2, r7
 801a19c:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 801a1a0:	0c1b      	lsrs	r3, r3, #16
 801a1a2:	eba8 0403 	sub.w	r4, r8, r3
 801a1a6:	fb04 f40a 	mul.w	r4, r4, sl
 801a1aa:	fb03 f509 	mul.w	r5, r3, r9
 801a1ae:	4564      	cmp	r4, ip
 801a1b0:	bfa8      	it	ge
 801a1b2:	462c      	movge	r4, r5
 801a1b4:	eb14 0f0c 	cmn.w	r4, ip
 801a1b8:	bfd8      	it	le
 801a1ba:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a1be:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a1c2:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a1c6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a1ca:	b223      	sxth	r3, r4
 801a1cc:	436c      	muls	r4, r5
 801a1ce:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a1d2:	9400      	str	r4, [sp, #0]
 801a1d4:	9c01      	ldr	r4, [sp, #4]
 801a1d6:	19d2      	adds	r2, r2, r7
 801a1d8:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 801a1dc:	0c1b      	lsrs	r3, r3, #16
 801a1de:	eba8 0403 	sub.w	r4, r8, r3
 801a1e2:	fb04 f40a 	mul.w	r4, r4, sl
 801a1e6:	fb03 f509 	mul.w	r5, r3, r9
 801a1ea:	4564      	cmp	r4, ip
 801a1ec:	bfa8      	it	ge
 801a1ee:	462c      	movge	r4, r5
 801a1f0:	eb14 0f0c 	cmn.w	r4, ip
 801a1f4:	bfd8      	it	le
 801a1f6:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a1fa:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a1fe:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a202:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a206:	b223      	sxth	r3, r4
 801a208:	436c      	muls	r4, r5
 801a20a:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a20e:	9401      	str	r4, [sp, #4]
 801a210:	9c02      	ldr	r4, [sp, #8]
 801a212:	19d2      	adds	r2, r2, r7
 801a214:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 801a218:	0c1b      	lsrs	r3, r3, #16
 801a21a:	eba8 0403 	sub.w	r4, r8, r3
 801a21e:	fb04 f40a 	mul.w	r4, r4, sl
 801a222:	fb03 f509 	mul.w	r5, r3, r9
 801a226:	4564      	cmp	r4, ip
 801a228:	bfa8      	it	ge
 801a22a:	462c      	movge	r4, r5
 801a22c:	eb14 0f0c 	cmn.w	r4, ip
 801a230:	bfd8      	it	le
 801a232:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a236:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a23a:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a23e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a242:	b223      	sxth	r3, r4
 801a244:	436c      	muls	r4, r5
 801a246:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a24a:	9402      	str	r4, [sp, #8]
 801a24c:	9c03      	ldr	r4, [sp, #12]
 801a24e:	19d2      	adds	r2, r2, r7
 801a250:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 801a254:	0c1b      	lsrs	r3, r3, #16
 801a256:	eba8 0403 	sub.w	r4, r8, r3
 801a25a:	fb04 f40a 	mul.w	r4, r4, sl
 801a25e:	fb03 f509 	mul.w	r5, r3, r9
 801a262:	4564      	cmp	r4, ip
 801a264:	bfa8      	it	ge
 801a266:	462c      	movge	r4, r5
 801a268:	eb14 0f0c 	cmn.w	r4, ip
 801a26c:	bfd8      	it	le
 801a26e:	eba5 4409 	suble.w	r4, r5, r9, lsl #16
 801a272:	f3c4 2585 	ubfx	r5, r4, #10, #6
 801a276:	f324 4406 	ssat	r4, #6, r4, asr #16
 801a27a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801a27e:	b223      	sxth	r3, r4
 801a280:	436c      	muls	r4, r5
 801a282:	eb03 5494 	add.w	r4, r3, r4, lsr #22
 801a286:	ea5f 0b04 	movs.w	fp, r4

0801a28a <wa3>:
 801a28a:	62c2      	str	r2, [r0, #44]	; 0x2c
 801a28c:	e89d 0700 	ldmia.w	sp, {r8, r9, sl}
 801a290:	7802      	ldrb	r2, [r0, #0]
 801a292:	7b0b      	ldrb	r3, [r1, #12]
 801a294:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801a296:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a298:	fb02 f705 	mul.w	r7, r2, r5
 801a29c:	123f      	asrs	r7, r7, #8
 801a29e:	4357      	muls	r7, r2
 801a2a0:	eb04 2427 	add.w	r4, r4, r7, asr #8
 801a2a4:	fb03 f705 	mul.w	r7, r3, r5
 801a2a8:	eba8 2727 	sub.w	r7, r8, r7, asr #8
 801a2ac:	1b3f      	subs	r7, r7, r4
 801a2ae:	4357      	muls	r7, r2
 801a2b0:	123f      	asrs	r7, r7, #8
 801a2b2:	4357      	muls	r7, r2
 801a2b4:	eb05 2527 	add.w	r5, r5, r7, asr #8
 801a2b8:	f304 0810 	ssat	r8, #16, r4
 801a2bc:	fb02 f705 	mul.w	r7, r2, r5
 801a2c0:	123f      	asrs	r7, r7, #8
 801a2c2:	4357      	muls	r7, r2
 801a2c4:	eb04 2427 	add.w	r4, r4, r7, asr #8
 801a2c8:	fb03 f705 	mul.w	r7, r3, r5
 801a2cc:	eba9 2727 	sub.w	r7, r9, r7, asr #8
 801a2d0:	1b3f      	subs	r7, r7, r4
 801a2d2:	4357      	muls	r7, r2
 801a2d4:	123f      	asrs	r7, r7, #8
 801a2d6:	4357      	muls	r7, r2
 801a2d8:	eb05 2527 	add.w	r5, r5, r7, asr #8
 801a2dc:	f304 0910 	ssat	r9, #16, r4
 801a2e0:	fb02 f705 	mul.w	r7, r2, r5
 801a2e4:	123f      	asrs	r7, r7, #8
 801a2e6:	4357      	muls	r7, r2
 801a2e8:	eb04 2427 	add.w	r4, r4, r7, asr #8
 801a2ec:	fb03 f705 	mul.w	r7, r3, r5
 801a2f0:	ebaa 2727 	sub.w	r7, sl, r7, asr #8
 801a2f4:	1b3f      	subs	r7, r7, r4
 801a2f6:	4357      	muls	r7, r2
 801a2f8:	123f      	asrs	r7, r7, #8
 801a2fa:	4357      	muls	r7, r2
 801a2fc:	eb05 2527 	add.w	r5, r5, r7, asr #8
 801a300:	f304 0a10 	ssat	sl, #16, r4
 801a304:	fb02 f705 	mul.w	r7, r2, r5
 801a308:	123f      	asrs	r7, r7, #8
 801a30a:	4357      	muls	r7, r2
 801a30c:	eb04 2427 	add.w	r4, r4, r7, asr #8
 801a310:	fb03 f705 	mul.w	r7, r3, r5
 801a314:	ebab 2727 	sub.w	r7, fp, r7, asr #8
 801a318:	1b3f      	subs	r7, r7, r4
 801a31a:	4357      	muls	r7, r2
 801a31c:	123f      	asrs	r7, r7, #8
 801a31e:	4357      	muls	r7, r2
 801a320:	eb05 2527 	add.w	r5, r5, r7, asr #8
 801a324:	f304 0b10 	ssat	fp, #16, r4
 801a328:	6404      	str	r4, [r0, #64]	; 0x40
 801a32a:	6445      	str	r5, [r0, #68]	; 0x44
 801a32c:	f8df e138 	ldr.w	lr, [pc, #312]	; 801a468 <wavupaend+0x2>
 801a330:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801a332:	8cc3      	ldrh	r3, [r0, #38]	; 0x26

0801a334 <wa34>:
 801a334:	6c87      	ldr	r7, [r0, #72]	; 0x48
 801a336:	f8c0 b048 	str.w	fp, [r0, #72]	; 0x48
 801a33a:	b11f      	cbz	r7, 801a344 <wa35>
 801a33c:	ea97 0f08 	teq	r7, r8
 801a340:	f100 8031 	bmi.w	801a3a6 <waz0>

0801a344 <wa35>:
 801a344:	8a84      	ldrh	r4, [r0, #20]
 801a346:	4362      	muls	r2, r4
 801a348:	0c12      	lsrs	r2, r2, #16
 801a34a:	4363      	muls	r3, r4
 801a34c:	0c1b      	lsrs	r3, r3, #16
 801a34e:	ea98 0f09 	teq	r8, r9
 801a352:	f100 8032 	bmi.w	801a3ba <waz1>
 801a356:	ea99 0f0a 	teq	r9, sl
 801a35a:	f100 8048 	bmi.w	801a3ee <waz2>
 801a35e:	ea9a 0f0b 	teq	sl, fp
 801a362:	f100 805a 	bmi.w	801a41a <waz3>

0801a366 <waz0r>:
 801a366:	e89e 00f0 	ldmia.w	lr, {r4, r5, r6, r7}
 801a36a:	fb02 4408 	mla	r4, r2, r8, r4
 801a36e:	fb03 5508 	mla	r5, r3, r8, r5
 801a372:	fb02 6609 	mla	r6, r2, r9, r6
 801a376:	fb03 7709 	mla	r7, r3, r9, r7
 801a37a:	e8ae 00f0 	stmia.w	lr!, {r4, r5, r6, r7}

0801a37e <waz2r>:
 801a37e:	e89e 00f0 	ldmia.w	lr, {r4, r5, r6, r7}
 801a382:	fb02 440a 	mla	r4, r2, sl, r4
 801a386:	fb03 550a 	mla	r5, r3, sl, r5
 801a38a:	fb02 660b 	mla	r6, r2, fp, r6
 801a38e:	fb03 770b 	mla	r7, r3, fp, r7
 801a392:	e8ae 00f0 	stmia.w	lr!, {r4, r5, r6, r7}

0801a396 <waz4r>:
 801a396:	3050      	adds	r0, #80	; 0x50
 801a398:	4937      	ldr	r1, [pc, #220]	; (801a478 <wavupaend+0x12>)
 801a39a:	4288      	cmp	r0, r1
 801a39c:	f47f ad6b 	bne.w	8019e76 <wa17>
 801a3a0:	b004      	add	sp, #16
 801a3a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0801a3a6 <waz0>:
 801a3a6:	8b84      	ldrh	r4, [r0, #28]
 801a3a8:	8284      	strh	r4, [r0, #20]
 801a3aa:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801a3ac:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801a3ae:	4362      	muls	r2, r4
 801a3b0:	0c12      	lsrs	r2, r2, #16
 801a3b2:	4363      	muls	r3, r4
 801a3b4:	0c1b      	lsrs	r3, r3, #16
 801a3b6:	f7ff bfd6 	b.w	801a366 <waz0r>

0801a3ba <waz1>:
 801a3ba:	e89e 0030 	ldmia.w	lr, {r4, r5}
 801a3be:	fb02 4408 	mla	r4, r2, r8, r4
 801a3c2:	fb03 5508 	mla	r5, r3, r8, r5
 801a3c6:	e8ae 0030 	stmia.w	lr!, {r4, r5}
 801a3ca:	8b84      	ldrh	r4, [r0, #28]
 801a3cc:	8284      	strh	r4, [r0, #20]
 801a3ce:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801a3d0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801a3d2:	4362      	muls	r2, r4
 801a3d4:	0c12      	lsrs	r2, r2, #16
 801a3d6:	4363      	muls	r3, r4
 801a3d8:	0c1b      	lsrs	r3, r3, #16
 801a3da:	e89e 0030 	ldmia.w	lr, {r4, r5}
 801a3de:	fb02 4409 	mla	r4, r2, r9, r4
 801a3e2:	fb03 5509 	mla	r5, r3, r9, r5
 801a3e6:	e8ae 0030 	stmia.w	lr!, {r4, r5}
 801a3ea:	f7ff bfc8 	b.w	801a37e <waz2r>

0801a3ee <waz2>:
 801a3ee:	e89e 00f0 	ldmia.w	lr, {r4, r5, r6, r7}
 801a3f2:	fb02 4408 	mla	r4, r2, r8, r4
 801a3f6:	fb03 5508 	mla	r5, r3, r8, r5
 801a3fa:	fb02 6609 	mla	r6, r2, r9, r6
 801a3fe:	fb03 7709 	mla	r7, r3, r9, r7
 801a402:	e8ae 00f0 	stmia.w	lr!, {r4, r5, r6, r7}
 801a406:	8b84      	ldrh	r4, [r0, #28]
 801a408:	8284      	strh	r4, [r0, #20]
 801a40a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801a40c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801a40e:	4362      	muls	r2, r4
 801a410:	0c12      	lsrs	r2, r2, #16
 801a412:	4363      	muls	r3, r4
 801a414:	0c1b      	lsrs	r3, r3, #16
 801a416:	f7ff bfb2 	b.w	801a37e <waz2r>

0801a41a <waz3>:
 801a41a:	e89e 00f0 	ldmia.w	lr, {r4, r5, r6, r7}
 801a41e:	fb02 4408 	mla	r4, r2, r8, r4
 801a422:	fb03 5508 	mla	r5, r3, r8, r5
 801a426:	fb02 6609 	mla	r6, r2, r9, r6
 801a42a:	fb03 7709 	mla	r7, r3, r9, r7
 801a42e:	e8ae 00f0 	stmia.w	lr!, {r4, r5, r6, r7}
 801a432:	e89e 0030 	ldmia.w	lr, {r4, r5}
 801a436:	fb02 440a 	mla	r4, r2, sl, r4
 801a43a:	fb03 550a 	mla	r5, r3, sl, r5
 801a43e:	e8ae 0030 	stmia.w	lr!, {r4, r5}
 801a442:	8b84      	ldrh	r4, [r0, #28]
 801a444:	8284      	strh	r4, [r0, #20]
 801a446:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801a448:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801a44a:	4362      	muls	r2, r4
 801a44c:	0c12      	lsrs	r2, r2, #16
 801a44e:	4363      	muls	r3, r4
 801a450:	0c1b      	lsrs	r3, r3, #16
 801a452:	e89e 0030 	ldmia.w	lr, {r4, r5}
 801a456:	fb02 440b 	mla	r4, r2, fp, r4
 801a45a:	fb03 550b 	mla	r5, r3, fp, r5
 801a45e:	e8ae 0030 	stmia.w	lr!, {r4, r5}
 801a462:	f7ff bf98 	b.w	801a396 <waz4r>

0801a466 <wavupaend>:
 801a466:	0000      	.short	0x0000
 801a468:	20000fa4 	.word	0x20000fa4
 801a46c:	200008c4 	.word	0x200008c4
 801a470:	200006e4 	.word	0x200006e4
 801a474:	0801b4c4 	.word	0x0801b4c4
 801a478:	20000dc4 	.word	0x20000dc4

0801a47c <__aeabi_llsr>:
 801a47c:	40d0      	lsrs	r0, r2
 801a47e:	1c0b      	adds	r3, r1, #0
 801a480:	40d1      	lsrs	r1, r2
 801a482:	469c      	mov	ip, r3
 801a484:	3a20      	subs	r2, #32
 801a486:	40d3      	lsrs	r3, r2
 801a488:	4318      	orrs	r0, r3
 801a48a:	4252      	negs	r2, r2
 801a48c:	4663      	mov	r3, ip
 801a48e:	4093      	lsls	r3, r2
 801a490:	4318      	orrs	r0, r3
 801a492:	4770      	bx	lr

0801a494 <__aeabi_llsl>:
 801a494:	4091      	lsls	r1, r2
 801a496:	1c03      	adds	r3, r0, #0
 801a498:	4090      	lsls	r0, r2
 801a49a:	469c      	mov	ip, r3
 801a49c:	3a20      	subs	r2, #32
 801a49e:	4093      	lsls	r3, r2
 801a4a0:	4319      	orrs	r1, r3
 801a4a2:	4252      	negs	r2, r2
 801a4a4:	4663      	mov	r3, ip
 801a4a6:	40d3      	lsrs	r3, r2
 801a4a8:	4319      	orrs	r1, r3
 801a4aa:	4770      	bx	lr

0801a4ac <__aeabi_drsub>:
 801a4ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801a4b0:	e002      	b.n	801a4b8 <__adddf3>
 801a4b2:	bf00      	nop

0801a4b4 <__aeabi_dsub>:
 801a4b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801a4b8 <__adddf3>:
 801a4b8:	b530      	push	{r4, r5, lr}
 801a4ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801a4be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801a4c2:	ea94 0f05 	teq	r4, r5
 801a4c6:	bf08      	it	eq
 801a4c8:	ea90 0f02 	teqeq	r0, r2
 801a4cc:	bf1f      	itttt	ne
 801a4ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 801a4d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 801a4d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801a4da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801a4de:	f000 80e2 	beq.w	801a6a6 <__adddf3+0x1ee>
 801a4e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801a4e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801a4ea:	bfb8      	it	lt
 801a4ec:	426d      	neglt	r5, r5
 801a4ee:	dd0c      	ble.n	801a50a <__adddf3+0x52>
 801a4f0:	442c      	add	r4, r5
 801a4f2:	ea80 0202 	eor.w	r2, r0, r2
 801a4f6:	ea81 0303 	eor.w	r3, r1, r3
 801a4fa:	ea82 0000 	eor.w	r0, r2, r0
 801a4fe:	ea83 0101 	eor.w	r1, r3, r1
 801a502:	ea80 0202 	eor.w	r2, r0, r2
 801a506:	ea81 0303 	eor.w	r3, r1, r3
 801a50a:	2d36      	cmp	r5, #54	; 0x36
 801a50c:	bf88      	it	hi
 801a50e:	bd30      	pophi	{r4, r5, pc}
 801a510:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801a514:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801a518:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 801a51c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801a520:	d002      	beq.n	801a528 <__adddf3+0x70>
 801a522:	4240      	negs	r0, r0
 801a524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801a528:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 801a52c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801a530:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801a534:	d002      	beq.n	801a53c <__adddf3+0x84>
 801a536:	4252      	negs	r2, r2
 801a538:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801a53c:	ea94 0f05 	teq	r4, r5
 801a540:	f000 80a7 	beq.w	801a692 <__adddf3+0x1da>
 801a544:	f1a4 0401 	sub.w	r4, r4, #1
 801a548:	f1d5 0e20 	rsbs	lr, r5, #32
 801a54c:	db0d      	blt.n	801a56a <__adddf3+0xb2>
 801a54e:	fa02 fc0e 	lsl.w	ip, r2, lr
 801a552:	fa22 f205 	lsr.w	r2, r2, r5
 801a556:	1880      	adds	r0, r0, r2
 801a558:	f141 0100 	adc.w	r1, r1, #0
 801a55c:	fa03 f20e 	lsl.w	r2, r3, lr
 801a560:	1880      	adds	r0, r0, r2
 801a562:	fa43 f305 	asr.w	r3, r3, r5
 801a566:	4159      	adcs	r1, r3
 801a568:	e00e      	b.n	801a588 <__adddf3+0xd0>
 801a56a:	f1a5 0520 	sub.w	r5, r5, #32
 801a56e:	f10e 0e20 	add.w	lr, lr, #32
 801a572:	2a01      	cmp	r2, #1
 801a574:	fa03 fc0e 	lsl.w	ip, r3, lr
 801a578:	bf28      	it	cs
 801a57a:	f04c 0c02 	orrcs.w	ip, ip, #2
 801a57e:	fa43 f305 	asr.w	r3, r3, r5
 801a582:	18c0      	adds	r0, r0, r3
 801a584:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801a588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801a58c:	d507      	bpl.n	801a59e <__adddf3+0xe6>
 801a58e:	f04f 0e00 	mov.w	lr, #0
 801a592:	f1dc 0c00 	rsbs	ip, ip, #0
 801a596:	eb7e 0000 	sbcs.w	r0, lr, r0
 801a59a:	eb6e 0101 	sbc.w	r1, lr, r1
 801a59e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a5a2:	d31b      	bcc.n	801a5dc <__adddf3+0x124>
 801a5a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801a5a8:	d30c      	bcc.n	801a5c4 <__adddf3+0x10c>
 801a5aa:	0849      	lsrs	r1, r1, #1
 801a5ac:	ea5f 0030 	movs.w	r0, r0, rrx
 801a5b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801a5b4:	f104 0401 	add.w	r4, r4, #1
 801a5b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 801a5bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801a5c0:	f080 809a 	bcs.w	801a6f8 <__adddf3+0x240>
 801a5c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801a5c8:	bf08      	it	eq
 801a5ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801a5ce:	f150 0000 	adcs.w	r0, r0, #0
 801a5d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801a5d6:	ea41 0105 	orr.w	r1, r1, r5
 801a5da:	bd30      	pop	{r4, r5, pc}
 801a5dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801a5e0:	4140      	adcs	r0, r0
 801a5e2:	eb41 0101 	adc.w	r1, r1, r1
 801a5e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801a5ea:	f1a4 0401 	sub.w	r4, r4, #1
 801a5ee:	d1e9      	bne.n	801a5c4 <__adddf3+0x10c>
 801a5f0:	f091 0f00 	teq	r1, #0
 801a5f4:	bf04      	itt	eq
 801a5f6:	4601      	moveq	r1, r0
 801a5f8:	2000      	moveq	r0, #0
 801a5fa:	fab1 f381 	clz	r3, r1
 801a5fe:	bf08      	it	eq
 801a600:	3320      	addeq	r3, #32
 801a602:	f1a3 030b 	sub.w	r3, r3, #11
 801a606:	f1b3 0220 	subs.w	r2, r3, #32
 801a60a:	da0c      	bge.n	801a626 <__adddf3+0x16e>
 801a60c:	320c      	adds	r2, #12
 801a60e:	dd08      	ble.n	801a622 <__adddf3+0x16a>
 801a610:	f102 0c14 	add.w	ip, r2, #20
 801a614:	f1c2 020c 	rsb	r2, r2, #12
 801a618:	fa01 f00c 	lsl.w	r0, r1, ip
 801a61c:	fa21 f102 	lsr.w	r1, r1, r2
 801a620:	e00c      	b.n	801a63c <__adddf3+0x184>
 801a622:	f102 0214 	add.w	r2, r2, #20
 801a626:	bfd8      	it	le
 801a628:	f1c2 0c20 	rsble	ip, r2, #32
 801a62c:	fa01 f102 	lsl.w	r1, r1, r2
 801a630:	fa20 fc0c 	lsr.w	ip, r0, ip
 801a634:	bfdc      	itt	le
 801a636:	ea41 010c 	orrle.w	r1, r1, ip
 801a63a:	4090      	lslle	r0, r2
 801a63c:	1ae4      	subs	r4, r4, r3
 801a63e:	bfa2      	ittt	ge
 801a640:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801a644:	4329      	orrge	r1, r5
 801a646:	bd30      	popge	{r4, r5, pc}
 801a648:	ea6f 0404 	mvn.w	r4, r4
 801a64c:	3c1f      	subs	r4, #31
 801a64e:	da1c      	bge.n	801a68a <__adddf3+0x1d2>
 801a650:	340c      	adds	r4, #12
 801a652:	dc0e      	bgt.n	801a672 <__adddf3+0x1ba>
 801a654:	f104 0414 	add.w	r4, r4, #20
 801a658:	f1c4 0220 	rsb	r2, r4, #32
 801a65c:	fa20 f004 	lsr.w	r0, r0, r4
 801a660:	fa01 f302 	lsl.w	r3, r1, r2
 801a664:	ea40 0003 	orr.w	r0, r0, r3
 801a668:	fa21 f304 	lsr.w	r3, r1, r4
 801a66c:	ea45 0103 	orr.w	r1, r5, r3
 801a670:	bd30      	pop	{r4, r5, pc}
 801a672:	f1c4 040c 	rsb	r4, r4, #12
 801a676:	f1c4 0220 	rsb	r2, r4, #32
 801a67a:	fa20 f002 	lsr.w	r0, r0, r2
 801a67e:	fa01 f304 	lsl.w	r3, r1, r4
 801a682:	ea40 0003 	orr.w	r0, r0, r3
 801a686:	4629      	mov	r1, r5
 801a688:	bd30      	pop	{r4, r5, pc}
 801a68a:	fa21 f004 	lsr.w	r0, r1, r4
 801a68e:	4629      	mov	r1, r5
 801a690:	bd30      	pop	{r4, r5, pc}
 801a692:	f094 0f00 	teq	r4, #0
 801a696:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801a69a:	bf06      	itte	eq
 801a69c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801a6a0:	3401      	addeq	r4, #1
 801a6a2:	3d01      	subne	r5, #1
 801a6a4:	e74e      	b.n	801a544 <__adddf3+0x8c>
 801a6a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801a6aa:	bf18      	it	ne
 801a6ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801a6b0:	d029      	beq.n	801a706 <__adddf3+0x24e>
 801a6b2:	ea94 0f05 	teq	r4, r5
 801a6b6:	bf08      	it	eq
 801a6b8:	ea90 0f02 	teqeq	r0, r2
 801a6bc:	d005      	beq.n	801a6ca <__adddf3+0x212>
 801a6be:	ea54 0c00 	orrs.w	ip, r4, r0
 801a6c2:	bf04      	itt	eq
 801a6c4:	4619      	moveq	r1, r3
 801a6c6:	4610      	moveq	r0, r2
 801a6c8:	bd30      	pop	{r4, r5, pc}
 801a6ca:	ea91 0f03 	teq	r1, r3
 801a6ce:	bf1e      	ittt	ne
 801a6d0:	2100      	movne	r1, #0
 801a6d2:	2000      	movne	r0, #0
 801a6d4:	bd30      	popne	{r4, r5, pc}
 801a6d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801a6da:	d105      	bne.n	801a6e8 <__adddf3+0x230>
 801a6dc:	0040      	lsls	r0, r0, #1
 801a6de:	4149      	adcs	r1, r1
 801a6e0:	bf28      	it	cs
 801a6e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801a6e6:	bd30      	pop	{r4, r5, pc}
 801a6e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 801a6ec:	bf3c      	itt	cc
 801a6ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801a6f2:	bd30      	popcc	{r4, r5, pc}
 801a6f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801a6f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 801a6fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a700:	f04f 0000 	mov.w	r0, #0
 801a704:	bd30      	pop	{r4, r5, pc}
 801a706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801a70a:	bf1a      	itte	ne
 801a70c:	4619      	movne	r1, r3
 801a70e:	4610      	movne	r0, r2
 801a710:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801a714:	bf1c      	itt	ne
 801a716:	460b      	movne	r3, r1
 801a718:	4602      	movne	r2, r0
 801a71a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801a71e:	bf06      	itte	eq
 801a720:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801a724:	ea91 0f03 	teqeq	r1, r3
 801a728:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 801a72c:	bd30      	pop	{r4, r5, pc}
 801a72e:	bf00      	nop

0801a730 <__aeabi_ui2d>:
 801a730:	f090 0f00 	teq	r0, #0
 801a734:	bf04      	itt	eq
 801a736:	2100      	moveq	r1, #0
 801a738:	4770      	bxeq	lr
 801a73a:	b530      	push	{r4, r5, lr}
 801a73c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801a740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801a744:	f04f 0500 	mov.w	r5, #0
 801a748:	f04f 0100 	mov.w	r1, #0
 801a74c:	e750      	b.n	801a5f0 <__adddf3+0x138>
 801a74e:	bf00      	nop

0801a750 <__aeabi_i2d>:
 801a750:	f090 0f00 	teq	r0, #0
 801a754:	bf04      	itt	eq
 801a756:	2100      	moveq	r1, #0
 801a758:	4770      	bxeq	lr
 801a75a:	b530      	push	{r4, r5, lr}
 801a75c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801a760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801a764:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801a768:	bf48      	it	mi
 801a76a:	4240      	negmi	r0, r0
 801a76c:	f04f 0100 	mov.w	r1, #0
 801a770:	e73e      	b.n	801a5f0 <__adddf3+0x138>
 801a772:	bf00      	nop

0801a774 <__aeabi_f2d>:
 801a774:	0042      	lsls	r2, r0, #1
 801a776:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801a77a:	ea4f 0131 	mov.w	r1, r1, rrx
 801a77e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801a782:	bf1f      	itttt	ne
 801a784:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801a788:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801a78c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801a790:	4770      	bxne	lr
 801a792:	f092 0f00 	teq	r2, #0
 801a796:	bf14      	ite	ne
 801a798:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801a79c:	4770      	bxeq	lr
 801a79e:	b530      	push	{r4, r5, lr}
 801a7a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 801a7a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801a7a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a7ac:	e720      	b.n	801a5f0 <__adddf3+0x138>
 801a7ae:	bf00      	nop

0801a7b0 <__aeabi_ul2d>:
 801a7b0:	ea50 0201 	orrs.w	r2, r0, r1
 801a7b4:	bf08      	it	eq
 801a7b6:	4770      	bxeq	lr
 801a7b8:	b530      	push	{r4, r5, lr}
 801a7ba:	f04f 0500 	mov.w	r5, #0
 801a7be:	e00a      	b.n	801a7d6 <__aeabi_l2d+0x16>

0801a7c0 <__aeabi_l2d>:
 801a7c0:	ea50 0201 	orrs.w	r2, r0, r1
 801a7c4:	bf08      	it	eq
 801a7c6:	4770      	bxeq	lr
 801a7c8:	b530      	push	{r4, r5, lr}
 801a7ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801a7ce:	d502      	bpl.n	801a7d6 <__aeabi_l2d+0x16>
 801a7d0:	4240      	negs	r0, r0
 801a7d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801a7d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801a7da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801a7de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801a7e2:	f43f aedc 	beq.w	801a59e <__adddf3+0xe6>
 801a7e6:	f04f 0203 	mov.w	r2, #3
 801a7ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801a7ee:	bf18      	it	ne
 801a7f0:	3203      	addne	r2, #3
 801a7f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801a7f6:	bf18      	it	ne
 801a7f8:	3203      	addne	r2, #3
 801a7fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801a7fe:	f1c2 0320 	rsb	r3, r2, #32
 801a802:	fa00 fc03 	lsl.w	ip, r0, r3
 801a806:	fa20 f002 	lsr.w	r0, r0, r2
 801a80a:	fa01 fe03 	lsl.w	lr, r1, r3
 801a80e:	ea40 000e 	orr.w	r0, r0, lr
 801a812:	fa21 f102 	lsr.w	r1, r1, r2
 801a816:	4414      	add	r4, r2
 801a818:	e6c1      	b.n	801a59e <__adddf3+0xe6>
 801a81a:	bf00      	nop

0801a81c <__aeabi_dmul>:
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801a822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801a826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801a82a:	bf1d      	ittte	ne
 801a82c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801a830:	ea94 0f0c 	teqne	r4, ip
 801a834:	ea95 0f0c 	teqne	r5, ip
 801a838:	f000 f8de 	bleq	801a9f8 <__aeabi_dmul+0x1dc>
 801a83c:	442c      	add	r4, r5
 801a83e:	ea81 0603 	eor.w	r6, r1, r3
 801a842:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 801a846:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801a84a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801a84e:	bf18      	it	ne
 801a850:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 801a854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801a858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a85c:	d038      	beq.n	801a8d0 <__aeabi_dmul+0xb4>
 801a85e:	fba0 ce02 	umull	ip, lr, r0, r2
 801a862:	f04f 0500 	mov.w	r5, #0
 801a866:	fbe1 e502 	umlal	lr, r5, r1, r2
 801a86a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801a86e:	fbe0 e503 	umlal	lr, r5, r0, r3
 801a872:	f04f 0600 	mov.w	r6, #0
 801a876:	fbe1 5603 	umlal	r5, r6, r1, r3
 801a87a:	f09c 0f00 	teq	ip, #0
 801a87e:	bf18      	it	ne
 801a880:	f04e 0e01 	orrne.w	lr, lr, #1
 801a884:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 801a888:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801a88c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801a890:	d204      	bcs.n	801a89c <__aeabi_dmul+0x80>
 801a892:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801a896:	416d      	adcs	r5, r5
 801a898:	eb46 0606 	adc.w	r6, r6, r6
 801a89c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801a8a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 801a8a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801a8a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801a8ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801a8b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801a8b4:	bf88      	it	hi
 801a8b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801a8ba:	d81e      	bhi.n	801a8fa <__aeabi_dmul+0xde>
 801a8bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801a8c0:	bf08      	it	eq
 801a8c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801a8c6:	f150 0000 	adcs.w	r0, r0, #0
 801a8ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801a8ce:	bd70      	pop	{r4, r5, r6, pc}
 801a8d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 801a8d4:	ea46 0101 	orr.w	r1, r6, r1
 801a8d8:	ea40 0002 	orr.w	r0, r0, r2
 801a8dc:	ea81 0103 	eor.w	r1, r1, r3
 801a8e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 801a8e4:	bfc2      	ittt	gt
 801a8e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 801a8ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801a8ee:	bd70      	popgt	{r4, r5, r6, pc}
 801a8f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801a8f4:	f04f 0e00 	mov.w	lr, #0
 801a8f8:	3c01      	subs	r4, #1
 801a8fa:	f300 80ab 	bgt.w	801aa54 <__aeabi_dmul+0x238>
 801a8fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801a902:	bfde      	ittt	le
 801a904:	2000      	movle	r0, #0
 801a906:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801a90a:	bd70      	pople	{r4, r5, r6, pc}
 801a90c:	f1c4 0400 	rsb	r4, r4, #0
 801a910:	3c20      	subs	r4, #32
 801a912:	da35      	bge.n	801a980 <__aeabi_dmul+0x164>
 801a914:	340c      	adds	r4, #12
 801a916:	dc1b      	bgt.n	801a950 <__aeabi_dmul+0x134>
 801a918:	f104 0414 	add.w	r4, r4, #20
 801a91c:	f1c4 0520 	rsb	r5, r4, #32
 801a920:	fa00 f305 	lsl.w	r3, r0, r5
 801a924:	fa20 f004 	lsr.w	r0, r0, r4
 801a928:	fa01 f205 	lsl.w	r2, r1, r5
 801a92c:	ea40 0002 	orr.w	r0, r0, r2
 801a930:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 801a934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801a93c:	fa21 f604 	lsr.w	r6, r1, r4
 801a940:	eb42 0106 	adc.w	r1, r2, r6
 801a944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801a948:	bf08      	it	eq
 801a94a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801a94e:	bd70      	pop	{r4, r5, r6, pc}
 801a950:	f1c4 040c 	rsb	r4, r4, #12
 801a954:	f1c4 0520 	rsb	r5, r4, #32
 801a958:	fa00 f304 	lsl.w	r3, r0, r4
 801a95c:	fa20 f005 	lsr.w	r0, r0, r5
 801a960:	fa01 f204 	lsl.w	r2, r1, r4
 801a964:	ea40 0002 	orr.w	r0, r0, r2
 801a968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801a96c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801a970:	f141 0100 	adc.w	r1, r1, #0
 801a974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801a978:	bf08      	it	eq
 801a97a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801a97e:	bd70      	pop	{r4, r5, r6, pc}
 801a980:	f1c4 0520 	rsb	r5, r4, #32
 801a984:	fa00 f205 	lsl.w	r2, r0, r5
 801a988:	ea4e 0e02 	orr.w	lr, lr, r2
 801a98c:	fa20 f304 	lsr.w	r3, r0, r4
 801a990:	fa01 f205 	lsl.w	r2, r1, r5
 801a994:	ea43 0302 	orr.w	r3, r3, r2
 801a998:	fa21 f004 	lsr.w	r0, r1, r4
 801a99c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801a9a0:	fa21 f204 	lsr.w	r2, r1, r4
 801a9a4:	ea20 0002 	bic.w	r0, r0, r2
 801a9a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801a9ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801a9b0:	bf08      	it	eq
 801a9b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801a9b6:	bd70      	pop	{r4, r5, r6, pc}
 801a9b8:	f094 0f00 	teq	r4, #0
 801a9bc:	d10f      	bne.n	801a9de <__aeabi_dmul+0x1c2>
 801a9be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801a9c2:	0040      	lsls	r0, r0, #1
 801a9c4:	eb41 0101 	adc.w	r1, r1, r1
 801a9c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801a9cc:	bf08      	it	eq
 801a9ce:	3c01      	subeq	r4, #1
 801a9d0:	d0f7      	beq.n	801a9c2 <__aeabi_dmul+0x1a6>
 801a9d2:	ea41 0106 	orr.w	r1, r1, r6
 801a9d6:	f095 0f00 	teq	r5, #0
 801a9da:	bf18      	it	ne
 801a9dc:	4770      	bxne	lr
 801a9de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801a9e2:	0052      	lsls	r2, r2, #1
 801a9e4:	eb43 0303 	adc.w	r3, r3, r3
 801a9e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801a9ec:	bf08      	it	eq
 801a9ee:	3d01      	subeq	r5, #1
 801a9f0:	d0f7      	beq.n	801a9e2 <__aeabi_dmul+0x1c6>
 801a9f2:	ea43 0306 	orr.w	r3, r3, r6
 801a9f6:	4770      	bx	lr
 801a9f8:	ea94 0f0c 	teq	r4, ip
 801a9fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801aa00:	bf18      	it	ne
 801aa02:	ea95 0f0c 	teqne	r5, ip
 801aa06:	d00c      	beq.n	801aa22 <__aeabi_dmul+0x206>
 801aa08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801aa0c:	bf18      	it	ne
 801aa0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801aa12:	d1d1      	bne.n	801a9b8 <__aeabi_dmul+0x19c>
 801aa14:	ea81 0103 	eor.w	r1, r1, r3
 801aa18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801aa1c:	f04f 0000 	mov.w	r0, #0
 801aa20:	bd70      	pop	{r4, r5, r6, pc}
 801aa22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801aa26:	bf06      	itte	eq
 801aa28:	4610      	moveq	r0, r2
 801aa2a:	4619      	moveq	r1, r3
 801aa2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801aa30:	d019      	beq.n	801aa66 <__aeabi_dmul+0x24a>
 801aa32:	ea94 0f0c 	teq	r4, ip
 801aa36:	d102      	bne.n	801aa3e <__aeabi_dmul+0x222>
 801aa38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801aa3c:	d113      	bne.n	801aa66 <__aeabi_dmul+0x24a>
 801aa3e:	ea95 0f0c 	teq	r5, ip
 801aa42:	d105      	bne.n	801aa50 <__aeabi_dmul+0x234>
 801aa44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 801aa48:	bf1c      	itt	ne
 801aa4a:	4610      	movne	r0, r2
 801aa4c:	4619      	movne	r1, r3
 801aa4e:	d10a      	bne.n	801aa66 <__aeabi_dmul+0x24a>
 801aa50:	ea81 0103 	eor.w	r1, r1, r3
 801aa54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801aa58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801aa5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801aa60:	f04f 0000 	mov.w	r0, #0
 801aa64:	bd70      	pop	{r4, r5, r6, pc}
 801aa66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801aa6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801aa6e:	bd70      	pop	{r4, r5, r6, pc}

0801aa70 <__aeabi_ddiv>:
 801aa70:	b570      	push	{r4, r5, r6, lr}
 801aa72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801aa76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801aa7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801aa7e:	bf1d      	ittte	ne
 801aa80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801aa84:	ea94 0f0c 	teqne	r4, ip
 801aa88:	ea95 0f0c 	teqne	r5, ip
 801aa8c:	f000 f8a7 	bleq	801abde <__aeabi_ddiv+0x16e>
 801aa90:	eba4 0405 	sub.w	r4, r4, r5
 801aa94:	ea81 0e03 	eor.w	lr, r1, r3
 801aa98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801aa9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801aaa0:	f000 8088 	beq.w	801abb4 <__aeabi_ddiv+0x144>
 801aaa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801aaa8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801aaac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801aab0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801aab4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801aab8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 801aabc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801aac0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 801aac4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 801aac8:	429d      	cmp	r5, r3
 801aaca:	bf08      	it	eq
 801aacc:	4296      	cmpeq	r6, r2
 801aace:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801aad2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801aad6:	d202      	bcs.n	801aade <__aeabi_ddiv+0x6e>
 801aad8:	085b      	lsrs	r3, r3, #1
 801aada:	ea4f 0232 	mov.w	r2, r2, rrx
 801aade:	1ab6      	subs	r6, r6, r2
 801aae0:	eb65 0503 	sbc.w	r5, r5, r3
 801aae4:	085b      	lsrs	r3, r3, #1
 801aae6:	ea4f 0232 	mov.w	r2, r2, rrx
 801aaea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801aaee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801aaf2:	ebb6 0e02 	subs.w	lr, r6, r2
 801aaf6:	eb75 0e03 	sbcs.w	lr, r5, r3
 801aafa:	bf22      	ittt	cs
 801aafc:	1ab6      	subcs	r6, r6, r2
 801aafe:	4675      	movcs	r5, lr
 801ab00:	ea40 000c 	orrcs.w	r0, r0, ip
 801ab04:	085b      	lsrs	r3, r3, #1
 801ab06:	ea4f 0232 	mov.w	r2, r2, rrx
 801ab0a:	ebb6 0e02 	subs.w	lr, r6, r2
 801ab0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 801ab12:	bf22      	ittt	cs
 801ab14:	1ab6      	subcs	r6, r6, r2
 801ab16:	4675      	movcs	r5, lr
 801ab18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801ab1c:	085b      	lsrs	r3, r3, #1
 801ab1e:	ea4f 0232 	mov.w	r2, r2, rrx
 801ab22:	ebb6 0e02 	subs.w	lr, r6, r2
 801ab26:	eb75 0e03 	sbcs.w	lr, r5, r3
 801ab2a:	bf22      	ittt	cs
 801ab2c:	1ab6      	subcs	r6, r6, r2
 801ab2e:	4675      	movcs	r5, lr
 801ab30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801ab34:	085b      	lsrs	r3, r3, #1
 801ab36:	ea4f 0232 	mov.w	r2, r2, rrx
 801ab3a:	ebb6 0e02 	subs.w	lr, r6, r2
 801ab3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 801ab42:	bf22      	ittt	cs
 801ab44:	1ab6      	subcs	r6, r6, r2
 801ab46:	4675      	movcs	r5, lr
 801ab48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801ab4c:	ea55 0e06 	orrs.w	lr, r5, r6
 801ab50:	d018      	beq.n	801ab84 <__aeabi_ddiv+0x114>
 801ab52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801ab56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801ab5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801ab5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ab62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 801ab66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ab6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801ab6e:	d1c0      	bne.n	801aaf2 <__aeabi_ddiv+0x82>
 801ab70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801ab74:	d10b      	bne.n	801ab8e <__aeabi_ddiv+0x11e>
 801ab76:	ea41 0100 	orr.w	r1, r1, r0
 801ab7a:	f04f 0000 	mov.w	r0, #0
 801ab7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801ab82:	e7b6      	b.n	801aaf2 <__aeabi_ddiv+0x82>
 801ab84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801ab88:	bf04      	itt	eq
 801ab8a:	4301      	orreq	r1, r0
 801ab8c:	2000      	moveq	r0, #0
 801ab8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801ab92:	bf88      	it	hi
 801ab94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801ab98:	f63f aeaf 	bhi.w	801a8fa <__aeabi_dmul+0xde>
 801ab9c:	ebb5 0c03 	subs.w	ip, r5, r3
 801aba0:	bf04      	itt	eq
 801aba2:	ebb6 0c02 	subseq.w	ip, r6, r2
 801aba6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801abaa:	f150 0000 	adcs.w	r0, r0, #0
 801abae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801abb2:	bd70      	pop	{r4, r5, r6, pc}
 801abb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 801abb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 801abbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801abc0:	bfc2      	ittt	gt
 801abc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 801abc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801abca:	bd70      	popgt	{r4, r5, r6, pc}
 801abcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801abd0:	f04f 0e00 	mov.w	lr, #0
 801abd4:	3c01      	subs	r4, #1
 801abd6:	e690      	b.n	801a8fa <__aeabi_dmul+0xde>
 801abd8:	ea45 0e06 	orr.w	lr, r5, r6
 801abdc:	e68d      	b.n	801a8fa <__aeabi_dmul+0xde>
 801abde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801abe2:	ea94 0f0c 	teq	r4, ip
 801abe6:	bf08      	it	eq
 801abe8:	ea95 0f0c 	teqeq	r5, ip
 801abec:	f43f af3b 	beq.w	801aa66 <__aeabi_dmul+0x24a>
 801abf0:	ea94 0f0c 	teq	r4, ip
 801abf4:	d10a      	bne.n	801ac0c <__aeabi_ddiv+0x19c>
 801abf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801abfa:	f47f af34 	bne.w	801aa66 <__aeabi_dmul+0x24a>
 801abfe:	ea95 0f0c 	teq	r5, ip
 801ac02:	f47f af25 	bne.w	801aa50 <__aeabi_dmul+0x234>
 801ac06:	4610      	mov	r0, r2
 801ac08:	4619      	mov	r1, r3
 801ac0a:	e72c      	b.n	801aa66 <__aeabi_dmul+0x24a>
 801ac0c:	ea95 0f0c 	teq	r5, ip
 801ac10:	d106      	bne.n	801ac20 <__aeabi_ddiv+0x1b0>
 801ac12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801ac16:	f43f aefd 	beq.w	801aa14 <__aeabi_dmul+0x1f8>
 801ac1a:	4610      	mov	r0, r2
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	e722      	b.n	801aa66 <__aeabi_dmul+0x24a>
 801ac20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801ac24:	bf18      	it	ne
 801ac26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801ac2a:	f47f aec5 	bne.w	801a9b8 <__aeabi_dmul+0x19c>
 801ac2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801ac32:	f47f af0d 	bne.w	801aa50 <__aeabi_dmul+0x234>
 801ac36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801ac3a:	f47f aeeb 	bne.w	801aa14 <__aeabi_dmul+0x1f8>
 801ac3e:	e712      	b.n	801aa66 <__aeabi_dmul+0x24a>

0801ac40 <__aeabi_d2iz>:
 801ac40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801ac44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801ac48:	d215      	bcs.n	801ac76 <__aeabi_d2iz+0x36>
 801ac4a:	d511      	bpl.n	801ac70 <__aeabi_d2iz+0x30>
 801ac4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801ac50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801ac54:	d912      	bls.n	801ac7c <__aeabi_d2iz+0x3c>
 801ac56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801ac5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ac5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801ac62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801ac66:	fa23 f002 	lsr.w	r0, r3, r2
 801ac6a:	bf18      	it	ne
 801ac6c:	4240      	negne	r0, r0
 801ac6e:	4770      	bx	lr
 801ac70:	f04f 0000 	mov.w	r0, #0
 801ac74:	4770      	bx	lr
 801ac76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801ac7a:	d105      	bne.n	801ac88 <__aeabi_d2iz+0x48>
 801ac7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801ac80:	bf08      	it	eq
 801ac82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801ac86:	4770      	bx	lr
 801ac88:	f04f 0000 	mov.w	r0, #0
 801ac8c:	4770      	bx	lr
 801ac8e:	bf00      	nop

0801ac90 <__aeabi_d2f>:
 801ac90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801ac94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 801ac98:	bf24      	itt	cs
 801ac9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801ac9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801aca2:	d90d      	bls.n	801acc0 <__aeabi_d2f+0x30>
 801aca4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801aca8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801acac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801acb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801acb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 801acb8:	bf08      	it	eq
 801acba:	f020 0001 	biceq.w	r0, r0, #1
 801acbe:	4770      	bx	lr
 801acc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801acc4:	d121      	bne.n	801ad0a <__aeabi_d2f+0x7a>
 801acc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 801acca:	bfbc      	itt	lt
 801accc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801acd0:	4770      	bxlt	lr
 801acd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801acd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 801acda:	f1c2 0218 	rsb	r2, r2, #24
 801acde:	f1c2 0c20 	rsb	ip, r2, #32
 801ace2:	fa10 f30c 	lsls.w	r3, r0, ip
 801ace6:	fa20 f002 	lsr.w	r0, r0, r2
 801acea:	bf18      	it	ne
 801acec:	f040 0001 	orrne.w	r0, r0, #1
 801acf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801acf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801acf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 801acfc:	ea40 000c 	orr.w	r0, r0, ip
 801ad00:	fa23 f302 	lsr.w	r3, r3, r2
 801ad04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ad08:	e7cc      	b.n	801aca4 <__aeabi_d2f+0x14>
 801ad0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801ad0e:	d107      	bne.n	801ad20 <__aeabi_d2f+0x90>
 801ad10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801ad14:	bf1e      	ittt	ne
 801ad16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 801ad1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801ad1e:	4770      	bxne	lr
 801ad20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801ad24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801ad28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop

0801ad30 <__aeabi_frsub>:
 801ad30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801ad34:	e002      	b.n	801ad3c <__addsf3>
 801ad36:	bf00      	nop

0801ad38 <__aeabi_fsub>:
 801ad38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801ad3c <__addsf3>:
 801ad3c:	0042      	lsls	r2, r0, #1
 801ad3e:	bf1f      	itttt	ne
 801ad40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 801ad44:	ea92 0f03 	teqne	r2, r3
 801ad48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801ad4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801ad50:	d06a      	beq.n	801ae28 <__addsf3+0xec>
 801ad52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 801ad56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801ad5a:	bfc1      	itttt	gt
 801ad5c:	18d2      	addgt	r2, r2, r3
 801ad5e:	4041      	eorgt	r1, r0
 801ad60:	4048      	eorgt	r0, r1
 801ad62:	4041      	eorgt	r1, r0
 801ad64:	bfb8      	it	lt
 801ad66:	425b      	neglt	r3, r3
 801ad68:	2b19      	cmp	r3, #25
 801ad6a:	bf88      	it	hi
 801ad6c:	4770      	bxhi	lr
 801ad6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 801ad72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ad76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801ad7a:	bf18      	it	ne
 801ad7c:	4240      	negne	r0, r0
 801ad7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801ad82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801ad86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801ad8a:	bf18      	it	ne
 801ad8c:	4249      	negne	r1, r1
 801ad8e:	ea92 0f03 	teq	r2, r3
 801ad92:	d03f      	beq.n	801ae14 <__addsf3+0xd8>
 801ad94:	f1a2 0201 	sub.w	r2, r2, #1
 801ad98:	fa41 fc03 	asr.w	ip, r1, r3
 801ad9c:	eb10 000c 	adds.w	r0, r0, ip
 801ada0:	f1c3 0320 	rsb	r3, r3, #32
 801ada4:	fa01 f103 	lsl.w	r1, r1, r3
 801ada8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801adac:	d502      	bpl.n	801adb4 <__addsf3+0x78>
 801adae:	4249      	negs	r1, r1
 801adb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 801adb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 801adb8:	d313      	bcc.n	801ade2 <__addsf3+0xa6>
 801adba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801adbe:	d306      	bcc.n	801adce <__addsf3+0x92>
 801adc0:	0840      	lsrs	r0, r0, #1
 801adc2:	ea4f 0131 	mov.w	r1, r1, rrx
 801adc6:	f102 0201 	add.w	r2, r2, #1
 801adca:	2afe      	cmp	r2, #254	; 0xfe
 801adcc:	d251      	bcs.n	801ae72 <__addsf3+0x136>
 801adce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 801add2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801add6:	bf08      	it	eq
 801add8:	f020 0001 	biceq.w	r0, r0, #1
 801addc:	ea40 0003 	orr.w	r0, r0, r3
 801ade0:	4770      	bx	lr
 801ade2:	0049      	lsls	r1, r1, #1
 801ade4:	eb40 0000 	adc.w	r0, r0, r0
 801ade8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 801adec:	f1a2 0201 	sub.w	r2, r2, #1
 801adf0:	d1ed      	bne.n	801adce <__addsf3+0x92>
 801adf2:	fab0 fc80 	clz	ip, r0
 801adf6:	f1ac 0c08 	sub.w	ip, ip, #8
 801adfa:	ebb2 020c 	subs.w	r2, r2, ip
 801adfe:	fa00 f00c 	lsl.w	r0, r0, ip
 801ae02:	bfaa      	itet	ge
 801ae04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 801ae08:	4252      	neglt	r2, r2
 801ae0a:	4318      	orrge	r0, r3
 801ae0c:	bfbc      	itt	lt
 801ae0e:	40d0      	lsrlt	r0, r2
 801ae10:	4318      	orrlt	r0, r3
 801ae12:	4770      	bx	lr
 801ae14:	f092 0f00 	teq	r2, #0
 801ae18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801ae1c:	bf06      	itte	eq
 801ae1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 801ae22:	3201      	addeq	r2, #1
 801ae24:	3b01      	subne	r3, #1
 801ae26:	e7b5      	b.n	801ad94 <__addsf3+0x58>
 801ae28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801ae2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 801ae30:	bf18      	it	ne
 801ae32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801ae36:	d021      	beq.n	801ae7c <__addsf3+0x140>
 801ae38:	ea92 0f03 	teq	r2, r3
 801ae3c:	d004      	beq.n	801ae48 <__addsf3+0x10c>
 801ae3e:	f092 0f00 	teq	r2, #0
 801ae42:	bf08      	it	eq
 801ae44:	4608      	moveq	r0, r1
 801ae46:	4770      	bx	lr
 801ae48:	ea90 0f01 	teq	r0, r1
 801ae4c:	bf1c      	itt	ne
 801ae4e:	2000      	movne	r0, #0
 801ae50:	4770      	bxne	lr
 801ae52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 801ae56:	d104      	bne.n	801ae62 <__addsf3+0x126>
 801ae58:	0040      	lsls	r0, r0, #1
 801ae5a:	bf28      	it	cs
 801ae5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 801ae60:	4770      	bx	lr
 801ae62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 801ae66:	bf3c      	itt	cc
 801ae68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801ae6c:	4770      	bxcc	lr
 801ae6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801ae72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 801ae76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ae7a:	4770      	bx	lr
 801ae7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 801ae80:	bf16      	itet	ne
 801ae82:	4608      	movne	r0, r1
 801ae84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 801ae88:	4601      	movne	r1, r0
 801ae8a:	0242      	lsls	r2, r0, #9
 801ae8c:	bf06      	itte	eq
 801ae8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 801ae92:	ea90 0f01 	teqeq	r0, r1
 801ae96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 801ae9a:	4770      	bx	lr

0801ae9c <__aeabi_ui2f>:
 801ae9c:	f04f 0300 	mov.w	r3, #0
 801aea0:	e004      	b.n	801aeac <__aeabi_i2f+0x8>
 801aea2:	bf00      	nop

0801aea4 <__aeabi_i2f>:
 801aea4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 801aea8:	bf48      	it	mi
 801aeaa:	4240      	negmi	r0, r0
 801aeac:	ea5f 0c00 	movs.w	ip, r0
 801aeb0:	bf08      	it	eq
 801aeb2:	4770      	bxeq	lr
 801aeb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 801aeb8:	4601      	mov	r1, r0
 801aeba:	f04f 0000 	mov.w	r0, #0
 801aebe:	e01c      	b.n	801aefa <__aeabi_l2f+0x2a>

0801aec0 <__aeabi_ul2f>:
 801aec0:	ea50 0201 	orrs.w	r2, r0, r1
 801aec4:	bf08      	it	eq
 801aec6:	4770      	bxeq	lr
 801aec8:	f04f 0300 	mov.w	r3, #0
 801aecc:	e00a      	b.n	801aee4 <__aeabi_l2f+0x14>
 801aece:	bf00      	nop

0801aed0 <__aeabi_l2f>:
 801aed0:	ea50 0201 	orrs.w	r2, r0, r1
 801aed4:	bf08      	it	eq
 801aed6:	4770      	bxeq	lr
 801aed8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 801aedc:	d502      	bpl.n	801aee4 <__aeabi_l2f+0x14>
 801aede:	4240      	negs	r0, r0
 801aee0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801aee4:	ea5f 0c01 	movs.w	ip, r1
 801aee8:	bf02      	ittt	eq
 801aeea:	4684      	moveq	ip, r0
 801aeec:	4601      	moveq	r1, r0
 801aeee:	2000      	moveq	r0, #0
 801aef0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 801aef4:	bf08      	it	eq
 801aef6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 801aefa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801aefe:	fabc f28c 	clz	r2, ip
 801af02:	3a08      	subs	r2, #8
 801af04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 801af08:	db10      	blt.n	801af2c <__aeabi_l2f+0x5c>
 801af0a:	fa01 fc02 	lsl.w	ip, r1, r2
 801af0e:	4463      	add	r3, ip
 801af10:	fa00 fc02 	lsl.w	ip, r0, r2
 801af14:	f1c2 0220 	rsb	r2, r2, #32
 801af18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801af1c:	fa20 f202 	lsr.w	r2, r0, r2
 801af20:	eb43 0002 	adc.w	r0, r3, r2
 801af24:	bf08      	it	eq
 801af26:	f020 0001 	biceq.w	r0, r0, #1
 801af2a:	4770      	bx	lr
 801af2c:	f102 0220 	add.w	r2, r2, #32
 801af30:	fa01 fc02 	lsl.w	ip, r1, r2
 801af34:	f1c2 0220 	rsb	r2, r2, #32
 801af38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801af3c:	fa21 f202 	lsr.w	r2, r1, r2
 801af40:	eb43 0002 	adc.w	r0, r3, r2
 801af44:	bf08      	it	eq
 801af46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801af4a:	4770      	bx	lr

0801af4c <__aeabi_fmul>:
 801af4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801af50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801af54:	bf1e      	ittt	ne
 801af56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801af5a:	ea92 0f0c 	teqne	r2, ip
 801af5e:	ea93 0f0c 	teqne	r3, ip
 801af62:	d06f      	beq.n	801b044 <__aeabi_fmul+0xf8>
 801af64:	441a      	add	r2, r3
 801af66:	ea80 0c01 	eor.w	ip, r0, r1
 801af6a:	0240      	lsls	r0, r0, #9
 801af6c:	bf18      	it	ne
 801af6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 801af72:	d01e      	beq.n	801afb2 <__aeabi_fmul+0x66>
 801af74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801af78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801af7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 801af80:	fba0 3101 	umull	r3, r1, r0, r1
 801af84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801af88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801af8c:	bf3e      	ittt	cc
 801af8e:	0049      	lslcc	r1, r1, #1
 801af90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 801af94:	005b      	lslcc	r3, r3, #1
 801af96:	ea40 0001 	orr.w	r0, r0, r1
 801af9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 801af9e:	2afd      	cmp	r2, #253	; 0xfd
 801afa0:	d81d      	bhi.n	801afde <__aeabi_fmul+0x92>
 801afa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801afa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801afaa:	bf08      	it	eq
 801afac:	f020 0001 	biceq.w	r0, r0, #1
 801afb0:	4770      	bx	lr
 801afb2:	f090 0f00 	teq	r0, #0
 801afb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801afba:	bf08      	it	eq
 801afbc:	0249      	lsleq	r1, r1, #9
 801afbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801afc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 801afc6:	3a7f      	subs	r2, #127	; 0x7f
 801afc8:	bfc2      	ittt	gt
 801afca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801afce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801afd2:	4770      	bxgt	lr
 801afd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801afd8:	f04f 0300 	mov.w	r3, #0
 801afdc:	3a01      	subs	r2, #1
 801afde:	dc5d      	bgt.n	801b09c <__aeabi_fmul+0x150>
 801afe0:	f112 0f19 	cmn.w	r2, #25
 801afe4:	bfdc      	itt	le
 801afe6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 801afea:	4770      	bxle	lr
 801afec:	f1c2 0200 	rsb	r2, r2, #0
 801aff0:	0041      	lsls	r1, r0, #1
 801aff2:	fa21 f102 	lsr.w	r1, r1, r2
 801aff6:	f1c2 0220 	rsb	r2, r2, #32
 801affa:	fa00 fc02 	lsl.w	ip, r0, r2
 801affe:	ea5f 0031 	movs.w	r0, r1, rrx
 801b002:	f140 0000 	adc.w	r0, r0, #0
 801b006:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 801b00a:	bf08      	it	eq
 801b00c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801b010:	4770      	bx	lr
 801b012:	f092 0f00 	teq	r2, #0
 801b016:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801b01a:	bf02      	ittt	eq
 801b01c:	0040      	lsleq	r0, r0, #1
 801b01e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801b022:	3a01      	subeq	r2, #1
 801b024:	d0f9      	beq.n	801b01a <__aeabi_fmul+0xce>
 801b026:	ea40 000c 	orr.w	r0, r0, ip
 801b02a:	f093 0f00 	teq	r3, #0
 801b02e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801b032:	bf02      	ittt	eq
 801b034:	0049      	lsleq	r1, r1, #1
 801b036:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801b03a:	3b01      	subeq	r3, #1
 801b03c:	d0f9      	beq.n	801b032 <__aeabi_fmul+0xe6>
 801b03e:	ea41 010c 	orr.w	r1, r1, ip
 801b042:	e78f      	b.n	801af64 <__aeabi_fmul+0x18>
 801b044:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801b048:	ea92 0f0c 	teq	r2, ip
 801b04c:	bf18      	it	ne
 801b04e:	ea93 0f0c 	teqne	r3, ip
 801b052:	d00a      	beq.n	801b06a <__aeabi_fmul+0x11e>
 801b054:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801b058:	bf18      	it	ne
 801b05a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801b05e:	d1d8      	bne.n	801b012 <__aeabi_fmul+0xc6>
 801b060:	ea80 0001 	eor.w	r0, r0, r1
 801b064:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b068:	4770      	bx	lr
 801b06a:	f090 0f00 	teq	r0, #0
 801b06e:	bf17      	itett	ne
 801b070:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 801b074:	4608      	moveq	r0, r1
 801b076:	f091 0f00 	teqne	r1, #0
 801b07a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 801b07e:	d014      	beq.n	801b0aa <__aeabi_fmul+0x15e>
 801b080:	ea92 0f0c 	teq	r2, ip
 801b084:	d101      	bne.n	801b08a <__aeabi_fmul+0x13e>
 801b086:	0242      	lsls	r2, r0, #9
 801b088:	d10f      	bne.n	801b0aa <__aeabi_fmul+0x15e>
 801b08a:	ea93 0f0c 	teq	r3, ip
 801b08e:	d103      	bne.n	801b098 <__aeabi_fmul+0x14c>
 801b090:	024b      	lsls	r3, r1, #9
 801b092:	bf18      	it	ne
 801b094:	4608      	movne	r0, r1
 801b096:	d108      	bne.n	801b0aa <__aeabi_fmul+0x15e>
 801b098:	ea80 0001 	eor.w	r0, r0, r1
 801b09c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b0a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801b0a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b0a8:	4770      	bx	lr
 801b0aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801b0ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 801b0b2:	4770      	bx	lr

0801b0b4 <__aeabi_fdiv>:
 801b0b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801b0b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 801b0bc:	bf1e      	ittt	ne
 801b0be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801b0c2:	ea92 0f0c 	teqne	r2, ip
 801b0c6:	ea93 0f0c 	teqne	r3, ip
 801b0ca:	d069      	beq.n	801b1a0 <__aeabi_fdiv+0xec>
 801b0cc:	eba2 0203 	sub.w	r2, r2, r3
 801b0d0:	ea80 0c01 	eor.w	ip, r0, r1
 801b0d4:	0249      	lsls	r1, r1, #9
 801b0d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 801b0da:	d037      	beq.n	801b14c <__aeabi_fdiv+0x98>
 801b0dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b0e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 801b0e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 801b0e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801b0ec:	428b      	cmp	r3, r1
 801b0ee:	bf38      	it	cc
 801b0f0:	005b      	lslcc	r3, r3, #1
 801b0f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 801b0f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 801b0fa:	428b      	cmp	r3, r1
 801b0fc:	bf24      	itt	cs
 801b0fe:	1a5b      	subcs	r3, r3, r1
 801b100:	ea40 000c 	orrcs.w	r0, r0, ip
 801b104:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 801b108:	bf24      	itt	cs
 801b10a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 801b10e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 801b112:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 801b116:	bf24      	itt	cs
 801b118:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801b11c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 801b120:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 801b124:	bf24      	itt	cs
 801b126:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801b12a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801b12e:	011b      	lsls	r3, r3, #4
 801b130:	bf18      	it	ne
 801b132:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 801b136:	d1e0      	bne.n	801b0fa <__aeabi_fdiv+0x46>
 801b138:	2afd      	cmp	r2, #253	; 0xfd
 801b13a:	f63f af50 	bhi.w	801afde <__aeabi_fmul+0x92>
 801b13e:	428b      	cmp	r3, r1
 801b140:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801b144:	bf08      	it	eq
 801b146:	f020 0001 	biceq.w	r0, r0, #1
 801b14a:	4770      	bx	lr
 801b14c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 801b150:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 801b154:	327f      	adds	r2, #127	; 0x7f
 801b156:	bfc2      	ittt	gt
 801b158:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801b15c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 801b160:	4770      	bxgt	lr
 801b162:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b166:	f04f 0300 	mov.w	r3, #0
 801b16a:	3a01      	subs	r2, #1
 801b16c:	e737      	b.n	801afde <__aeabi_fmul+0x92>
 801b16e:	f092 0f00 	teq	r2, #0
 801b172:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801b176:	bf02      	ittt	eq
 801b178:	0040      	lsleq	r0, r0, #1
 801b17a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801b17e:	3a01      	subeq	r2, #1
 801b180:	d0f9      	beq.n	801b176 <__aeabi_fdiv+0xc2>
 801b182:	ea40 000c 	orr.w	r0, r0, ip
 801b186:	f093 0f00 	teq	r3, #0
 801b18a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801b18e:	bf02      	ittt	eq
 801b190:	0049      	lsleq	r1, r1, #1
 801b192:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801b196:	3b01      	subeq	r3, #1
 801b198:	d0f9      	beq.n	801b18e <__aeabi_fdiv+0xda>
 801b19a:	ea41 010c 	orr.w	r1, r1, ip
 801b19e:	e795      	b.n	801b0cc <__aeabi_fdiv+0x18>
 801b1a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 801b1a4:	ea92 0f0c 	teq	r2, ip
 801b1a8:	d108      	bne.n	801b1bc <__aeabi_fdiv+0x108>
 801b1aa:	0242      	lsls	r2, r0, #9
 801b1ac:	f47f af7d 	bne.w	801b0aa <__aeabi_fmul+0x15e>
 801b1b0:	ea93 0f0c 	teq	r3, ip
 801b1b4:	f47f af70 	bne.w	801b098 <__aeabi_fmul+0x14c>
 801b1b8:	4608      	mov	r0, r1
 801b1ba:	e776      	b.n	801b0aa <__aeabi_fmul+0x15e>
 801b1bc:	ea93 0f0c 	teq	r3, ip
 801b1c0:	d104      	bne.n	801b1cc <__aeabi_fdiv+0x118>
 801b1c2:	024b      	lsls	r3, r1, #9
 801b1c4:	f43f af4c 	beq.w	801b060 <__aeabi_fmul+0x114>
 801b1c8:	4608      	mov	r0, r1
 801b1ca:	e76e      	b.n	801b0aa <__aeabi_fmul+0x15e>
 801b1cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 801b1d0:	bf18      	it	ne
 801b1d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801b1d6:	d1ca      	bne.n	801b16e <__aeabi_fdiv+0xba>
 801b1d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801b1dc:	f47f af5c 	bne.w	801b098 <__aeabi_fmul+0x14c>
 801b1e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 801b1e4:	f47f af3c 	bne.w	801b060 <__aeabi_fmul+0x114>
 801b1e8:	e75f      	b.n	801b0aa <__aeabi_fmul+0x15e>
 801b1ea:	bf00      	nop

0801b1ec <__aeabi_f2iz>:
 801b1ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 801b1f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801b1f4:	d30f      	bcc.n	801b216 <__aeabi_f2iz+0x2a>
 801b1f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 801b1fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 801b1fe:	d90d      	bls.n	801b21c <__aeabi_f2iz+0x30>
 801b200:	ea4f 2300 	mov.w	r3, r0, lsl #8
 801b204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b208:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 801b20c:	fa23 f002 	lsr.w	r0, r3, r2
 801b210:	bf18      	it	ne
 801b212:	4240      	negne	r0, r0
 801b214:	4770      	bx	lr
 801b216:	f04f 0000 	mov.w	r0, #0
 801b21a:	4770      	bx	lr
 801b21c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 801b220:	d101      	bne.n	801b226 <__aeabi_f2iz+0x3a>
 801b222:	0242      	lsls	r2, r0, #9
 801b224:	d105      	bne.n	801b232 <__aeabi_f2iz+0x46>
 801b226:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 801b22a:	bf08      	it	eq
 801b22c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801b230:	4770      	bx	lr
 801b232:	f04f 0000 	mov.w	r0, #0
 801b236:	4770      	bx	lr

0801b238 <__libc_init_array>:
 801b238:	b538      	push	{r3, r4, r5, lr}
 801b23a:	4d0e      	ldr	r5, [pc, #56]	; (801b274 <__libc_init_array+0x3c>)
 801b23c:	4b0e      	ldr	r3, [pc, #56]	; (801b278 <__libc_init_array+0x40>)
 801b23e:	1ae8      	subs	r0, r5, r3
 801b240:	1085      	asrs	r5, r0, #2
 801b242:	2400      	movs	r4, #0
 801b244:	42ac      	cmp	r4, r5
 801b246:	d005      	beq.n	801b254 <__libc_init_array+0x1c>
 801b248:	490b      	ldr	r1, [pc, #44]	; (801b278 <__libc_init_array+0x40>)
 801b24a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 801b24e:	4790      	blx	r2
 801b250:	3401      	adds	r4, #1
 801b252:	e7f7      	b.n	801b244 <__libc_init_array+0xc>
 801b254:	f7f6 f904 	bl	8011460 <_init>
 801b258:	4908      	ldr	r1, [pc, #32]	; (801b27c <__libc_init_array+0x44>)
 801b25a:	4a09      	ldr	r2, [pc, #36]	; (801b280 <__libc_init_array+0x48>)
 801b25c:	1a54      	subs	r4, r2, r1
 801b25e:	10a5      	asrs	r5, r4, #2
 801b260:	2400      	movs	r4, #0
 801b262:	42ac      	cmp	r4, r5
 801b264:	d005      	beq.n	801b272 <__libc_init_array+0x3a>
 801b266:	4b05      	ldr	r3, [pc, #20]	; (801b27c <__libc_init_array+0x44>)
 801b268:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b26c:	4780      	blx	r0
 801b26e:	3401      	adds	r4, #1
 801b270:	e7f7      	b.n	801b262 <__libc_init_array+0x2a>
 801b272:	bd38      	pop	{r3, r4, r5, pc}
 801b274:	0801c490 	.word	0x0801c490
 801b278:	0801c490 	.word	0x0801c490
 801b27c:	0801c490 	.word	0x0801c490
 801b280:	0801c490 	.word	0x0801c490

0801b284 <memcpy>:
 801b284:	b510      	push	{r4, lr}
 801b286:	2300      	movs	r3, #0
 801b288:	4293      	cmp	r3, r2
 801b28a:	d003      	beq.n	801b294 <memcpy+0x10>
 801b28c:	5ccc      	ldrb	r4, [r1, r3]
 801b28e:	54c4      	strb	r4, [r0, r3]
 801b290:	3301      	adds	r3, #1
 801b292:	e7f9      	b.n	801b288 <memcpy+0x4>
 801b294:	bd10      	pop	{r4, pc}

0801b296 <memset>:
 801b296:	1882      	adds	r2, r0, r2
 801b298:	4603      	mov	r3, r0
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d002      	beq.n	801b2a4 <memset+0xe>
 801b29e:	f803 1b01 	strb.w	r1, [r3], #1
 801b2a2:	e7fa      	b.n	801b29a <memset+0x4>
 801b2a4:	4770      	bx	lr

0801b2a6 <strlen>:
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2ac:	2a00      	cmp	r2, #0
 801b2ae:	d1fb      	bne.n	801b2a8 <strlen+0x2>
 801b2b0:	1a18      	subs	r0, r3, r0
 801b2b2:	3801      	subs	r0, #1
 801b2b4:	4770      	bx	lr
